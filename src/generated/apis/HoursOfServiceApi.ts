/* tslint:disable */
/* eslint-disable */
/**
 * Samsara API
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara\'s new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what\'s changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can\'t find an API that you\'re looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you\'re familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, please visit https://samsara.com/help.  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ### OAuth2 If building an application for our marketplace, our API is accessible via. OAuth2 as well.  | Type  | Value | | ------------- |:-------------:| | Security scheme      | OAuth2                                   | | OAuth2 Flow          | accessCode                               | | Authorization URL    | https://api.samsara.com/oauth2/authorize | | Token URL            | https://api.samsara.com/oauth2/token     |    ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures). 
 *
 * The version of the OpenAPI document: 2020-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    HosClocksResponse,
    HosClocksResponseFromJSON,
    HosClocksResponseToJSON,
    HosDailyLogsGetHosDailyLogsBadGatewayErrorResponseBody,
    HosDailyLogsGetHosDailyLogsBadGatewayErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsBadGatewayErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsBadRequestErrorResponseBody,
    HosDailyLogsGetHosDailyLogsBadRequestErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsBadRequestErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsGatewayTimeoutErrorResponseBody,
    HosDailyLogsGetHosDailyLogsGatewayTimeoutErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsGatewayTimeoutErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsInternalServerErrorResponseBody,
    HosDailyLogsGetHosDailyLogsInternalServerErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsInternalServerErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsMethodNotAllowedErrorResponseBody,
    HosDailyLogsGetHosDailyLogsMethodNotAllowedErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsMethodNotAllowedErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsNotFoundErrorResponseBody,
    HosDailyLogsGetHosDailyLogsNotFoundErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsNotFoundErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsNotImplementedErrorResponseBody,
    HosDailyLogsGetHosDailyLogsNotImplementedErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsNotImplementedErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsResponseBody,
    HosDailyLogsGetHosDailyLogsResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsServiceUnavailableErrorResponseBody,
    HosDailyLogsGetHosDailyLogsServiceUnavailableErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsServiceUnavailableErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsTooManyRequestsErrorResponseBody,
    HosDailyLogsGetHosDailyLogsTooManyRequestsErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsTooManyRequestsErrorResponseBodyToJSON,
    HosDailyLogsGetHosDailyLogsUnauthorizedErrorResponseBody,
    HosDailyLogsGetHosDailyLogsUnauthorizedErrorResponseBodyFromJSON,
    HosDailyLogsGetHosDailyLogsUnauthorizedErrorResponseBodyToJSON,
    HosLogsResponse,
    HosLogsResponseFromJSON,
    HosLogsResponseToJSON,
    InlineObject1,
    InlineObject1FromJSON,
    InlineObject1ToJSON,
    StandardErrorResponse,
    StandardErrorResponseFromJSON,
    StandardErrorResponseToJSON,
    V1HosAuthenticationLogsResponse,
    V1HosAuthenticationLogsResponseFromJSON,
    V1HosAuthenticationLogsResponseToJSON,
} from '../models';

export interface GetHosClocksRequest {
    tagIds?: Array<string>;
    parentTagIds?: Array<string>;
    driverIds?: Array<string>;
    after?: string;
    limit?: number;
}

export interface GetHosDailyLogsRequest {
    driverIds?: Array<string>;
    startDate?: string;
    endDate?: string;
    tagIds?: string;
    parentTagIds?: string;
    driverActivationStatus?: GetHosDailyLogsDriverActivationStatusEnum;
    after?: string;
    expand?: GetHosDailyLogsExpandEnum;
}

export interface GetHosLogsRequest {
    tagIds?: Array<string>;
    parentTagIds?: Array<string>;
    driverIds?: Array<string>;
    startTime?: string;
    endTime?: string;
    after?: string;
}

export interface SetCurrentDutyStatusRequest {
    driverId: number;
    dutyStatusParams?: InlineObject1;
}

export interface V1getFleetHosAuthenticationLogsRequest {
    driverId: number;
    startMs: number;
    endMs: number;
}

/**
 * 
 */
export class HoursOfServiceApi extends runtime.BaseAPI {

    /**
     * Get the current HOS status for all drivers. Note that this includes inactive as well as active drivers. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogsSummary).
     * Get HOS clocks
     */
    async getHosClocksRaw(requestParameters: GetHosClocksRequest): Promise<runtime.ApiResponse<HosClocksResponse>> {
        const queryParameters: any = {};

        if (requestParameters.tagIds) {
            queryParameters['tagIds'] = requestParameters.tagIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.parentTagIds) {
            queryParameters['parentTagIds'] = requestParameters.parentTagIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.driverIds) {
            queryParameters['driverIds'] = requestParameters.driverIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fleet/hos/clocks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HosClocksResponseFromJSON(jsonValue));
    }

    /**
     * Get the current HOS status for all drivers. Note that this includes inactive as well as active drivers. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogsSummary).
     * Get HOS clocks
     */
    async getHosClocks(requestParameters: GetHosClocksRequest): Promise<HosClocksResponse> {
        const response = await this.getHosClocksRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get summarized daily Hours of Service charts for the specified drivers.  The time range for a log is defined by the `driver`\'s `eldDayStartHour`. This value is configurable per driver.  The `startDate` and `endDate` parameters indicate the date range you\'d like to retrieve daily logs for. A daily log will be returned if its `startTime` is on any of the days within in this date range (inclusive of `startDate` and `endDate`).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.  If you are using the legacy version of this endpoint and looking for its documentation, you can find it [here](https://www.samsara.com/api-legacy#operation/getFleetDriversHosDailyLogs).
     * Get all driver HOS daily logs
     */
    async getHosDailyLogsRaw(requestParameters: GetHosDailyLogsRequest): Promise<runtime.ApiResponse<HosDailyLogsGetHosDailyLogsResponseBody>> {
        const queryParameters: any = {};

        if (requestParameters.driverIds) {
            queryParameters['driverIds'] = requestParameters.driverIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.startDate !== undefined) {
            queryParameters['startDate'] = requestParameters.startDate;
        }

        if (requestParameters.endDate !== undefined) {
            queryParameters['endDate'] = requestParameters.endDate;
        }

        if (requestParameters.tagIds !== undefined) {
            queryParameters['tagIds'] = requestParameters.tagIds;
        }

        if (requestParameters.parentTagIds !== undefined) {
            queryParameters['parentTagIds'] = requestParameters.parentTagIds;
        }

        if (requestParameters.driverActivationStatus !== undefined) {
            queryParameters['driverActivationStatus'] = requestParameters.driverActivationStatus;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.expand !== undefined) {
            queryParameters['expand'] = requestParameters.expand;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fleet/hos/daily-logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HosDailyLogsGetHosDailyLogsResponseBodyFromJSON(jsonValue));
    }

    /**
     * Get summarized daily Hours of Service charts for the specified drivers.  The time range for a log is defined by the `driver`\'s `eldDayStartHour`. This value is configurable per driver.  The `startDate` and `endDate` parameters indicate the date range you\'d like to retrieve daily logs for. A daily log will be returned if its `startTime` is on any of the days within in this date range (inclusive of `startDate` and `endDate`).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.  If you are using the legacy version of this endpoint and looking for its documentation, you can find it [here](https://www.samsara.com/api-legacy#operation/getFleetDriversHosDailyLogs).
     * Get all driver HOS daily logs
     */
    async getHosDailyLogs(requestParameters: GetHosDailyLogsRequest): Promise<HosDailyLogsGetHosDailyLogsResponseBody> {
        const response = await this.getHosDailyLogsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns HOS logs between a given `startTime` and `endTime`. The logs can be further filtered using tags or by providing a list of driver IDs (including external IDs). The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogs).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
     * Get HOS logs
     */
    async getHosLogsRaw(requestParameters: GetHosLogsRequest): Promise<runtime.ApiResponse<HosLogsResponse>> {
        const queryParameters: any = {};

        if (requestParameters.tagIds) {
            queryParameters['tagIds'] = requestParameters.tagIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.parentTagIds) {
            queryParameters['parentTagIds'] = requestParameters.parentTagIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.driverIds) {
            queryParameters['driverIds'] = requestParameters.driverIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fleet/hos/logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => HosLogsResponseFromJSON(jsonValue));
    }

    /**
     * Returns HOS logs between a given `startTime` and `endTime`. The logs can be further filtered using tags or by providing a list of driver IDs (including external IDs). The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogs).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
     * Get HOS logs
     */
    async getHosLogs(requestParameters: GetHosLogsRequest): Promise<HosLogsResponse> {
        const response = await this.getHosLogsRaw(requestParameters);
        return await response.value();
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Set an individual driver’s current duty status to \'On Duty\' or \'Off Duty\'.   To ensure compliance with the ELD Mandate, only  authenticated drivers can make direct duty status changes on their own logbook. Any system external to the Samsara Driver App using this endpoint to trigger duty status changes must ensure that such changes are only triggered directly by the driver in question and that the driver has been properly authenticated. This endpoint should not be used to algorithmically trigger duty status changes nor should it be used by personnel besides the driver to trigger duty status changes on the driver’s behalf. Carriers and their drivers are ultimately responsible for maintaining accurate logs and should confirm that their use of the endpoint is compliant with the ELD Mandate.
     * Set a duty status for a specific driver
     */
    async setCurrentDutyStatusRaw(requestParameters: SetCurrentDutyStatusRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.driverId === null || requestParameters.driverId === undefined) {
            throw new runtime.RequiredError('driverId','Required parameter requestParameters.driverId was null or undefined when calling setCurrentDutyStatus.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/fleet/drivers/{driver_id}/duty_status`.replace(`{${"driver_id"}}`, encodeURIComponent(String(requestParameters.driverId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject1ToJSON(requestParameters.dutyStatusParams),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Set an individual driver’s current duty status to \'On Duty\' or \'Off Duty\'.   To ensure compliance with the ELD Mandate, only  authenticated drivers can make direct duty status changes on their own logbook. Any system external to the Samsara Driver App using this endpoint to trigger duty status changes must ensure that such changes are only triggered directly by the driver in question and that the driver has been properly authenticated. This endpoint should not be used to algorithmically trigger duty status changes nor should it be used by personnel besides the driver to trigger duty status changes on the driver’s behalf. Carriers and their drivers are ultimately responsible for maintaining accurate logs and should confirm that their use of the endpoint is compliant with the ELD Mandate.
     * Set a duty status for a specific driver
     */
    async setCurrentDutyStatus(requestParameters: SetCurrentDutyStatusRequest): Promise<void> {
        await this.setCurrentDutyStatusRaw(requestParameters);
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
     * Get HOS signin and signout
     */
    async v1getFleetHosAuthenticationLogsRaw(requestParameters: V1getFleetHosAuthenticationLogsRequest): Promise<runtime.ApiResponse<V1HosAuthenticationLogsResponse>> {
        if (requestParameters.driverId === null || requestParameters.driverId === undefined) {
            throw new runtime.RequiredError('driverId','Required parameter requestParameters.driverId was null or undefined when calling v1getFleetHosAuthenticationLogs.');
        }

        if (requestParameters.startMs === null || requestParameters.startMs === undefined) {
            throw new runtime.RequiredError('startMs','Required parameter requestParameters.startMs was null or undefined when calling v1getFleetHosAuthenticationLogs.');
        }

        if (requestParameters.endMs === null || requestParameters.endMs === undefined) {
            throw new runtime.RequiredError('endMs','Required parameter requestParameters.endMs was null or undefined when calling v1getFleetHosAuthenticationLogs.');
        }

        const queryParameters: any = {};

        if (requestParameters.driverId !== undefined) {
            queryParameters['driverId'] = requestParameters.driverId;
        }

        if (requestParameters.startMs !== undefined) {
            queryParameters['startMs'] = requestParameters.startMs;
        }

        if (requestParameters.endMs !== undefined) {
            queryParameters['endMs'] = requestParameters.endMs;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/fleet/hos_authentication_logs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HosAuthenticationLogsResponseFromJSON(jsonValue));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
     * Get HOS signin and signout
     */
    async v1getFleetHosAuthenticationLogs(requestParameters: V1getFleetHosAuthenticationLogsRequest): Promise<V1HosAuthenticationLogsResponse> {
        const response = await this.v1getFleetHosAuthenticationLogsRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum GetHosDailyLogsDriverActivationStatusEnum {
    Active = 'active',
    Deactivated = 'deactivated'
}
/**
    * @export
    * @enum {string}
    */
export enum GetHosDailyLogsExpandEnum {
    Vehicle = 'vehicle'
}
