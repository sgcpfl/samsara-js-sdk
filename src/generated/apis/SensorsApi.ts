/* tslint:disable */
/* eslint-disable */
/**
 * Samsara API
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara\'s new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what\'s changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can\'t find an API that you\'re looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you\'re familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, please visit https://samsara.com/help.  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ### OAuth2 If building an application for our marketplace, our API is accessible via. OAuth2 as well.  | Type  | Value | | ------------- |:-------------:| | Security scheme      | OAuth2                                   | | OAuth2 Flow          | accessCode                               | | Authorization URL    | https://api.samsara.com/oauth2/authorize | | Token URL            | https://api.samsara.com/oauth2/token     |    ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures). 
 *
 * The version of the OpenAPI document: 2020-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    InlineObject4,
    InlineObject4FromJSON,
    InlineObject4ToJSON,
    InlineObject5,
    InlineObject5FromJSON,
    InlineObject5ToJSON,
    InlineObject6,
    InlineObject6FromJSON,
    InlineObject6ToJSON,
    InlineObject7,
    InlineObject7FromJSON,
    InlineObject7ToJSON,
    InlineObject8,
    InlineObject8FromJSON,
    InlineObject8ToJSON,
    InlineResponse2009,
    InlineResponse2009FromJSON,
    InlineResponse2009ToJSON,
    V1CargoResponse,
    V1CargoResponseFromJSON,
    V1CargoResponseToJSON,
    V1DoorResponse,
    V1DoorResponseFromJSON,
    V1DoorResponseToJSON,
    V1HumidityResponse,
    V1HumidityResponseFromJSON,
    V1HumidityResponseToJSON,
    V1SensorHistoryResponse,
    V1SensorHistoryResponseFromJSON,
    V1SensorHistoryResponseToJSON,
    V1TemperatureResponse,
    V1TemperatureResponseFromJSON,
    V1TemperatureResponseToJSON,
} from '../models';

export interface V1getSensorsCargoRequest {
    v1sensorParam: InlineObject4;
}

export interface V1getSensorsDoorRequest {
    v1sensorParam: InlineObject5;
}

export interface V1getSensorsHistoryRequest {
    historyParam: InlineObject6;
}

export interface V1getSensorsHumidityRequest {
    v1sensorParam: InlineObject7;
}

export interface V1getSensorsTemperatureRequest {
    v1sensorParam: InlineObject8;
}

/**
 * 
 */
export class SensorsApi extends runtime.BaseAPI {

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
     * Get all sensors
     */
    async v1getSensorsRaw(): Promise<runtime.ApiResponse<InlineResponse2009>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/sensors/list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2009FromJSON(jsonValue));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
     * Get all sensors
     */
    async v1getSensors(): Promise<InlineResponse2009> {
        const response = await this.v1getSensorsRaw();
        return await response.value();
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get cargo monitor status (empty / full) for requested sensors.
     * Get cargo status
     */
    async v1getSensorsCargoRaw(requestParameters: V1getSensorsCargoRequest): Promise<runtime.ApiResponse<V1CargoResponse>> {
        if (requestParameters.v1sensorParam === null || requestParameters.v1sensorParam === undefined) {
            throw new runtime.RequiredError('v1sensorParam','Required parameter requestParameters.v1sensorParam was null or undefined when calling v1getSensorsCargo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sensors/cargo`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject4ToJSON(requestParameters.v1sensorParam),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1CargoResponseFromJSON(jsonValue));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get cargo monitor status (empty / full) for requested sensors.
     * Get cargo status
     */
    async v1getSensorsCargo(requestParameters: V1getSensorsCargoRequest): Promise<V1CargoResponse> {
        const response = await this.v1getSensorsCargoRaw(requestParameters);
        return await response.value();
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get door monitor status (closed / open) for requested sensors.
     * Get door status
     */
    async v1getSensorsDoorRaw(requestParameters: V1getSensorsDoorRequest): Promise<runtime.ApiResponse<V1DoorResponse>> {
        if (requestParameters.v1sensorParam === null || requestParameters.v1sensorParam === undefined) {
            throw new runtime.RequiredError('v1sensorParam','Required parameter requestParameters.v1sensorParam was null or undefined when calling v1getSensorsDoor.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sensors/door`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject5ToJSON(requestParameters.v1sensorParam),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1DoorResponseFromJSON(jsonValue));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get door monitor status (closed / open) for requested sensors.
     * Get door status
     */
    async v1getSensorsDoor(requestParameters: V1getSensorsDoorRequest): Promise<V1DoorResponse> {
        const response = await this.v1getSensorsDoorRaw(requestParameters);
        return await response.value();
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
     * Get sensor history
     */
    async v1getSensorsHistoryRaw(requestParameters: V1getSensorsHistoryRequest): Promise<runtime.ApiResponse<V1SensorHistoryResponse>> {
        if (requestParameters.historyParam === null || requestParameters.historyParam === undefined) {
            throw new runtime.RequiredError('historyParam','Required parameter requestParameters.historyParam was null or undefined when calling v1getSensorsHistory.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sensors/history`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject6ToJSON(requestParameters.historyParam),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1SensorHistoryResponseFromJSON(jsonValue));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
     * Get sensor history
     */
    async v1getSensorsHistory(requestParameters: V1getSensorsHistoryRequest): Promise<V1SensorHistoryResponse> {
        const response = await this.v1getSensorsHistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
     * Get humidity
     */
    async v1getSensorsHumidityRaw(requestParameters: V1getSensorsHumidityRequest): Promise<runtime.ApiResponse<V1HumidityResponse>> {
        if (requestParameters.v1sensorParam === null || requestParameters.v1sensorParam === undefined) {
            throw new runtime.RequiredError('v1sensorParam','Required parameter requestParameters.v1sensorParam was null or undefined when calling v1getSensorsHumidity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sensors/humidity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject7ToJSON(requestParameters.v1sensorParam),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1HumidityResponseFromJSON(jsonValue));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
     * Get humidity
     */
    async v1getSensorsHumidity(requestParameters: V1getSensorsHumidityRequest): Promise<V1HumidityResponse> {
        const response = await this.v1getSensorsHumidityRaw(requestParameters);
        return await response.value();
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
     * Get temperature
     */
    async v1getSensorsTemperatureRaw(requestParameters: V1getSensorsTemperatureRequest): Promise<runtime.ApiResponse<V1TemperatureResponse>> {
        if (requestParameters.v1sensorParam === null || requestParameters.v1sensorParam === undefined) {
            throw new runtime.RequiredError('v1sensorParam','Required parameter requestParameters.v1sensorParam was null or undefined when calling v1getSensorsTemperature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/v1/sensors/temperature`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InlineObject8ToJSON(requestParameters.v1sensorParam),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => V1TemperatureResponseFromJSON(jsonValue));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
     * Get temperature
     */
    async v1getSensorsTemperature(requestParameters: V1getSensorsTemperatureRequest): Promise<V1TemperatureResponse> {
        const response = await this.v1getSensorsTemperatureRaw(requestParameters);
        return await response.value();
    }

}
