/* tslint:disable */
/* eslint-disable */
/**
 * Samsara API
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara\'s new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what\'s changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can\'t find an API that you\'re looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you\'re familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, please visit https://samsara.com/help.  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ### OAuth2 If building an application for our marketplace, our API is accessible via. OAuth2 as well.  | Type  | Value | | ------------- |:-------------:| | Security scheme      | OAuth2                                   | | OAuth2 Flow          | accessCode                               | | Authorization URL    | https://api.samsara.com/oauth2/authorize | | Token URL            | https://api.samsara.com/oauth2/token     |    ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures). 
 *
 * The version of the OpenAPI document: 2020-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AttributeExpandedResponse,
    AttributeExpandedResponseFromJSON,
    AttributeExpandedResponseToJSON,
    CreateAttributeRequest,
    CreateAttributeRequestFromJSON,
    CreateAttributeRequestToJSON,
    DocumentTypesGetDocumentTypesBadGatewayErrorResponseBody,
    DocumentTypesGetDocumentTypesBadGatewayErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesBadGatewayErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesBadRequestErrorResponseBody,
    DocumentTypesGetDocumentTypesBadRequestErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesBadRequestErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesGatewayTimeoutErrorResponseBody,
    DocumentTypesGetDocumentTypesGatewayTimeoutErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesGatewayTimeoutErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesInternalServerErrorResponseBody,
    DocumentTypesGetDocumentTypesInternalServerErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesInternalServerErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesMethodNotAllowedErrorResponseBody,
    DocumentTypesGetDocumentTypesMethodNotAllowedErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesMethodNotAllowedErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesNotFoundErrorResponseBody,
    DocumentTypesGetDocumentTypesNotFoundErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesNotFoundErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesNotImplementedErrorResponseBody,
    DocumentTypesGetDocumentTypesNotImplementedErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesNotImplementedErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesResponseBody,
    DocumentTypesGetDocumentTypesResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesResponseBodyToJSON,
    DocumentTypesGetDocumentTypesServiceUnavailableErrorResponseBody,
    DocumentTypesGetDocumentTypesServiceUnavailableErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesServiceUnavailableErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesTooManyRequestsErrorResponseBody,
    DocumentTypesGetDocumentTypesTooManyRequestsErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesTooManyRequestsErrorResponseBodyToJSON,
    DocumentTypesGetDocumentTypesUnauthorizedErrorResponseBody,
    DocumentTypesGetDocumentTypesUnauthorizedErrorResponseBodyFromJSON,
    DocumentTypesGetDocumentTypesUnauthorizedErrorResponseBodyToJSON,
    DocumentsDeleteDocumentBadGatewayErrorResponseBody,
    DocumentsDeleteDocumentBadGatewayErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentBadGatewayErrorResponseBodyToJSON,
    DocumentsDeleteDocumentBadRequestErrorResponseBody,
    DocumentsDeleteDocumentBadRequestErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentBadRequestErrorResponseBodyToJSON,
    DocumentsDeleteDocumentGatewayTimeoutErrorResponseBody,
    DocumentsDeleteDocumentGatewayTimeoutErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentGatewayTimeoutErrorResponseBodyToJSON,
    DocumentsDeleteDocumentInternalServerErrorResponseBody,
    DocumentsDeleteDocumentInternalServerErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentInternalServerErrorResponseBodyToJSON,
    DocumentsDeleteDocumentMethodNotAllowedErrorResponseBody,
    DocumentsDeleteDocumentMethodNotAllowedErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentMethodNotAllowedErrorResponseBodyToJSON,
    DocumentsDeleteDocumentNotFoundErrorResponseBody,
    DocumentsDeleteDocumentNotFoundErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentNotFoundErrorResponseBodyToJSON,
    DocumentsDeleteDocumentNotImplementedErrorResponseBody,
    DocumentsDeleteDocumentNotImplementedErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentNotImplementedErrorResponseBodyToJSON,
    DocumentsDeleteDocumentServiceUnavailableErrorResponseBody,
    DocumentsDeleteDocumentServiceUnavailableErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentServiceUnavailableErrorResponseBodyToJSON,
    DocumentsDeleteDocumentTooManyRequestsErrorResponseBody,
    DocumentsDeleteDocumentTooManyRequestsErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentTooManyRequestsErrorResponseBodyToJSON,
    DocumentsDeleteDocumentUnauthorizedErrorResponseBody,
    DocumentsDeleteDocumentUnauthorizedErrorResponseBodyFromJSON,
    DocumentsDeleteDocumentUnauthorizedErrorResponseBodyToJSON,
    DocumentsGetDocumentBadGatewayErrorResponseBody,
    DocumentsGetDocumentBadGatewayErrorResponseBodyFromJSON,
    DocumentsGetDocumentBadGatewayErrorResponseBodyToJSON,
    DocumentsGetDocumentBadRequestErrorResponseBody,
    DocumentsGetDocumentBadRequestErrorResponseBodyFromJSON,
    DocumentsGetDocumentBadRequestErrorResponseBodyToJSON,
    DocumentsGetDocumentGatewayTimeoutErrorResponseBody,
    DocumentsGetDocumentGatewayTimeoutErrorResponseBodyFromJSON,
    DocumentsGetDocumentGatewayTimeoutErrorResponseBodyToJSON,
    DocumentsGetDocumentInternalServerErrorResponseBody,
    DocumentsGetDocumentInternalServerErrorResponseBodyFromJSON,
    DocumentsGetDocumentInternalServerErrorResponseBodyToJSON,
    DocumentsGetDocumentMethodNotAllowedErrorResponseBody,
    DocumentsGetDocumentMethodNotAllowedErrorResponseBodyFromJSON,
    DocumentsGetDocumentMethodNotAllowedErrorResponseBodyToJSON,
    DocumentsGetDocumentNotFoundErrorResponseBody,
    DocumentsGetDocumentNotFoundErrorResponseBodyFromJSON,
    DocumentsGetDocumentNotFoundErrorResponseBodyToJSON,
    DocumentsGetDocumentNotImplementedErrorResponseBody,
    DocumentsGetDocumentNotImplementedErrorResponseBodyFromJSON,
    DocumentsGetDocumentNotImplementedErrorResponseBodyToJSON,
    DocumentsGetDocumentResponseBody,
    DocumentsGetDocumentResponseBodyFromJSON,
    DocumentsGetDocumentResponseBodyToJSON,
    DocumentsGetDocumentServiceUnavailableErrorResponseBody,
    DocumentsGetDocumentServiceUnavailableErrorResponseBodyFromJSON,
    DocumentsGetDocumentServiceUnavailableErrorResponseBodyToJSON,
    DocumentsGetDocumentTooManyRequestsErrorResponseBody,
    DocumentsGetDocumentTooManyRequestsErrorResponseBodyFromJSON,
    DocumentsGetDocumentTooManyRequestsErrorResponseBodyToJSON,
    DocumentsGetDocumentUnauthorizedErrorResponseBody,
    DocumentsGetDocumentUnauthorizedErrorResponseBodyFromJSON,
    DocumentsGetDocumentUnauthorizedErrorResponseBodyToJSON,
    DocumentsGetDocumentsBadGatewayErrorResponseBody,
    DocumentsGetDocumentsBadGatewayErrorResponseBodyFromJSON,
    DocumentsGetDocumentsBadGatewayErrorResponseBodyToJSON,
    DocumentsGetDocumentsBadRequestErrorResponseBody,
    DocumentsGetDocumentsBadRequestErrorResponseBodyFromJSON,
    DocumentsGetDocumentsBadRequestErrorResponseBodyToJSON,
    DocumentsGetDocumentsGatewayTimeoutErrorResponseBody,
    DocumentsGetDocumentsGatewayTimeoutErrorResponseBodyFromJSON,
    DocumentsGetDocumentsGatewayTimeoutErrorResponseBodyToJSON,
    DocumentsGetDocumentsInternalServerErrorResponseBody,
    DocumentsGetDocumentsInternalServerErrorResponseBodyFromJSON,
    DocumentsGetDocumentsInternalServerErrorResponseBodyToJSON,
    DocumentsGetDocumentsMethodNotAllowedErrorResponseBody,
    DocumentsGetDocumentsMethodNotAllowedErrorResponseBodyFromJSON,
    DocumentsGetDocumentsMethodNotAllowedErrorResponseBodyToJSON,
    DocumentsGetDocumentsNotFoundErrorResponseBody,
    DocumentsGetDocumentsNotFoundErrorResponseBodyFromJSON,
    DocumentsGetDocumentsNotFoundErrorResponseBodyToJSON,
    DocumentsGetDocumentsNotImplementedErrorResponseBody,
    DocumentsGetDocumentsNotImplementedErrorResponseBodyFromJSON,
    DocumentsGetDocumentsNotImplementedErrorResponseBodyToJSON,
    DocumentsGetDocumentsResponseBody,
    DocumentsGetDocumentsResponseBodyFromJSON,
    DocumentsGetDocumentsResponseBodyToJSON,
    DocumentsGetDocumentsServiceUnavailableErrorResponseBody,
    DocumentsGetDocumentsServiceUnavailableErrorResponseBodyFromJSON,
    DocumentsGetDocumentsServiceUnavailableErrorResponseBodyToJSON,
    DocumentsGetDocumentsTooManyRequestsErrorResponseBody,
    DocumentsGetDocumentsTooManyRequestsErrorResponseBodyFromJSON,
    DocumentsGetDocumentsTooManyRequestsErrorResponseBodyToJSON,
    DocumentsGetDocumentsUnauthorizedErrorResponseBody,
    DocumentsGetDocumentsUnauthorizedErrorResponseBodyFromJSON,
    DocumentsGetDocumentsUnauthorizedErrorResponseBodyToJSON,
    DocumentsPostDocumentBadGatewayErrorResponseBody,
    DocumentsPostDocumentBadGatewayErrorResponseBodyFromJSON,
    DocumentsPostDocumentBadGatewayErrorResponseBodyToJSON,
    DocumentsPostDocumentBadRequestErrorResponseBody,
    DocumentsPostDocumentBadRequestErrorResponseBodyFromJSON,
    DocumentsPostDocumentBadRequestErrorResponseBodyToJSON,
    DocumentsPostDocumentGatewayTimeoutErrorResponseBody,
    DocumentsPostDocumentGatewayTimeoutErrorResponseBodyFromJSON,
    DocumentsPostDocumentGatewayTimeoutErrorResponseBodyToJSON,
    DocumentsPostDocumentInternalServerErrorResponseBody,
    DocumentsPostDocumentInternalServerErrorResponseBodyFromJSON,
    DocumentsPostDocumentInternalServerErrorResponseBodyToJSON,
    DocumentsPostDocumentMethodNotAllowedErrorResponseBody,
    DocumentsPostDocumentMethodNotAllowedErrorResponseBodyFromJSON,
    DocumentsPostDocumentMethodNotAllowedErrorResponseBodyToJSON,
    DocumentsPostDocumentNotFoundErrorResponseBody,
    DocumentsPostDocumentNotFoundErrorResponseBodyFromJSON,
    DocumentsPostDocumentNotFoundErrorResponseBodyToJSON,
    DocumentsPostDocumentNotImplementedErrorResponseBody,
    DocumentsPostDocumentNotImplementedErrorResponseBodyFromJSON,
    DocumentsPostDocumentNotImplementedErrorResponseBodyToJSON,
    DocumentsPostDocumentRequestBody,
    DocumentsPostDocumentRequestBodyFromJSON,
    DocumentsPostDocumentRequestBodyToJSON,
    DocumentsPostDocumentResponseBody,
    DocumentsPostDocumentResponseBodyFromJSON,
    DocumentsPostDocumentResponseBodyToJSON,
    DocumentsPostDocumentServiceUnavailableErrorResponseBody,
    DocumentsPostDocumentServiceUnavailableErrorResponseBodyFromJSON,
    DocumentsPostDocumentServiceUnavailableErrorResponseBodyToJSON,
    DocumentsPostDocumentTooManyRequestsErrorResponseBody,
    DocumentsPostDocumentTooManyRequestsErrorResponseBodyFromJSON,
    DocumentsPostDocumentTooManyRequestsErrorResponseBodyToJSON,
    DocumentsPostDocumentUnauthorizedErrorResponseBody,
    DocumentsPostDocumentUnauthorizedErrorResponseBodyFromJSON,
    DocumentsPostDocumentUnauthorizedErrorResponseBodyToJSON,
    DriverEfficienciesResponse,
    DriverEfficienciesResponseFromJSON,
    DriverEfficienciesResponseToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateBadGatewayErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateBadGatewayErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateBadGatewayErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateBadRequestErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateBadRequestErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateBadRequestErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateGatewayTimeoutErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateGatewayTimeoutErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateGatewayTimeoutErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateInternalServerErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateInternalServerErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateInternalServerErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateMethodNotAllowedErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateMethodNotAllowedErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateMethodNotAllowedErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateNotFoundErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateNotFoundErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateNotFoundErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateNotImplementedErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateNotImplementedErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateNotImplementedErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateRequestBody,
    EngineImmobilizerUpdateEngineImmobilizerStateRequestBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateRequestBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateServiceUnavailableErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateServiceUnavailableErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateServiceUnavailableErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateTooManyRequestsErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateTooManyRequestsErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateTooManyRequestsErrorResponseBodyToJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateUnauthorizedErrorResponseBody,
    EngineImmobilizerUpdateEngineImmobilizerStateUnauthorizedErrorResponseBodyFromJSON,
    EngineImmobilizerUpdateEngineImmobilizerStateUnauthorizedErrorResponseBodyToJSON,
    EquipmentPatchEquipmentBadGatewayErrorResponseBody,
    EquipmentPatchEquipmentBadGatewayErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentBadGatewayErrorResponseBodyToJSON,
    EquipmentPatchEquipmentBadRequestErrorResponseBody,
    EquipmentPatchEquipmentBadRequestErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentBadRequestErrorResponseBodyToJSON,
    EquipmentPatchEquipmentGatewayTimeoutErrorResponseBody,
    EquipmentPatchEquipmentGatewayTimeoutErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentGatewayTimeoutErrorResponseBodyToJSON,
    EquipmentPatchEquipmentInternalServerErrorResponseBody,
    EquipmentPatchEquipmentInternalServerErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentInternalServerErrorResponseBodyToJSON,
    EquipmentPatchEquipmentMethodNotAllowedErrorResponseBody,
    EquipmentPatchEquipmentMethodNotAllowedErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentMethodNotAllowedErrorResponseBodyToJSON,
    EquipmentPatchEquipmentNotFoundErrorResponseBody,
    EquipmentPatchEquipmentNotFoundErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentNotFoundErrorResponseBodyToJSON,
    EquipmentPatchEquipmentNotImplementedErrorResponseBody,
    EquipmentPatchEquipmentNotImplementedErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentNotImplementedErrorResponseBodyToJSON,
    EquipmentPatchEquipmentRequestBody,
    EquipmentPatchEquipmentRequestBodyFromJSON,
    EquipmentPatchEquipmentRequestBodyToJSON,
    EquipmentPatchEquipmentResponseBody,
    EquipmentPatchEquipmentResponseBodyFromJSON,
    EquipmentPatchEquipmentResponseBodyToJSON,
    EquipmentPatchEquipmentServiceUnavailableErrorResponseBody,
    EquipmentPatchEquipmentServiceUnavailableErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentServiceUnavailableErrorResponseBodyToJSON,
    EquipmentPatchEquipmentTooManyRequestsErrorResponseBody,
    EquipmentPatchEquipmentTooManyRequestsErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentTooManyRequestsErrorResponseBodyToJSON,
    EquipmentPatchEquipmentUnauthorizedErrorResponseBody,
    EquipmentPatchEquipmentUnauthorizedErrorResponseBodyFromJSON,
    EquipmentPatchEquipmentUnauthorizedErrorResponseBodyToJSON,
    GatewaysDeleteGatewayBadGatewayErrorResponseBody,
    GatewaysDeleteGatewayBadGatewayErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayBadGatewayErrorResponseBodyToJSON,
    GatewaysDeleteGatewayBadRequestErrorResponseBody,
    GatewaysDeleteGatewayBadRequestErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayBadRequestErrorResponseBodyToJSON,
    GatewaysDeleteGatewayGatewayTimeoutErrorResponseBody,
    GatewaysDeleteGatewayGatewayTimeoutErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayGatewayTimeoutErrorResponseBodyToJSON,
    GatewaysDeleteGatewayInternalServerErrorResponseBody,
    GatewaysDeleteGatewayInternalServerErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayInternalServerErrorResponseBodyToJSON,
    GatewaysDeleteGatewayMethodNotAllowedErrorResponseBody,
    GatewaysDeleteGatewayMethodNotAllowedErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayMethodNotAllowedErrorResponseBodyToJSON,
    GatewaysDeleteGatewayNotFoundErrorResponseBody,
    GatewaysDeleteGatewayNotFoundErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayNotFoundErrorResponseBodyToJSON,
    GatewaysDeleteGatewayNotImplementedErrorResponseBody,
    GatewaysDeleteGatewayNotImplementedErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayNotImplementedErrorResponseBodyToJSON,
    GatewaysDeleteGatewayServiceUnavailableErrorResponseBody,
    GatewaysDeleteGatewayServiceUnavailableErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayServiceUnavailableErrorResponseBodyToJSON,
    GatewaysDeleteGatewayTooManyRequestsErrorResponseBody,
    GatewaysDeleteGatewayTooManyRequestsErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayTooManyRequestsErrorResponseBodyToJSON,
    GatewaysDeleteGatewayUnauthorizedErrorResponseBody,
    GatewaysDeleteGatewayUnauthorizedErrorResponseBodyFromJSON,
    GatewaysDeleteGatewayUnauthorizedErrorResponseBodyToJSON,
    GatewaysGetGatewaysBadGatewayErrorResponseBody,
    GatewaysGetGatewaysBadGatewayErrorResponseBodyFromJSON,
    GatewaysGetGatewaysBadGatewayErrorResponseBodyToJSON,
    GatewaysGetGatewaysBadRequestErrorResponseBody,
    GatewaysGetGatewaysBadRequestErrorResponseBodyFromJSON,
    GatewaysGetGatewaysBadRequestErrorResponseBodyToJSON,
    GatewaysGetGatewaysGatewayTimeoutErrorResponseBody,
    GatewaysGetGatewaysGatewayTimeoutErrorResponseBodyFromJSON,
    GatewaysGetGatewaysGatewayTimeoutErrorResponseBodyToJSON,
    GatewaysGetGatewaysInternalServerErrorResponseBody,
    GatewaysGetGatewaysInternalServerErrorResponseBodyFromJSON,
    GatewaysGetGatewaysInternalServerErrorResponseBodyToJSON,
    GatewaysGetGatewaysMethodNotAllowedErrorResponseBody,
    GatewaysGetGatewaysMethodNotAllowedErrorResponseBodyFromJSON,
    GatewaysGetGatewaysMethodNotAllowedErrorResponseBodyToJSON,
    GatewaysGetGatewaysNotFoundErrorResponseBody,
    GatewaysGetGatewaysNotFoundErrorResponseBodyFromJSON,
    GatewaysGetGatewaysNotFoundErrorResponseBodyToJSON,
    GatewaysGetGatewaysNotImplementedErrorResponseBody,
    GatewaysGetGatewaysNotImplementedErrorResponseBodyFromJSON,
    GatewaysGetGatewaysNotImplementedErrorResponseBodyToJSON,
    GatewaysGetGatewaysResponseBody,
    GatewaysGetGatewaysResponseBodyFromJSON,
    GatewaysGetGatewaysResponseBodyToJSON,
    GatewaysGetGatewaysServiceUnavailableErrorResponseBody,
    GatewaysGetGatewaysServiceUnavailableErrorResponseBodyFromJSON,
    GatewaysGetGatewaysServiceUnavailableErrorResponseBodyToJSON,
    GatewaysGetGatewaysTooManyRequestsErrorResponseBody,
    GatewaysGetGatewaysTooManyRequestsErrorResponseBodyFromJSON,
    GatewaysGetGatewaysTooManyRequestsErrorResponseBodyToJSON,
    GatewaysGetGatewaysUnauthorizedErrorResponseBody,
    GatewaysGetGatewaysUnauthorizedErrorResponseBodyFromJSON,
    GatewaysGetGatewaysUnauthorizedErrorResponseBodyToJSON,
    GatewaysPostGatewayBadGatewayErrorResponseBody,
    GatewaysPostGatewayBadGatewayErrorResponseBodyFromJSON,
    GatewaysPostGatewayBadGatewayErrorResponseBodyToJSON,
    GatewaysPostGatewayBadRequestErrorResponseBody,
    GatewaysPostGatewayBadRequestErrorResponseBodyFromJSON,
    GatewaysPostGatewayBadRequestErrorResponseBodyToJSON,
    GatewaysPostGatewayGatewayTimeoutErrorResponseBody,
    GatewaysPostGatewayGatewayTimeoutErrorResponseBodyFromJSON,
    GatewaysPostGatewayGatewayTimeoutErrorResponseBodyToJSON,
    GatewaysPostGatewayInternalServerErrorResponseBody,
    GatewaysPostGatewayInternalServerErrorResponseBodyFromJSON,
    GatewaysPostGatewayInternalServerErrorResponseBodyToJSON,
    GatewaysPostGatewayMethodNotAllowedErrorResponseBody,
    GatewaysPostGatewayMethodNotAllowedErrorResponseBodyFromJSON,
    GatewaysPostGatewayMethodNotAllowedErrorResponseBodyToJSON,
    GatewaysPostGatewayNotFoundErrorResponseBody,
    GatewaysPostGatewayNotFoundErrorResponseBodyFromJSON,
    GatewaysPostGatewayNotFoundErrorResponseBodyToJSON,
    GatewaysPostGatewayNotImplementedErrorResponseBody,
    GatewaysPostGatewayNotImplementedErrorResponseBodyFromJSON,
    GatewaysPostGatewayNotImplementedErrorResponseBodyToJSON,
    GatewaysPostGatewayRequestBody,
    GatewaysPostGatewayRequestBodyFromJSON,
    GatewaysPostGatewayRequestBodyToJSON,
    GatewaysPostGatewayResponseBody,
    GatewaysPostGatewayResponseBodyFromJSON,
    GatewaysPostGatewayResponseBodyToJSON,
    GatewaysPostGatewayServiceUnavailableErrorResponseBody,
    GatewaysPostGatewayServiceUnavailableErrorResponseBodyFromJSON,
    GatewaysPostGatewayServiceUnavailableErrorResponseBodyToJSON,
    GatewaysPostGatewayTooManyRequestsErrorResponseBody,
    GatewaysPostGatewayTooManyRequestsErrorResponseBodyFromJSON,
    GatewaysPostGatewayTooManyRequestsErrorResponseBodyToJSON,
    GatewaysPostGatewayUnauthorizedErrorResponseBody,
    GatewaysPostGatewayUnauthorizedErrorResponseBodyFromJSON,
    GatewaysPostGatewayUnauthorizedErrorResponseBodyToJSON,
    GetAttributesByEntityTypeResponse,
    GetAttributesByEntityTypeResponseFromJSON,
    GetAttributesByEntityTypeResponseToJSON,
    SettingsGetComplianceSettingsBadGatewayErrorResponseBody,
    SettingsGetComplianceSettingsBadGatewayErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsBadGatewayErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsBadRequestErrorResponseBody,
    SettingsGetComplianceSettingsBadRequestErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsBadRequestErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsGatewayTimeoutErrorResponseBody,
    SettingsGetComplianceSettingsGatewayTimeoutErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsGatewayTimeoutErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsInternalServerErrorResponseBody,
    SettingsGetComplianceSettingsInternalServerErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsInternalServerErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsMethodNotAllowedErrorResponseBody,
    SettingsGetComplianceSettingsMethodNotAllowedErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsMethodNotAllowedErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsNotFoundErrorResponseBody,
    SettingsGetComplianceSettingsNotFoundErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsNotFoundErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsNotImplementedErrorResponseBody,
    SettingsGetComplianceSettingsNotImplementedErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsNotImplementedErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsResponseBody,
    SettingsGetComplianceSettingsResponseBodyFromJSON,
    SettingsGetComplianceSettingsResponseBodyToJSON,
    SettingsGetComplianceSettingsServiceUnavailableErrorResponseBody,
    SettingsGetComplianceSettingsServiceUnavailableErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsServiceUnavailableErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsTooManyRequestsErrorResponseBody,
    SettingsGetComplianceSettingsTooManyRequestsErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsTooManyRequestsErrorResponseBodyToJSON,
    SettingsGetComplianceSettingsUnauthorizedErrorResponseBody,
    SettingsGetComplianceSettingsUnauthorizedErrorResponseBodyFromJSON,
    SettingsGetComplianceSettingsUnauthorizedErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsBadGatewayErrorResponseBody,
    SettingsGetDriverAppSettingsBadGatewayErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsBadGatewayErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsBadRequestErrorResponseBody,
    SettingsGetDriverAppSettingsBadRequestErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsBadRequestErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsGatewayTimeoutErrorResponseBody,
    SettingsGetDriverAppSettingsGatewayTimeoutErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsGatewayTimeoutErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsInternalServerErrorResponseBody,
    SettingsGetDriverAppSettingsInternalServerErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsInternalServerErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsMethodNotAllowedErrorResponseBody,
    SettingsGetDriverAppSettingsMethodNotAllowedErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsMethodNotAllowedErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsNotFoundErrorResponseBody,
    SettingsGetDriverAppSettingsNotFoundErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsNotFoundErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsNotImplementedErrorResponseBody,
    SettingsGetDriverAppSettingsNotImplementedErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsNotImplementedErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsResponseBody,
    SettingsGetDriverAppSettingsResponseBodyFromJSON,
    SettingsGetDriverAppSettingsResponseBodyToJSON,
    SettingsGetDriverAppSettingsServiceUnavailableErrorResponseBody,
    SettingsGetDriverAppSettingsServiceUnavailableErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsServiceUnavailableErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsTooManyRequestsErrorResponseBody,
    SettingsGetDriverAppSettingsTooManyRequestsErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsTooManyRequestsErrorResponseBodyToJSON,
    SettingsGetDriverAppSettingsUnauthorizedErrorResponseBody,
    SettingsGetDriverAppSettingsUnauthorizedErrorResponseBodyFromJSON,
    SettingsGetDriverAppSettingsUnauthorizedErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsBadGatewayErrorResponseBody,
    SettingsPatchComplianceSettingsBadGatewayErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsBadGatewayErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsBadRequestErrorResponseBody,
    SettingsPatchComplianceSettingsBadRequestErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsBadRequestErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsGatewayTimeoutErrorResponseBody,
    SettingsPatchComplianceSettingsGatewayTimeoutErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsGatewayTimeoutErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsInternalServerErrorResponseBody,
    SettingsPatchComplianceSettingsInternalServerErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsInternalServerErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsMethodNotAllowedErrorResponseBody,
    SettingsPatchComplianceSettingsMethodNotAllowedErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsMethodNotAllowedErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsNotFoundErrorResponseBody,
    SettingsPatchComplianceSettingsNotFoundErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsNotFoundErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsNotImplementedErrorResponseBody,
    SettingsPatchComplianceSettingsNotImplementedErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsNotImplementedErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsRequestBody,
    SettingsPatchComplianceSettingsRequestBodyFromJSON,
    SettingsPatchComplianceSettingsRequestBodyToJSON,
    SettingsPatchComplianceSettingsResponseBody,
    SettingsPatchComplianceSettingsResponseBodyFromJSON,
    SettingsPatchComplianceSettingsResponseBodyToJSON,
    SettingsPatchComplianceSettingsServiceUnavailableErrorResponseBody,
    SettingsPatchComplianceSettingsServiceUnavailableErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsServiceUnavailableErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsTooManyRequestsErrorResponseBody,
    SettingsPatchComplianceSettingsTooManyRequestsErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsTooManyRequestsErrorResponseBodyToJSON,
    SettingsPatchComplianceSettingsUnauthorizedErrorResponseBody,
    SettingsPatchComplianceSettingsUnauthorizedErrorResponseBodyFromJSON,
    SettingsPatchComplianceSettingsUnauthorizedErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsBadGatewayErrorResponseBody,
    SettingsPatchDriverAppSettingsBadGatewayErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsBadGatewayErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsBadRequestErrorResponseBody,
    SettingsPatchDriverAppSettingsBadRequestErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsBadRequestErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsGatewayTimeoutErrorResponseBody,
    SettingsPatchDriverAppSettingsGatewayTimeoutErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsGatewayTimeoutErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsInternalServerErrorResponseBody,
    SettingsPatchDriverAppSettingsInternalServerErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsInternalServerErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsMethodNotAllowedErrorResponseBody,
    SettingsPatchDriverAppSettingsMethodNotAllowedErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsMethodNotAllowedErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsNotFoundErrorResponseBody,
    SettingsPatchDriverAppSettingsNotFoundErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsNotFoundErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsNotImplementedErrorResponseBody,
    SettingsPatchDriverAppSettingsNotImplementedErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsNotImplementedErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsRequestBody,
    SettingsPatchDriverAppSettingsRequestBodyFromJSON,
    SettingsPatchDriverAppSettingsRequestBodyToJSON,
    SettingsPatchDriverAppSettingsResponseBody,
    SettingsPatchDriverAppSettingsResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsResponseBodyToJSON,
    SettingsPatchDriverAppSettingsServiceUnavailableErrorResponseBody,
    SettingsPatchDriverAppSettingsServiceUnavailableErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsServiceUnavailableErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsTooManyRequestsErrorResponseBody,
    SettingsPatchDriverAppSettingsTooManyRequestsErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsTooManyRequestsErrorResponseBodyToJSON,
    SettingsPatchDriverAppSettingsUnauthorizedErrorResponseBody,
    SettingsPatchDriverAppSettingsUnauthorizedErrorResponseBodyFromJSON,
    SettingsPatchDriverAppSettingsUnauthorizedErrorResponseBodyToJSON,
    StandardErrorResponse,
    StandardErrorResponseFromJSON,
    StandardErrorResponseToJSON,
    TrailerStatsGetTrailerStatsFeedBadGatewayErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedBadGatewayErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedBadGatewayErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedBadRequestErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedBadRequestErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedBadRequestErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedGatewayTimeoutErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedGatewayTimeoutErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedGatewayTimeoutErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedInternalServerErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedInternalServerErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedInternalServerErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedMethodNotAllowedErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedMethodNotAllowedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedMethodNotAllowedErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedNotFoundErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedNotFoundErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedNotFoundErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedNotImplementedErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedNotImplementedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedNotImplementedErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedResponseBody,
    TrailerStatsGetTrailerStatsFeedResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedServiceUnavailableErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedServiceUnavailableErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedServiceUnavailableErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedTooManyRequestsErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedTooManyRequestsErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedTooManyRequestsErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsFeedUnauthorizedErrorResponseBody,
    TrailerStatsGetTrailerStatsFeedUnauthorizedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsFeedUnauthorizedErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryBadGatewayErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryBadGatewayErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryBadGatewayErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryBadRequestErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryBadRequestErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryBadRequestErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryGatewayTimeoutErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryGatewayTimeoutErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryGatewayTimeoutErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryInternalServerErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryInternalServerErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryInternalServerErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryMethodNotAllowedErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryMethodNotAllowedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryMethodNotAllowedErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryNotFoundErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryNotFoundErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryNotFoundErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryNotImplementedErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryNotImplementedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryNotImplementedErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryResponseBody,
    TrailerStatsGetTrailerStatsHistoryResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryServiceUnavailableErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryServiceUnavailableErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryServiceUnavailableErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryTooManyRequestsErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryTooManyRequestsErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryTooManyRequestsErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsHistoryUnauthorizedErrorResponseBody,
    TrailerStatsGetTrailerStatsHistoryUnauthorizedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsHistoryUnauthorizedErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotBadGatewayErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotBadGatewayErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotBadGatewayErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotBadRequestErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotBadRequestErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotBadRequestErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotGatewayTimeoutErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotGatewayTimeoutErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotGatewayTimeoutErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotInternalServerErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotInternalServerErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotInternalServerErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotMethodNotAllowedErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotMethodNotAllowedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotMethodNotAllowedErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotNotFoundErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotNotFoundErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotNotFoundErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotNotImplementedErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotNotImplementedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotNotImplementedErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotResponseBody,
    TrailerStatsGetTrailerStatsSnapshotResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotServiceUnavailableErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotServiceUnavailableErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotServiceUnavailableErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotTooManyRequestsErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotTooManyRequestsErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotTooManyRequestsErrorResponseBodyToJSON,
    TrailerStatsGetTrailerStatsSnapshotUnauthorizedErrorResponseBody,
    TrailerStatsGetTrailerStatsSnapshotUnauthorizedErrorResponseBodyFromJSON,
    TrailerStatsGetTrailerStatsSnapshotUnauthorizedErrorResponseBodyToJSON,
    TrailersCreateTrailerBadGatewayErrorResponseBody,
    TrailersCreateTrailerBadGatewayErrorResponseBodyFromJSON,
    TrailersCreateTrailerBadGatewayErrorResponseBodyToJSON,
    TrailersCreateTrailerBadRequestErrorResponseBody,
    TrailersCreateTrailerBadRequestErrorResponseBodyFromJSON,
    TrailersCreateTrailerBadRequestErrorResponseBodyToJSON,
    TrailersCreateTrailerGatewayTimeoutErrorResponseBody,
    TrailersCreateTrailerGatewayTimeoutErrorResponseBodyFromJSON,
    TrailersCreateTrailerGatewayTimeoutErrorResponseBodyToJSON,
    TrailersCreateTrailerInternalServerErrorResponseBody,
    TrailersCreateTrailerInternalServerErrorResponseBodyFromJSON,
    TrailersCreateTrailerInternalServerErrorResponseBodyToJSON,
    TrailersCreateTrailerMethodNotAllowedErrorResponseBody,
    TrailersCreateTrailerMethodNotAllowedErrorResponseBodyFromJSON,
    TrailersCreateTrailerMethodNotAllowedErrorResponseBodyToJSON,
    TrailersCreateTrailerNotFoundErrorResponseBody,
    TrailersCreateTrailerNotFoundErrorResponseBodyFromJSON,
    TrailersCreateTrailerNotFoundErrorResponseBodyToJSON,
    TrailersCreateTrailerNotImplementedErrorResponseBody,
    TrailersCreateTrailerNotImplementedErrorResponseBodyFromJSON,
    TrailersCreateTrailerNotImplementedErrorResponseBodyToJSON,
    TrailersCreateTrailerRequestBody,
    TrailersCreateTrailerRequestBodyFromJSON,
    TrailersCreateTrailerRequestBodyToJSON,
    TrailersCreateTrailerResponseBody,
    TrailersCreateTrailerResponseBodyFromJSON,
    TrailersCreateTrailerResponseBodyToJSON,
    TrailersCreateTrailerServiceUnavailableErrorResponseBody,
    TrailersCreateTrailerServiceUnavailableErrorResponseBodyFromJSON,
    TrailersCreateTrailerServiceUnavailableErrorResponseBodyToJSON,
    TrailersCreateTrailerTooManyRequestsErrorResponseBody,
    TrailersCreateTrailerTooManyRequestsErrorResponseBodyFromJSON,
    TrailersCreateTrailerTooManyRequestsErrorResponseBodyToJSON,
    TrailersCreateTrailerUnauthorizedErrorResponseBody,
    TrailersCreateTrailerUnauthorizedErrorResponseBodyFromJSON,
    TrailersCreateTrailerUnauthorizedErrorResponseBodyToJSON,
    TrailersDeleteTrailerBadGatewayErrorResponseBody,
    TrailersDeleteTrailerBadGatewayErrorResponseBodyFromJSON,
    TrailersDeleteTrailerBadGatewayErrorResponseBodyToJSON,
    TrailersDeleteTrailerBadRequestErrorResponseBody,
    TrailersDeleteTrailerBadRequestErrorResponseBodyFromJSON,
    TrailersDeleteTrailerBadRequestErrorResponseBodyToJSON,
    TrailersDeleteTrailerGatewayTimeoutErrorResponseBody,
    TrailersDeleteTrailerGatewayTimeoutErrorResponseBodyFromJSON,
    TrailersDeleteTrailerGatewayTimeoutErrorResponseBodyToJSON,
    TrailersDeleteTrailerInternalServerErrorResponseBody,
    TrailersDeleteTrailerInternalServerErrorResponseBodyFromJSON,
    TrailersDeleteTrailerInternalServerErrorResponseBodyToJSON,
    TrailersDeleteTrailerMethodNotAllowedErrorResponseBody,
    TrailersDeleteTrailerMethodNotAllowedErrorResponseBodyFromJSON,
    TrailersDeleteTrailerMethodNotAllowedErrorResponseBodyToJSON,
    TrailersDeleteTrailerNotFoundErrorResponseBody,
    TrailersDeleteTrailerNotFoundErrorResponseBodyFromJSON,
    TrailersDeleteTrailerNotFoundErrorResponseBodyToJSON,
    TrailersDeleteTrailerNotImplementedErrorResponseBody,
    TrailersDeleteTrailerNotImplementedErrorResponseBodyFromJSON,
    TrailersDeleteTrailerNotImplementedErrorResponseBodyToJSON,
    TrailersDeleteTrailerServiceUnavailableErrorResponseBody,
    TrailersDeleteTrailerServiceUnavailableErrorResponseBodyFromJSON,
    TrailersDeleteTrailerServiceUnavailableErrorResponseBodyToJSON,
    TrailersDeleteTrailerTooManyRequestsErrorResponseBody,
    TrailersDeleteTrailerTooManyRequestsErrorResponseBodyFromJSON,
    TrailersDeleteTrailerTooManyRequestsErrorResponseBodyToJSON,
    TrailersDeleteTrailerUnauthorizedErrorResponseBody,
    TrailersDeleteTrailerUnauthorizedErrorResponseBodyFromJSON,
    TrailersDeleteTrailerUnauthorizedErrorResponseBodyToJSON,
    TrailersGetTrailerBadGatewayErrorResponseBody,
    TrailersGetTrailerBadGatewayErrorResponseBodyFromJSON,
    TrailersGetTrailerBadGatewayErrorResponseBodyToJSON,
    TrailersGetTrailerBadRequestErrorResponseBody,
    TrailersGetTrailerBadRequestErrorResponseBodyFromJSON,
    TrailersGetTrailerBadRequestErrorResponseBodyToJSON,
    TrailersGetTrailerGatewayTimeoutErrorResponseBody,
    TrailersGetTrailerGatewayTimeoutErrorResponseBodyFromJSON,
    TrailersGetTrailerGatewayTimeoutErrorResponseBodyToJSON,
    TrailersGetTrailerInternalServerErrorResponseBody,
    TrailersGetTrailerInternalServerErrorResponseBodyFromJSON,
    TrailersGetTrailerInternalServerErrorResponseBodyToJSON,
    TrailersGetTrailerMethodNotAllowedErrorResponseBody,
    TrailersGetTrailerMethodNotAllowedErrorResponseBodyFromJSON,
    TrailersGetTrailerMethodNotAllowedErrorResponseBodyToJSON,
    TrailersGetTrailerNotFoundErrorResponseBody,
    TrailersGetTrailerNotFoundErrorResponseBodyFromJSON,
    TrailersGetTrailerNotFoundErrorResponseBodyToJSON,
    TrailersGetTrailerNotImplementedErrorResponseBody,
    TrailersGetTrailerNotImplementedErrorResponseBodyFromJSON,
    TrailersGetTrailerNotImplementedErrorResponseBodyToJSON,
    TrailersGetTrailerResponseBody,
    TrailersGetTrailerResponseBodyFromJSON,
    TrailersGetTrailerResponseBodyToJSON,
    TrailersGetTrailerServiceUnavailableErrorResponseBody,
    TrailersGetTrailerServiceUnavailableErrorResponseBodyFromJSON,
    TrailersGetTrailerServiceUnavailableErrorResponseBodyToJSON,
    TrailersGetTrailerTooManyRequestsErrorResponseBody,
    TrailersGetTrailerTooManyRequestsErrorResponseBodyFromJSON,
    TrailersGetTrailerTooManyRequestsErrorResponseBodyToJSON,
    TrailersGetTrailerUnauthorizedErrorResponseBody,
    TrailersGetTrailerUnauthorizedErrorResponseBodyFromJSON,
    TrailersGetTrailerUnauthorizedErrorResponseBodyToJSON,
    TrailersListTrailersBadGatewayErrorResponseBody,
    TrailersListTrailersBadGatewayErrorResponseBodyFromJSON,
    TrailersListTrailersBadGatewayErrorResponseBodyToJSON,
    TrailersListTrailersBadRequestErrorResponseBody,
    TrailersListTrailersBadRequestErrorResponseBodyFromJSON,
    TrailersListTrailersBadRequestErrorResponseBodyToJSON,
    TrailersListTrailersGatewayTimeoutErrorResponseBody,
    TrailersListTrailersGatewayTimeoutErrorResponseBodyFromJSON,
    TrailersListTrailersGatewayTimeoutErrorResponseBodyToJSON,
    TrailersListTrailersInternalServerErrorResponseBody,
    TrailersListTrailersInternalServerErrorResponseBodyFromJSON,
    TrailersListTrailersInternalServerErrorResponseBodyToJSON,
    TrailersListTrailersMethodNotAllowedErrorResponseBody,
    TrailersListTrailersMethodNotAllowedErrorResponseBodyFromJSON,
    TrailersListTrailersMethodNotAllowedErrorResponseBodyToJSON,
    TrailersListTrailersNotFoundErrorResponseBody,
    TrailersListTrailersNotFoundErrorResponseBodyFromJSON,
    TrailersListTrailersNotFoundErrorResponseBodyToJSON,
    TrailersListTrailersNotImplementedErrorResponseBody,
    TrailersListTrailersNotImplementedErrorResponseBodyFromJSON,
    TrailersListTrailersNotImplementedErrorResponseBodyToJSON,
    TrailersListTrailersResponseBody,
    TrailersListTrailersResponseBodyFromJSON,
    TrailersListTrailersResponseBodyToJSON,
    TrailersListTrailersServiceUnavailableErrorResponseBody,
    TrailersListTrailersServiceUnavailableErrorResponseBodyFromJSON,
    TrailersListTrailersServiceUnavailableErrorResponseBodyToJSON,
    TrailersListTrailersTooManyRequestsErrorResponseBody,
    TrailersListTrailersTooManyRequestsErrorResponseBodyFromJSON,
    TrailersListTrailersTooManyRequestsErrorResponseBodyToJSON,
    TrailersListTrailersUnauthorizedErrorResponseBody,
    TrailersListTrailersUnauthorizedErrorResponseBodyFromJSON,
    TrailersListTrailersUnauthorizedErrorResponseBodyToJSON,
    TrailersUpdateTrailerBadGatewayErrorResponseBody,
    TrailersUpdateTrailerBadGatewayErrorResponseBodyFromJSON,
    TrailersUpdateTrailerBadGatewayErrorResponseBodyToJSON,
    TrailersUpdateTrailerBadRequestErrorResponseBody,
    TrailersUpdateTrailerBadRequestErrorResponseBodyFromJSON,
    TrailersUpdateTrailerBadRequestErrorResponseBodyToJSON,
    TrailersUpdateTrailerGatewayTimeoutErrorResponseBody,
    TrailersUpdateTrailerGatewayTimeoutErrorResponseBodyFromJSON,
    TrailersUpdateTrailerGatewayTimeoutErrorResponseBodyToJSON,
    TrailersUpdateTrailerInternalServerErrorResponseBody,
    TrailersUpdateTrailerInternalServerErrorResponseBodyFromJSON,
    TrailersUpdateTrailerInternalServerErrorResponseBodyToJSON,
    TrailersUpdateTrailerMethodNotAllowedErrorResponseBody,
    TrailersUpdateTrailerMethodNotAllowedErrorResponseBodyFromJSON,
    TrailersUpdateTrailerMethodNotAllowedErrorResponseBodyToJSON,
    TrailersUpdateTrailerNotFoundErrorResponseBody,
    TrailersUpdateTrailerNotFoundErrorResponseBodyFromJSON,
    TrailersUpdateTrailerNotFoundErrorResponseBodyToJSON,
    TrailersUpdateTrailerNotImplementedErrorResponseBody,
    TrailersUpdateTrailerNotImplementedErrorResponseBodyFromJSON,
    TrailersUpdateTrailerNotImplementedErrorResponseBodyToJSON,
    TrailersUpdateTrailerRequestBody,
    TrailersUpdateTrailerRequestBodyFromJSON,
    TrailersUpdateTrailerRequestBodyToJSON,
    TrailersUpdateTrailerResponseBody,
    TrailersUpdateTrailerResponseBodyFromJSON,
    TrailersUpdateTrailerResponseBodyToJSON,
    TrailersUpdateTrailerServiceUnavailableErrorResponseBody,
    TrailersUpdateTrailerServiceUnavailableErrorResponseBodyFromJSON,
    TrailersUpdateTrailerServiceUnavailableErrorResponseBodyToJSON,
    TrailersUpdateTrailerTooManyRequestsErrorResponseBody,
    TrailersUpdateTrailerTooManyRequestsErrorResponseBodyFromJSON,
    TrailersUpdateTrailerTooManyRequestsErrorResponseBodyToJSON,
    TrailersUpdateTrailerUnauthorizedErrorResponseBody,
    TrailersUpdateTrailerUnauthorizedErrorResponseBodyFromJSON,
    TrailersUpdateTrailerUnauthorizedErrorResponseBodyToJSON,
    UpdateAttributeRequest,
    UpdateAttributeRequestFromJSON,
    UpdateAttributeRequestToJSON,
} from '../models';

export interface CreateAttributeOperationRequest {
    attribute: CreateAttributeRequest;
}

export interface CreateTrailerRequest {
    createTrailerRequestBody: TrailersCreateTrailerRequestBody;
}

export interface DeleteAttributeRequest {
    id: string;
    entityType: DeleteAttributeEntityTypeEnum;
}

export interface DeleteDocumentRequest {
    id: string;
}

export interface DeleteGatewayRequest {
    id: string;
}

export interface DeleteTrailerRequest {
    id: string;
}

export interface GetAttributeRequest {
    id: string;
    entityType: GetAttributeEntityTypeEnum;
}

export interface GetAttributesByEntityTypeRequest {
    entityType: GetAttributesByEntityTypeEntityTypeEnum;
    limit?: number;
    after?: string;
}

export interface GetDocumentRequest {
    id: string;
}

export interface GetDocumentTypesRequest {
    after?: string;
}

export interface GetDocumentsRequest {
    startTime: string;
    endTime: string;
    after?: string;
    documentTypeId?: string;
    queryBy?: string;
}

export interface GetDriverEfficiencyRequest {
    driverActivationStatus?: GetDriverEfficiencyDriverActivationStatusEnum;
    driverIds?: Array<string>;
    after?: string;
    driverTagIds?: Array<string>;
    driverParentTagIds?: Array<string>;
    startTime?: Date;
    endTime?: Date;
}

export interface GetGatewaysRequest {
    models?: Array<string>;
    after?: string;
}

export interface GetTrailerRequest {
    id: string;
}

export interface GetTrailerStatsFeedRequest {
    types: string;
    tagIds?: string;
    parentTagIds?: string;
    after?: string;
    trailerIds?: string;
    decorations?: string;
}

export interface GetTrailerStatsHistoryRequest {
    startTime: string;
    endTime: string;
    types: string;
    tagIds?: string;
    parentTagIds?: string;
    after?: string;
    trailerIds?: string;
    decorations?: string;
}

export interface GetTrailerStatsSnapshotRequest {
    types: string;
    tagIds?: string;
    parentTagIds?: string;
    after?: string;
    trailerIds?: string;
    time?: string;
}

export interface ListTrailersRequest {
    tagIds?: string;
    parentTagIds?: string;
    limit?: number;
    after?: string;
}

export interface PatchComplianceSettingsRequest {
    patchComplianceSettingsRequestBody: SettingsPatchComplianceSettingsRequestBody;
}

export interface PatchDriverAppSettingsRequest {
    patchDriverAppSettingsRequestBody: SettingsPatchDriverAppSettingsRequestBody;
}

export interface PatchEquipmentRequest {
    id: string;
    patchEquipmentRequestBody: EquipmentPatchEquipmentRequestBody;
}

export interface PostDocumentRequest {
    postDocumentRequestBody: DocumentsPostDocumentRequestBody;
}

export interface PostGatewayRequest {
    postGatewayRequestBody: GatewaysPostGatewayRequestBody;
}

export interface UpdateAttributeOperationRequest {
    id: string;
    attribute: UpdateAttributeRequest;
}

export interface UpdateEngineImmobilizerStateRequest {
    id: number;
    updateEngineImmobilizerStateRequestBody: EngineImmobilizerUpdateEngineImmobilizerStateRequestBody;
}

export interface UpdateTrailerRequest {
    id: string;
    updateTrailerRequestBody: TrailersUpdateTrailerRequestBody;
}

/**
 * 
 */
export class BetaAPIsApi extends runtime.BaseAPI {

    /**
     * Creates a new attribute in the organization.
     * [beta] Create an attribute
     */
    async createAttributeRaw(requestParameters: CreateAttributeOperationRequest): Promise<runtime.ApiResponse<AttributeExpandedResponse>> {
        if (requestParameters.attribute === null || requestParameters.attribute === undefined) {
            throw new runtime.RequiredError('attribute','Required parameter requestParameters.attribute was null or undefined when calling createAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/attributes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateAttributeRequestToJSON(requestParameters.attribute),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeExpandedResponseFromJSON(jsonValue));
    }

    /**
     * Creates a new attribute in the organization.
     * [beta] Create an attribute
     */
    async createAttribute(requestParameters: CreateAttributeOperationRequest): Promise<AttributeExpandedResponse> {
        const response = await this.createAttributeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a new trailer asset.
     * [beta] Creates a new trailer asset
     */
    async createTrailerRaw(requestParameters: CreateTrailerRequest): Promise<runtime.ApiResponse<TrailersCreateTrailerResponseBody>> {
        if (requestParameters.createTrailerRequestBody === null || requestParameters.createTrailerRequestBody === undefined) {
            throw new runtime.RequiredError('createTrailerRequestBody','Required parameter requestParameters.createTrailerRequestBody was null or undefined when calling createTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/fleet/trailers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrailersCreateTrailerRequestBodyToJSON(requestParameters.createTrailerRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailersCreateTrailerResponseBodyFromJSON(jsonValue));
    }

    /**
     * Creates a new trailer asset.
     * [beta] Creates a new trailer asset
     */
    async createTrailer(requestParameters: CreateTrailerRequest): Promise<TrailersCreateTrailerResponseBody> {
        const response = await this.createTrailerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an attribute by id, including all of its applications.
     * [beta] Deleting an attribute
     */
    async deleteAttributeRaw(requestParameters: DeleteAttributeRequest): Promise<runtime.ApiResponse<string>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAttribute.');
        }

        if (requestParameters.entityType === null || requestParameters.entityType === undefined) {
            throw new runtime.RequiredError('entityType','Required parameter requestParameters.entityType was null or undefined when calling deleteAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.entityType !== undefined) {
            queryParameters['entityType'] = requestParameters.entityType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Delete an attribute by id, including all of its applications.
     * [beta] Deleting an attribute
     */
    async deleteAttribute(requestParameters: DeleteAttributeRequest): Promise<string> {
        const response = await this.deleteAttributeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Deletes a single document.
     * [beta] Delete document
     */
    async deleteDocumentRaw(requestParameters: DeleteDocumentRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a single document.
     * [beta] Delete document
     */
    async deleteDocument(requestParameters: DeleteDocumentRequest): Promise<void> {
        await this.deleteDocumentRaw(requestParameters);
    }

    /**
     * Deactivate a gateway
     * [beta] Deactivate a gateway
     */
    async deleteGatewayRaw(requestParameters: DeleteGatewayRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteGateway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/gateways/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deactivate a gateway
     * [beta] Deactivate a gateway
     */
    async deleteGateway(requestParameters: DeleteGatewayRequest): Promise<void> {
        await this.deleteGatewayRaw(requestParameters);
    }

    /**
     * Delete a trailer with the given ID.
     * [beta] Delete a trailer
     */
    async deleteTrailerRaw(requestParameters: DeleteTrailerRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/trailers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a trailer with the given ID.
     * [beta] Delete a trailer
     */
    async deleteTrailer(requestParameters: DeleteTrailerRequest): Promise<void> {
        await this.deleteTrailerRaw(requestParameters);
    }

    /**
     * Fetch an attribute by id, including all of its applications.
     * [beta] Retrieve an attribute
     */
    async getAttributeRaw(requestParameters: GetAttributeRequest): Promise<runtime.ApiResponse<AttributeExpandedResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAttribute.');
        }

        if (requestParameters.entityType === null || requestParameters.entityType === undefined) {
            throw new runtime.RequiredError('entityType','Required parameter requestParameters.entityType was null or undefined when calling getAttribute.');
        }

        const queryParameters: any = {};

        if (requestParameters.entityType !== undefined) {
            queryParameters['entityType'] = requestParameters.entityType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeExpandedResponseFromJSON(jsonValue));
    }

    /**
     * Fetch an attribute by id, including all of its applications.
     * [beta] Retrieve an attribute
     */
    async getAttribute(requestParameters: GetAttributeRequest): Promise<AttributeExpandedResponse> {
        const response = await this.getAttributeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Fetch all attributes in an organization associated with either drivers or assets.
     * [beta] List all attributes by entity type
     */
    async getAttributesByEntityTypeRaw(requestParameters: GetAttributesByEntityTypeRequest): Promise<runtime.ApiResponse<GetAttributesByEntityTypeResponse>> {
        if (requestParameters.entityType === null || requestParameters.entityType === undefined) {
            throw new runtime.RequiredError('entityType','Required parameter requestParameters.entityType was null or undefined when calling getAttributesByEntityType.');
        }

        const queryParameters: any = {};

        if (requestParameters.entityType !== undefined) {
            queryParameters['entityType'] = requestParameters.entityType;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/attributes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GetAttributesByEntityTypeResponseFromJSON(jsonValue));
    }

    /**
     * Fetch all attributes in an organization associated with either drivers or assets.
     * [beta] List all attributes by entity type
     */
    async getAttributesByEntityType(requestParameters: GetAttributesByEntityTypeRequest): Promise<GetAttributesByEntityTypeResponse> {
        const response = await this.getAttributesByEntityTypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get organization\'s compliance settings, including carrier name, office address, and DOT number
     * [beta] Get compliance settings
     */
    async getComplianceSettingsRaw(): Promise<runtime.ApiResponse<SettingsGetComplianceSettingsResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/settings/compliance`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsGetComplianceSettingsResponseBodyFromJSON(jsonValue));
    }

    /**
     * Get organization\'s compliance settings, including carrier name, office address, and DOT number
     * [beta] Get compliance settings
     */
    async getComplianceSettings(): Promise<SettingsGetComplianceSettingsResponseBody> {
        const response = await this.getComplianceSettingsRaw();
        return await response.value();
    }

    /**
     * Returns a single document.
     * [beta] Fetch document
     */
    async getDocumentRaw(requestParameters: GetDocumentRequest): Promise<runtime.ApiResponse<DocumentsGetDocumentResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsGetDocumentResponseBodyFromJSON(jsonValue));
    }

    /**
     * Returns a single document.
     * [beta] Fetch document
     */
    async getDocument(requestParameters: GetDocumentRequest): Promise<DocumentsGetDocumentResponseBody> {
        const response = await this.getDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns a list of the organization document types.
     * [beta] Fetch document types
     */
    async getDocumentTypesRaw(requestParameters: GetDocumentTypesRequest): Promise<runtime.ApiResponse<DocumentTypesGetDocumentTypesResponseBody>> {
        const queryParameters: any = {};

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/document-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentTypesGetDocumentTypesResponseBodyFromJSON(jsonValue));
    }

    /**
     * Returns a list of the organization document types.
     * [beta] Fetch document types
     */
    async getDocumentTypes(requestParameters: GetDocumentTypesRequest): Promise<DocumentTypesGetDocumentTypesResponseBody> {
        const response = await this.getDocumentTypesRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get all documents for the given time range.
     * [beta] Fetch all documents
     */
    async getDocumentsRaw(requestParameters: GetDocumentsRequest): Promise<runtime.ApiResponse<DocumentsGetDocumentsResponseBody>> {
        if (requestParameters.startTime === null || requestParameters.startTime === undefined) {
            throw new runtime.RequiredError('startTime','Required parameter requestParameters.startTime was null or undefined when calling getDocuments.');
        }

        if (requestParameters.endTime === null || requestParameters.endTime === undefined) {
            throw new runtime.RequiredError('endTime','Required parameter requestParameters.endTime was null or undefined when calling getDocuments.');
        }

        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.documentTypeId !== undefined) {
            queryParameters['documentTypeId'] = requestParameters.documentTypeId;
        }

        if (requestParameters.queryBy !== undefined) {
            queryParameters['queryBy'] = requestParameters.queryBy;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsGetDocumentsResponseBodyFromJSON(jsonValue));
    }

    /**
     * Get all documents for the given time range.
     * [beta] Fetch all documents
     */
    async getDocuments(requestParameters: GetDocumentsRequest): Promise<DocumentsGetDocumentsResponseBody> {
        const response = await this.getDocumentsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get driver app settings.
     * [beta] Get driver app settings
     */
    async getDriverAppSettingsRaw(): Promise<runtime.ApiResponse<SettingsGetDriverAppSettingsResponseBody>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/settings/driver-app`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsGetDriverAppSettingsResponseBodyFromJSON(jsonValue));
    }

    /**
     * Get driver app settings.
     * [beta] Get driver app settings
     */
    async getDriverAppSettings(): Promise<SettingsGetDriverAppSettingsResponseBody> {
        const response = await this.getDriverAppSettingsRaw();
        return await response.value();
    }

    /**
     * Get all drivers\' efficiencies.
     * [beta] List driver efficiency
     */
    async getDriverEfficiencyRaw(requestParameters: GetDriverEfficiencyRequest): Promise<runtime.ApiResponse<DriverEfficienciesResponse>> {
        const queryParameters: any = {};

        if (requestParameters.driverActivationStatus !== undefined) {
            queryParameters['driverActivationStatus'] = requestParameters.driverActivationStatus;
        }

        if (requestParameters.driverIds) {
            queryParameters['driverIds'] = requestParameters.driverIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.driverTagIds) {
            queryParameters['driverTagIds'] = requestParameters.driverTagIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.driverParentTagIds) {
            queryParameters['driverParentTagIds'] = requestParameters.driverParentTagIds.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = (requestParameters.startTime as any).toISOString();
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = (requestParameters.endTime as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/drivers/efficiency`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DriverEfficienciesResponseFromJSON(jsonValue));
    }

    /**
     * Get all drivers\' efficiencies.
     * [beta] List driver efficiency
     */
    async getDriverEfficiency(requestParameters: GetDriverEfficiencyRequest): Promise<DriverEfficienciesResponse> {
        const response = await this.getDriverEfficiencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all gateways
     * [beta] List all gateways
     */
    async getGatewaysRaw(requestParameters: GetGatewaysRequest): Promise<runtime.ApiResponse<GatewaysGetGatewaysResponseBody>> {
        const queryParameters: any = {};

        if (requestParameters.models) {
            queryParameters['models'] = requestParameters.models.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/gateways`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewaysGetGatewaysResponseBodyFromJSON(jsonValue));
    }

    /**
     * List all gateways
     * [beta] List all gateways
     */
    async getGateways(requestParameters: GetGatewaysRequest): Promise<GatewaysGetGatewaysResponseBody> {
        const response = await this.getGatewaysRaw(requestParameters);
        return await response.value();
    }

    /**
     * Retrieve a trailer with given ID.
     * [beta] Retrieve a trailer
     */
    async getTrailerRaw(requestParameters: GetTrailerRequest): Promise<runtime.ApiResponse<TrailersGetTrailerResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/trailers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailersGetTrailerResponseBodyFromJSON(jsonValue));
    }

    /**
     * Retrieve a trailer with given ID.
     * [beta] Retrieve a trailer
     */
    async getTrailer(requestParameters: GetTrailerRequest): Promise<TrailersGetTrailerResponseBody> {
        const response = await this.getTrailerRaw(requestParameters);
        return await response.value();
    }

    /**
     * Follow a feed of trailer stats.  The first call to this endpoint will provide the most recent stats for each trailer and an `endCursor`.  Providing the `endCursor` value to the `after` query parameter will fetch all updates since the previous API call.  If `hasNextPage` is false, no new data is immediately available. Please wait a minimum of 5 seconds before making a subsequent request.
     * [beta] Get trailer stats feed
     */
    async getTrailerStatsFeedRaw(requestParameters: GetTrailerStatsFeedRequest): Promise<runtime.ApiResponse<TrailerStatsGetTrailerStatsFeedResponseBody>> {
        if (requestParameters.types === null || requestParameters.types === undefined) {
            throw new runtime.RequiredError('types','Required parameter requestParameters.types was null or undefined when calling getTrailerStatsFeed.');
        }

        const queryParameters: any = {};

        if (requestParameters.types !== undefined) {
            queryParameters['types'] = requestParameters.types;
        }

        if (requestParameters.tagIds !== undefined) {
            queryParameters['tagIds'] = requestParameters.tagIds;
        }

        if (requestParameters.parentTagIds !== undefined) {
            queryParameters['parentTagIds'] = requestParameters.parentTagIds;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.trailerIds !== undefined) {
            queryParameters['trailerIds'] = requestParameters.trailerIds;
        }

        if (requestParameters.decorations !== undefined) {
            queryParameters['decorations'] = requestParameters.decorations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/trailers/stats/feed`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailerStatsGetTrailerStatsFeedResponseBodyFromJSON(jsonValue));
    }

    /**
     * Follow a feed of trailer stats.  The first call to this endpoint will provide the most recent stats for each trailer and an `endCursor`.  Providing the `endCursor` value to the `after` query parameter will fetch all updates since the previous API call.  If `hasNextPage` is false, no new data is immediately available. Please wait a minimum of 5 seconds before making a subsequent request.
     * [beta] Get trailer stats feed
     */
    async getTrailerStatsFeed(requestParameters: GetTrailerStatsFeedRequest): Promise<TrailerStatsGetTrailerStatsFeedResponseBody> {
        const response = await this.getTrailerStatsFeedRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns trailer stats during the given time range for all trailers. This can be optionally filtered by tags or specific trailer IDs.
     * [beta] Get trailer stats history
     */
    async getTrailerStatsHistoryRaw(requestParameters: GetTrailerStatsHistoryRequest): Promise<runtime.ApiResponse<TrailerStatsGetTrailerStatsHistoryResponseBody>> {
        if (requestParameters.startTime === null || requestParameters.startTime === undefined) {
            throw new runtime.RequiredError('startTime','Required parameter requestParameters.startTime was null or undefined when calling getTrailerStatsHistory.');
        }

        if (requestParameters.endTime === null || requestParameters.endTime === undefined) {
            throw new runtime.RequiredError('endTime','Required parameter requestParameters.endTime was null or undefined when calling getTrailerStatsHistory.');
        }

        if (requestParameters.types === null || requestParameters.types === undefined) {
            throw new runtime.RequiredError('types','Required parameter requestParameters.types was null or undefined when calling getTrailerStatsHistory.');
        }

        const queryParameters: any = {};

        if (requestParameters.startTime !== undefined) {
            queryParameters['startTime'] = requestParameters.startTime;
        }

        if (requestParameters.endTime !== undefined) {
            queryParameters['endTime'] = requestParameters.endTime;
        }

        if (requestParameters.types !== undefined) {
            queryParameters['types'] = requestParameters.types;
        }

        if (requestParameters.tagIds !== undefined) {
            queryParameters['tagIds'] = requestParameters.tagIds;
        }

        if (requestParameters.parentTagIds !== undefined) {
            queryParameters['parentTagIds'] = requestParameters.parentTagIds;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.trailerIds !== undefined) {
            queryParameters['trailerIds'] = requestParameters.trailerIds;
        }

        if (requestParameters.decorations !== undefined) {
            queryParameters['decorations'] = requestParameters.decorations;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/trailers/stats/history`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailerStatsGetTrailerStatsHistoryResponseBodyFromJSON(jsonValue));
    }

    /**
     * Returns trailer stats during the given time range for all trailers. This can be optionally filtered by tags or specific trailer IDs.
     * [beta] Get trailer stats history
     */
    async getTrailerStatsHistory(requestParameters: GetTrailerStatsHistoryRequest): Promise<TrailerStatsGetTrailerStatsHistoryResponseBody> {
        const response = await this.getTrailerStatsHistoryRaw(requestParameters);
        return await response.value();
    }

    /**
     * Returns the last known stats of all trailers at the given `time`. If no `time` is specified, the current time is used.
     * [beta] Get trailer stats
     */
    async getTrailerStatsSnapshotRaw(requestParameters: GetTrailerStatsSnapshotRequest): Promise<runtime.ApiResponse<TrailerStatsGetTrailerStatsSnapshotResponseBody>> {
        if (requestParameters.types === null || requestParameters.types === undefined) {
            throw new runtime.RequiredError('types','Required parameter requestParameters.types was null or undefined when calling getTrailerStatsSnapshot.');
        }

        const queryParameters: any = {};

        if (requestParameters.types !== undefined) {
            queryParameters['types'] = requestParameters.types;
        }

        if (requestParameters.tagIds !== undefined) {
            queryParameters['tagIds'] = requestParameters.tagIds;
        }

        if (requestParameters.parentTagIds !== undefined) {
            queryParameters['parentTagIds'] = requestParameters.parentTagIds;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        if (requestParameters.trailerIds !== undefined) {
            queryParameters['trailerIds'] = requestParameters.trailerIds;
        }

        if (requestParameters.time !== undefined) {
            queryParameters['time'] = requestParameters.time;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/trailers/stats`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailerStatsGetTrailerStatsSnapshotResponseBodyFromJSON(jsonValue));
    }

    /**
     * Returns the last known stats of all trailers at the given `time`. If no `time` is specified, the current time is used.
     * [beta] Get trailer stats
     */
    async getTrailerStatsSnapshot(requestParameters: GetTrailerStatsSnapshotRequest): Promise<TrailerStatsGetTrailerStatsSnapshotResponseBody> {
        const response = await this.getTrailerStatsSnapshotRaw(requestParameters);
        return await response.value();
    }

    /**
     * List all trailers.
     * [beta] List all trailers
     */
    async listTrailersRaw(requestParameters: ListTrailersRequest): Promise<runtime.ApiResponse<TrailersListTrailersResponseBody>> {
        const queryParameters: any = {};

        if (requestParameters.tagIds !== undefined) {
            queryParameters['tagIds'] = requestParameters.tagIds;
        }

        if (requestParameters.parentTagIds !== undefined) {
            queryParameters['parentTagIds'] = requestParameters.parentTagIds;
        }

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.after !== undefined) {
            queryParameters['after'] = requestParameters.after;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/beta/fleet/trailers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailersListTrailersResponseBodyFromJSON(jsonValue));
    }

    /**
     * List all trailers.
     * [beta] List all trailers
     */
    async listTrailers(requestParameters: ListTrailersRequest): Promise<TrailersListTrailersResponseBody> {
        const response = await this.listTrailersRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update organization\'s compliance settings, including carrier name, office address, and DOT number
     * [beta] Update compliance settings
     */
    async patchComplianceSettingsRaw(requestParameters: PatchComplianceSettingsRequest): Promise<runtime.ApiResponse<SettingsPatchComplianceSettingsResponseBody>> {
        if (requestParameters.patchComplianceSettingsRequestBody === null || requestParameters.patchComplianceSettingsRequestBody === undefined) {
            throw new runtime.RequiredError('patchComplianceSettingsRequestBody','Required parameter requestParameters.patchComplianceSettingsRequestBody was null or undefined when calling patchComplianceSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/fleet/settings/compliance`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsPatchComplianceSettingsRequestBodyToJSON(requestParameters.patchComplianceSettingsRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsPatchComplianceSettingsResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update organization\'s compliance settings, including carrier name, office address, and DOT number
     * [beta] Update compliance settings
     */
    async patchComplianceSettings(requestParameters: PatchComplianceSettingsRequest): Promise<SettingsPatchComplianceSettingsResponseBody> {
        const response = await this.patchComplianceSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update driver app settings.
     * [beta] Update driver app settings
     */
    async patchDriverAppSettingsRaw(requestParameters: PatchDriverAppSettingsRequest): Promise<runtime.ApiResponse<SettingsPatchDriverAppSettingsResponseBody>> {
        if (requestParameters.patchDriverAppSettingsRequestBody === null || requestParameters.patchDriverAppSettingsRequestBody === undefined) {
            throw new runtime.RequiredError('patchDriverAppSettingsRequestBody','Required parameter requestParameters.patchDriverAppSettingsRequestBody was null or undefined when calling patchDriverAppSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/fleet/settings/driver-app`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsPatchDriverAppSettingsRequestBodyToJSON(requestParameters.patchDriverAppSettingsRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsPatchDriverAppSettingsResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update driver app settings.
     * [beta] Update driver app settings
     */
    async patchDriverAppSettings(requestParameters: PatchDriverAppSettingsRequest): Promise<SettingsPatchDriverAppSettingsResponseBody> {
        const response = await this.patchDriverAppSettingsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update an equipment.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
     * [beta] Update an equipment
     */
    async patchEquipmentRaw(requestParameters: PatchEquipmentRequest): Promise<runtime.ApiResponse<EquipmentPatchEquipmentResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling patchEquipment.');
        }

        if (requestParameters.patchEquipmentRequestBody === null || requestParameters.patchEquipmentRequestBody === undefined) {
            throw new runtime.RequiredError('patchEquipmentRequestBody','Required parameter requestParameters.patchEquipmentRequestBody was null or undefined when calling patchEquipment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/fleet/equipment/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EquipmentPatchEquipmentRequestBodyToJSON(requestParameters.patchEquipmentRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EquipmentPatchEquipmentResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update an equipment.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
     * [beta] Update an equipment
     */
    async patchEquipment(requestParameters: PatchEquipmentRequest): Promise<EquipmentPatchEquipmentResponseBody> {
        const response = await this.patchEquipmentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Creates a single document.
     * [beta] Create document
     */
    async postDocumentRaw(requestParameters: PostDocumentRequest): Promise<runtime.ApiResponse<DocumentsPostDocumentResponseBody>> {
        if (requestParameters.postDocumentRequestBody === null || requestParameters.postDocumentRequestBody === undefined) {
            throw new runtime.RequiredError('postDocumentRequestBody','Required parameter requestParameters.postDocumentRequestBody was null or undefined when calling postDocument.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/fleet/documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentsPostDocumentRequestBodyToJSON(requestParameters.postDocumentRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentsPostDocumentResponseBodyFromJSON(jsonValue));
    }

    /**
     * Creates a single document.
     * [beta] Create document
     */
    async postDocument(requestParameters: PostDocumentRequest): Promise<DocumentsPostDocumentResponseBody> {
        const response = await this.postDocumentRaw(requestParameters);
        return await response.value();
    }

    /**
     * Activate a new gateway. To activate a device and associate it with your organization, enter its serial number. Each device\'s serial number can also be found on its label or packaging, or from your order confirmation email. A Not Found error could mean that the serial was not found or it has already been activated
     * [beta] Activate a new gateway
     */
    async postGatewayRaw(requestParameters: PostGatewayRequest): Promise<runtime.ApiResponse<GatewaysPostGatewayResponseBody>> {
        if (requestParameters.postGatewayRequestBody === null || requestParameters.postGatewayRequestBody === undefined) {
            throw new runtime.RequiredError('postGatewayRequestBody','Required parameter requestParameters.postGatewayRequestBody was null or undefined when calling postGateway.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/gateways`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GatewaysPostGatewayRequestBodyToJSON(requestParameters.postGatewayRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => GatewaysPostGatewayResponseBodyFromJSON(jsonValue));
    }

    /**
     * Activate a new gateway. To activate a device and associate it with your organization, enter its serial number. Each device\'s serial number can also be found on its label or packaging, or from your order confirmation email. A Not Found error could mean that the serial was not found or it has already been activated
     * [beta] Activate a new gateway
     */
    async postGateway(requestParameters: PostGatewayRequest): Promise<GatewaysPostGatewayResponseBody> {
        const response = await this.postGatewayRaw(requestParameters);
        return await response.value();
    }

    /**
     * Updates an attribute in the organization.
     * [beta] Update an attribute
     */
    async updateAttributeRaw(requestParameters: UpdateAttributeOperationRequest): Promise<runtime.ApiResponse<AttributeExpandedResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAttribute.');
        }

        if (requestParameters.attribute === null || requestParameters.attribute === undefined) {
            throw new runtime.RequiredError('attribute','Required parameter requestParameters.attribute was null or undefined when calling updateAttribute.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/attributes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateAttributeRequestToJSON(requestParameters.attribute),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AttributeExpandedResponseFromJSON(jsonValue));
    }

    /**
     * Updates an attribute in the organization.
     * [beta] Update an attribute
     */
    async updateAttribute(requestParameters: UpdateAttributeOperationRequest): Promise<AttributeExpandedResponse> {
        const response = await this.updateAttributeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update the engine immobilizer state of a vehicle. This requires an engine immobilizer to be installed on the vehicle gateway. The desired engine immobilizer state will be set on the vehicle when the vehicle gateway is online, and the engine is not running.
     * [beta] Update engine immobilizer state of a vehicle.
     */
    async updateEngineImmobilizerStateRaw(requestParameters: UpdateEngineImmobilizerStateRequest): Promise<runtime.ApiResponse<EngineImmobilizerUpdateEngineImmobilizerStateResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEngineImmobilizerState.');
        }

        if (requestParameters.updateEngineImmobilizerStateRequestBody === null || requestParameters.updateEngineImmobilizerStateRequestBody === undefined) {
            throw new runtime.RequiredError('updateEngineImmobilizerStateRequestBody','Required parameter requestParameters.updateEngineImmobilizerStateRequestBody was null or undefined when calling updateEngineImmobilizerState.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/fleet/vehicles/{id}/immobilizer`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EngineImmobilizerUpdateEngineImmobilizerStateRequestBodyToJSON(requestParameters.updateEngineImmobilizerStateRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EngineImmobilizerUpdateEngineImmobilizerStateResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update the engine immobilizer state of a vehicle. This requires an engine immobilizer to be installed on the vehicle gateway. The desired engine immobilizer state will be set on the vehicle when the vehicle gateway is online, and the engine is not running.
     * [beta] Update engine immobilizer state of a vehicle.
     */
    async updateEngineImmobilizerState(requestParameters: UpdateEngineImmobilizerStateRequest): Promise<EngineImmobilizerUpdateEngineImmobilizerStateResponseBody> {
        const response = await this.updateEngineImmobilizerStateRaw(requestParameters);
        return await response.value();
    }

    /**
     * Update a trailer.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
     * [beta] Update a trailer
     */
    async updateTrailerRaw(requestParameters: UpdateTrailerRequest): Promise<runtime.ApiResponse<TrailersUpdateTrailerResponseBody>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTrailer.');
        }

        if (requestParameters.updateTrailerRequestBody === null || requestParameters.updateTrailerRequestBody === undefined) {
            throw new runtime.RequiredError('updateTrailerRequestBody','Required parameter requestParameters.updateTrailerRequestBody was null or undefined when calling updateTrailer.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/beta/fleet/trailers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TrailersUpdateTrailerRequestBodyToJSON(requestParameters.updateTrailerRequestBody),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TrailersUpdateTrailerResponseBodyFromJSON(jsonValue));
    }

    /**
     * Update a trailer.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
     * [beta] Update a trailer
     */
    async updateTrailer(requestParameters: UpdateTrailerRequest): Promise<TrailersUpdateTrailerResponseBody> {
        const response = await this.updateTrailerRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum DeleteAttributeEntityTypeEnum {
    Driver = 'driver',
    Asset = 'asset'
}
/**
    * @export
    * @enum {string}
    */
export enum GetAttributeEntityTypeEnum {
    Driver = 'driver',
    Asset = 'asset'
}
/**
    * @export
    * @enum {string}
    */
export enum GetAttributesByEntityTypeEntityTypeEnum {
    Driver = 'driver',
    Asset = 'asset'
}
/**
    * @export
    * @enum {string}
    */
export enum GetDriverEfficiencyDriverActivationStatusEnum {
    Active = 'active',
    Deactivated = 'deactivated'
}
