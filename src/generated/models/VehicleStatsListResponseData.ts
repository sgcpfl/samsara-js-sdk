/* tslint:disable */
/* eslint-disable */
/**
 * Samsara API
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara\'s new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what\'s changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can\'t find an API that you\'re looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you\'re familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, please visit https://samsara.com/help.  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ### OAuth2 If building an application for our marketplace, our API is accessible via. OAuth2 as well.  | Type  | Value | | ------------- |:-------------:| | Security scheme      | OAuth2                                   | | OAuth2 Flow          | accessCode                               | | Authorization URL    | https://api.samsara.com/oauth2/authorize | | Token URL            | https://api.samsara.com/oauth2/token     |    ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures). 
 *
 * The version of the OpenAPI document: 2021-06-09
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    VehicleStatsAmbientAirTempMilliCWithDecoration,
    VehicleStatsAmbientAirTempMilliCWithDecorationFromJSON,
    VehicleStatsAmbientAirTempMilliCWithDecorationFromJSONTyped,
    VehicleStatsAmbientAirTempMilliCWithDecorationToJSON,
    VehicleStatsAuxInputWithDecoration,
    VehicleStatsAuxInputWithDecorationFromJSON,
    VehicleStatsAuxInputWithDecorationFromJSONTyped,
    VehicleStatsAuxInputWithDecorationToJSON,
    VehicleStatsBarometricPressurePaWithDecoration,
    VehicleStatsBarometricPressurePaWithDecorationFromJSON,
    VehicleStatsBarometricPressurePaWithDecorationFromJSONTyped,
    VehicleStatsBarometricPressurePaWithDecorationToJSON,
    VehicleStatsBatteryVoltageWithDecoration,
    VehicleStatsBatteryVoltageWithDecorationFromJSON,
    VehicleStatsBatteryVoltageWithDecorationFromJSONTyped,
    VehicleStatsBatteryVoltageWithDecorationToJSON,
    VehicleStatsDefLevelMilliPercentWithDecoration,
    VehicleStatsDefLevelMilliPercentWithDecorationFromJSON,
    VehicleStatsDefLevelMilliPercentWithDecorationFromJSONTyped,
    VehicleStatsDefLevelMilliPercentWithDecorationToJSON,
    VehicleStatsEcuSpeedMphWithDecoration,
    VehicleStatsEcuSpeedMphWithDecorationFromJSON,
    VehicleStatsEcuSpeedMphWithDecorationFromJSONTyped,
    VehicleStatsEcuSpeedMphWithDecorationToJSON,
    VehicleStatsEngineCoolantTempMilliCWithDecoration,
    VehicleStatsEngineCoolantTempMilliCWithDecorationFromJSON,
    VehicleStatsEngineCoolantTempMilliCWithDecorationFromJSONTyped,
    VehicleStatsEngineCoolantTempMilliCWithDecorationToJSON,
    VehicleStatsEngineImmobilizerWithDecoration,
    VehicleStatsEngineImmobilizerWithDecorationFromJSON,
    VehicleStatsEngineImmobilizerWithDecorationFromJSONTyped,
    VehicleStatsEngineImmobilizerWithDecorationToJSON,
    VehicleStatsEngineLoadPercentWithDecoration,
    VehicleStatsEngineLoadPercentWithDecorationFromJSON,
    VehicleStatsEngineLoadPercentWithDecorationFromJSONTyped,
    VehicleStatsEngineLoadPercentWithDecorationToJSON,
    VehicleStatsEngineOilPressureKPaWithDecoration,
    VehicleStatsEngineOilPressureKPaWithDecorationFromJSON,
    VehicleStatsEngineOilPressureKPaWithDecorationFromJSONTyped,
    VehicleStatsEngineOilPressureKPaWithDecorationToJSON,
    VehicleStatsEngineRpmWithDecoration,
    VehicleStatsEngineRpmWithDecorationFromJSON,
    VehicleStatsEngineRpmWithDecorationFromJSONTyped,
    VehicleStatsEngineRpmWithDecorationToJSON,
    VehicleStatsEngineStateWithDecoration,
    VehicleStatsEngineStateWithDecorationFromJSON,
    VehicleStatsEngineStateWithDecorationFromJSONTyped,
    VehicleStatsEngineStateWithDecorationToJSON,
    VehicleStatsFaultCodesWithDecoration,
    VehicleStatsFaultCodesWithDecorationFromJSON,
    VehicleStatsFaultCodesWithDecorationFromJSONTyped,
    VehicleStatsFaultCodesWithDecorationToJSON,
    VehicleStatsFuelPercentWithDecoration,
    VehicleStatsFuelPercentWithDecorationFromJSON,
    VehicleStatsFuelPercentWithDecorationFromJSONTyped,
    VehicleStatsFuelPercentWithDecorationToJSON,
    VehicleStatsGpsDistanceMetersWithDecoration,
    VehicleStatsGpsDistanceMetersWithDecorationFromJSON,
    VehicleStatsGpsDistanceMetersWithDecorationFromJSONTyped,
    VehicleStatsGpsDistanceMetersWithDecorationToJSON,
    VehicleStatsGpsOdometerMetersWithDecoration,
    VehicleStatsGpsOdometerMetersWithDecorationFromJSON,
    VehicleStatsGpsOdometerMetersWithDecorationFromJSONTyped,
    VehicleStatsGpsOdometerMetersWithDecorationToJSON,
    VehicleStatsIntakeManifoldTempMilliCWithDecoration,
    VehicleStatsIntakeManifoldTempMilliCWithDecorationFromJSON,
    VehicleStatsIntakeManifoldTempMilliCWithDecorationFromJSONTyped,
    VehicleStatsIntakeManifoldTempMilliCWithDecorationToJSON,
    VehicleStatsListGps,
    VehicleStatsListGpsFromJSON,
    VehicleStatsListGpsFromJSONTyped,
    VehicleStatsListGpsToJSON,
    VehicleStatsListSyntheticEngineSeconds,
    VehicleStatsListSyntheticEngineSecondsFromJSON,
    VehicleStatsListSyntheticEngineSecondsFromJSONTyped,
    VehicleStatsListSyntheticEngineSecondsToJSON,
    VehicleStatsNfcCardScanWithDecoration,
    VehicleStatsNfcCardScanWithDecorationFromJSON,
    VehicleStatsNfcCardScanWithDecorationFromJSONTyped,
    VehicleStatsNfcCardScanWithDecorationToJSON,
    VehicleStatsObdEngineSecondsWithDecoration,
    VehicleStatsObdEngineSecondsWithDecorationFromJSON,
    VehicleStatsObdEngineSecondsWithDecorationFromJSONTyped,
    VehicleStatsObdEngineSecondsWithDecorationToJSON,
    VehicleStatsObdOdometerMetersWithDecoration,
    VehicleStatsObdOdometerMetersWithDecorationFromJSON,
    VehicleStatsObdOdometerMetersWithDecorationFromJSONTyped,
    VehicleStatsObdOdometerMetersWithDecorationToJSON,
} from './';

/**
 * A vehicle and its list of stat events.
 * @export
 * @interface VehicleStatsListResponseData
 */
export interface VehicleStatsListResponseData {
    /**
     * A list of ambient air temperature readings in millidegree Celsius for the given vehicle.
     * @type {Array<VehicleStatsAmbientAirTempMilliCWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    ambientAirTemperatureMilliC?: Array<VehicleStatsAmbientAirTempMilliCWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput1?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput10?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput2?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput3?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput4?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput5?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput6?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput7?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput8?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput9?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of barometric pressure readings in pascals for the given vehicle.
     * @type {Array<VehicleStatsBarometricPressurePaWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    barometricPressurePa?: Array<VehicleStatsBarometricPressurePaWithDecoration>;
    /**
     * A list of battery levels in milliVolts for the given vehicle.
     * @type {Array<VehicleStatsBatteryVoltageWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    batteryMilliVolts?: Array<VehicleStatsBatteryVoltageWithDecoration>;
    /**
     * A list of DEF level milli percentage readings for the given vehicle.
     * @type {Array<VehicleStatsDefLevelMilliPercentWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    defLevelMilliPercent?: Array<VehicleStatsDefLevelMilliPercentWithDecoration>;
    /**
     * A list of the speeds of the vehicle in miles per hour, as reported by the ECU.
     * @type {Array<VehicleStatsEcuSpeedMphWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    ecuSpeedMph?: Array<VehicleStatsEcuSpeedMphWithDecoration>;
    /**
     * A list of engine coolant temperature readings in millidegree Celsius for the given vehicle.
     * @type {Array<VehicleStatsEngineCoolantTempMilliCWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineCoolantTemperatureMilliC?: Array<VehicleStatsEngineCoolantTempMilliCWithDecoration>;
    /**
     * A list of engine immobilizer data for the given vehicle.
     * @type {Array<VehicleStatsEngineImmobilizerWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineImmobilizer?: Array<VehicleStatsEngineImmobilizerWithDecoration>;
    /**
     * A list of engine load percentage readings for the given vehicle.
     * @type {Array<VehicleStatsEngineLoadPercentWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineLoadPercent?: Array<VehicleStatsEngineLoadPercentWithDecoration>;
    /**
     * A list of engine oil pressure readings in kilopascals for the given vehicle.
     * @type {Array<VehicleStatsEngineOilPressureKPaWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineOilPressureKPa?: Array<VehicleStatsEngineOilPressureKPaWithDecoration>;
    /**
     * A list engine RPM values for the given vehicle.
     * @type {Array<VehicleStatsEngineRpmWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineRpm?: Array<VehicleStatsEngineRpmWithDecoration>;
    /**
     * A list of engine state events for the given vehicle.
     * @type {Array<VehicleStatsEngineStateWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineStates?: Array<VehicleStatsEngineStateWithDecoration>;
    /**
     * A list of engine fault codes.
     * @type {Array<VehicleStatsFaultCodesWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    faultCodes?: Array<VehicleStatsFaultCodesWithDecoration>;
    /**
     * A list of fuel percentage readings for the given vehicle.
     * @type {Array<VehicleStatsFuelPercentWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    fuelPercents?: Array<VehicleStatsFuelPercentWithDecoration>;
    /**
     * A list of GPS location events for the given vehicles.
     * @type {Array<VehicleStatsListGps>}
     * @memberof VehicleStatsListResponseData
     */
    gps?: Array<VehicleStatsListGps>;
    /**
     * A list of GPS distance events for the given vehicle.
     * @type {Array<VehicleStatsGpsDistanceMetersWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    gpsDistanceMeters?: Array<VehicleStatsGpsDistanceMetersWithDecoration>;
    /**
     * A list of GPS odometer events for the given vehicle.
     * @type {Array<VehicleStatsGpsOdometerMetersWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    gpsOdometerMeters?: Array<VehicleStatsGpsOdometerMetersWithDecoration>;
    /**
     * The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
     * @type {string}
     * @memberof VehicleStatsListResponseData
     */
    id?: string;
    /**
     * A list of intake manifold temperature readings in millidegree Celsius for the given vehicle.
     * @type {Array<VehicleStatsIntakeManifoldTempMilliCWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    intakeManifoldTemperatureMilliC?: Array<VehicleStatsIntakeManifoldTempMilliCWithDecoration>;
    /**
     * The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof VehicleStatsListResponseData
     */
    name?: string;
    /**
     * A list of NFC cards that were scanned for the given vehicles.
     * @type {Array<VehicleStatsNfcCardScanWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    nfcCardScans?: Array<VehicleStatsNfcCardScanWithDecoration>;
    /**
     * A list of OBD engine seconds readings for the given vehicle.
     * @type {Array<VehicleStatsObdEngineSecondsWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    obdEngineSeconds?: Array<VehicleStatsObdEngineSecondsWithDecoration>;
    /**
     * A list of OBD odometer readings for the given vehicle.
     * @type {Array<VehicleStatsObdOdometerMetersWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    obdOdometerMeters?: Array<VehicleStatsObdOdometerMetersWithDecoration>;
    /**
     * A list of synthetic engine seconds values.
     * @type {Array<VehicleStatsListSyntheticEngineSeconds>}
     * @memberof VehicleStatsListResponseData
     */
    syntheticEngineSeconds?: Array<VehicleStatsListSyntheticEngineSeconds>;
}

export function VehicleStatsListResponseDataFromJSON(json: any): VehicleStatsListResponseData {
    return VehicleStatsListResponseDataFromJSONTyped(json, false);
}

export function VehicleStatsListResponseDataFromJSONTyped(json: any, ignoreDiscriminator: boolean): VehicleStatsListResponseData {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'ambientAirTemperatureMilliC': !exists(json, 'ambientAirTemperatureMilliC') ? undefined : ((json['ambientAirTemperatureMilliC'] as Array<any>).map(VehicleStatsAmbientAirTempMilliCWithDecorationFromJSON)),
        'auxInput1': !exists(json, 'auxInput1') ? undefined : ((json['auxInput1'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput10': !exists(json, 'auxInput10') ? undefined : ((json['auxInput10'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput2': !exists(json, 'auxInput2') ? undefined : ((json['auxInput2'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput3': !exists(json, 'auxInput3') ? undefined : ((json['auxInput3'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput4': !exists(json, 'auxInput4') ? undefined : ((json['auxInput4'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput5': !exists(json, 'auxInput5') ? undefined : ((json['auxInput5'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput6': !exists(json, 'auxInput6') ? undefined : ((json['auxInput6'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput7': !exists(json, 'auxInput7') ? undefined : ((json['auxInput7'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput8': !exists(json, 'auxInput8') ? undefined : ((json['auxInput8'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'auxInput9': !exists(json, 'auxInput9') ? undefined : ((json['auxInput9'] as Array<any>).map(VehicleStatsAuxInputWithDecorationFromJSON)),
        'barometricPressurePa': !exists(json, 'barometricPressurePa') ? undefined : ((json['barometricPressurePa'] as Array<any>).map(VehicleStatsBarometricPressurePaWithDecorationFromJSON)),
        'batteryMilliVolts': !exists(json, 'batteryMilliVolts') ? undefined : ((json['batteryMilliVolts'] as Array<any>).map(VehicleStatsBatteryVoltageWithDecorationFromJSON)),
        'defLevelMilliPercent': !exists(json, 'defLevelMilliPercent') ? undefined : ((json['defLevelMilliPercent'] as Array<any>).map(VehicleStatsDefLevelMilliPercentWithDecorationFromJSON)),
        'ecuSpeedMph': !exists(json, 'ecuSpeedMph') ? undefined : ((json['ecuSpeedMph'] as Array<any>).map(VehicleStatsEcuSpeedMphWithDecorationFromJSON)),
        'engineCoolantTemperatureMilliC': !exists(json, 'engineCoolantTemperatureMilliC') ? undefined : ((json['engineCoolantTemperatureMilliC'] as Array<any>).map(VehicleStatsEngineCoolantTempMilliCWithDecorationFromJSON)),
        'engineImmobilizer': !exists(json, 'engineImmobilizer') ? undefined : ((json['engineImmobilizer'] as Array<any>).map(VehicleStatsEngineImmobilizerWithDecorationFromJSON)),
        'engineLoadPercent': !exists(json, 'engineLoadPercent') ? undefined : ((json['engineLoadPercent'] as Array<any>).map(VehicleStatsEngineLoadPercentWithDecorationFromJSON)),
        'engineOilPressureKPa': !exists(json, 'engineOilPressureKPa') ? undefined : ((json['engineOilPressureKPa'] as Array<any>).map(VehicleStatsEngineOilPressureKPaWithDecorationFromJSON)),
        'engineRpm': !exists(json, 'engineRpm') ? undefined : ((json['engineRpm'] as Array<any>).map(VehicleStatsEngineRpmWithDecorationFromJSON)),
        'engineStates': !exists(json, 'engineStates') ? undefined : ((json['engineStates'] as Array<any>).map(VehicleStatsEngineStateWithDecorationFromJSON)),
        'faultCodes': !exists(json, 'faultCodes') ? undefined : ((json['faultCodes'] as Array<any>).map(VehicleStatsFaultCodesWithDecorationFromJSON)),
        'fuelPercents': !exists(json, 'fuelPercents') ? undefined : ((json['fuelPercents'] as Array<any>).map(VehicleStatsFuelPercentWithDecorationFromJSON)),
        'gps': !exists(json, 'gps') ? undefined : ((json['gps'] as Array<any>).map(VehicleStatsListGpsFromJSON)),
        'gpsDistanceMeters': !exists(json, 'gpsDistanceMeters') ? undefined : ((json['gpsDistanceMeters'] as Array<any>).map(VehicleStatsGpsDistanceMetersWithDecorationFromJSON)),
        'gpsOdometerMeters': !exists(json, 'gpsOdometerMeters') ? undefined : ((json['gpsOdometerMeters'] as Array<any>).map(VehicleStatsGpsOdometerMetersWithDecorationFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'intakeManifoldTemperatureMilliC': !exists(json, 'intakeManifoldTemperatureMilliC') ? undefined : ((json['intakeManifoldTemperatureMilliC'] as Array<any>).map(VehicleStatsIntakeManifoldTempMilliCWithDecorationFromJSON)),
        'name': !exists(json, 'name') ? undefined : json['name'],
        'nfcCardScans': !exists(json, 'nfcCardScans') ? undefined : ((json['nfcCardScans'] as Array<any>).map(VehicleStatsNfcCardScanWithDecorationFromJSON)),
        'obdEngineSeconds': !exists(json, 'obdEngineSeconds') ? undefined : ((json['obdEngineSeconds'] as Array<any>).map(VehicleStatsObdEngineSecondsWithDecorationFromJSON)),
        'obdOdometerMeters': !exists(json, 'obdOdometerMeters') ? undefined : ((json['obdOdometerMeters'] as Array<any>).map(VehicleStatsObdOdometerMetersWithDecorationFromJSON)),
        'syntheticEngineSeconds': !exists(json, 'syntheticEngineSeconds') ? undefined : ((json['syntheticEngineSeconds'] as Array<any>).map(VehicleStatsListSyntheticEngineSecondsFromJSON)),
    };
}

export function VehicleStatsListResponseDataToJSON(value?: VehicleStatsListResponseData | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'ambientAirTemperatureMilliC': value.ambientAirTemperatureMilliC === undefined ? undefined : ((value.ambientAirTemperatureMilliC as Array<any>).map(VehicleStatsAmbientAirTempMilliCWithDecorationToJSON)),
        'auxInput1': value.auxInput1 === undefined ? undefined : ((value.auxInput1 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput10': value.auxInput10 === undefined ? undefined : ((value.auxInput10 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput2': value.auxInput2 === undefined ? undefined : ((value.auxInput2 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput3': value.auxInput3 === undefined ? undefined : ((value.auxInput3 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput4': value.auxInput4 === undefined ? undefined : ((value.auxInput4 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput5': value.auxInput5 === undefined ? undefined : ((value.auxInput5 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput6': value.auxInput6 === undefined ? undefined : ((value.auxInput6 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput7': value.auxInput7 === undefined ? undefined : ((value.auxInput7 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput8': value.auxInput8 === undefined ? undefined : ((value.auxInput8 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'auxInput9': value.auxInput9 === undefined ? undefined : ((value.auxInput9 as Array<any>).map(VehicleStatsAuxInputWithDecorationToJSON)),
        'barometricPressurePa': value.barometricPressurePa === undefined ? undefined : ((value.barometricPressurePa as Array<any>).map(VehicleStatsBarometricPressurePaWithDecorationToJSON)),
        'batteryMilliVolts': value.batteryMilliVolts === undefined ? undefined : ((value.batteryMilliVolts as Array<any>).map(VehicleStatsBatteryVoltageWithDecorationToJSON)),
        'defLevelMilliPercent': value.defLevelMilliPercent === undefined ? undefined : ((value.defLevelMilliPercent as Array<any>).map(VehicleStatsDefLevelMilliPercentWithDecorationToJSON)),
        'ecuSpeedMph': value.ecuSpeedMph === undefined ? undefined : ((value.ecuSpeedMph as Array<any>).map(VehicleStatsEcuSpeedMphWithDecorationToJSON)),
        'engineCoolantTemperatureMilliC': value.engineCoolantTemperatureMilliC === undefined ? undefined : ((value.engineCoolantTemperatureMilliC as Array<any>).map(VehicleStatsEngineCoolantTempMilliCWithDecorationToJSON)),
        'engineImmobilizer': value.engineImmobilizer === undefined ? undefined : ((value.engineImmobilizer as Array<any>).map(VehicleStatsEngineImmobilizerWithDecorationToJSON)),
        'engineLoadPercent': value.engineLoadPercent === undefined ? undefined : ((value.engineLoadPercent as Array<any>).map(VehicleStatsEngineLoadPercentWithDecorationToJSON)),
        'engineOilPressureKPa': value.engineOilPressureKPa === undefined ? undefined : ((value.engineOilPressureKPa as Array<any>).map(VehicleStatsEngineOilPressureKPaWithDecorationToJSON)),
        'engineRpm': value.engineRpm === undefined ? undefined : ((value.engineRpm as Array<any>).map(VehicleStatsEngineRpmWithDecorationToJSON)),
        'engineStates': value.engineStates === undefined ? undefined : ((value.engineStates as Array<any>).map(VehicleStatsEngineStateWithDecorationToJSON)),
        'faultCodes': value.faultCodes === undefined ? undefined : ((value.faultCodes as Array<any>).map(VehicleStatsFaultCodesWithDecorationToJSON)),
        'fuelPercents': value.fuelPercents === undefined ? undefined : ((value.fuelPercents as Array<any>).map(VehicleStatsFuelPercentWithDecorationToJSON)),
        'gps': value.gps === undefined ? undefined : ((value.gps as Array<any>).map(VehicleStatsListGpsToJSON)),
        'gpsDistanceMeters': value.gpsDistanceMeters === undefined ? undefined : ((value.gpsDistanceMeters as Array<any>).map(VehicleStatsGpsDistanceMetersWithDecorationToJSON)),
        'gpsOdometerMeters': value.gpsOdometerMeters === undefined ? undefined : ((value.gpsOdometerMeters as Array<any>).map(VehicleStatsGpsOdometerMetersWithDecorationToJSON)),
        'id': value.id,
        'intakeManifoldTemperatureMilliC': value.intakeManifoldTemperatureMilliC === undefined ? undefined : ((value.intakeManifoldTemperatureMilliC as Array<any>).map(VehicleStatsIntakeManifoldTempMilliCWithDecorationToJSON)),
        'name': value.name,
        'nfcCardScans': value.nfcCardScans === undefined ? undefined : ((value.nfcCardScans as Array<any>).map(VehicleStatsNfcCardScanWithDecorationToJSON)),
        'obdEngineSeconds': value.obdEngineSeconds === undefined ? undefined : ((value.obdEngineSeconds as Array<any>).map(VehicleStatsObdEngineSecondsWithDecorationToJSON)),
        'obdOdometerMeters': value.obdOdometerMeters === undefined ? undefined : ((value.obdOdometerMeters as Array<any>).map(VehicleStatsObdOdometerMetersWithDecorationToJSON)),
        'syntheticEngineSeconds': value.syntheticEngineSeconds === undefined ? undefined : ((value.syntheticEngineSeconds as Array<any>).map(VehicleStatsListSyntheticEngineSecondsToJSON)),
    };
}


