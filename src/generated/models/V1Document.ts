/* tslint:disable */
/* eslint-disable */
/**
 * Samsara API
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara\'s new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what\'s changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can\'t find an API that you\'re looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you\'re familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, please visit https://samsara.com/help.  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ### OAuth2 If building an application for our marketplace, our API is accessible via. OAuth2 as well.  | Type  | Value | | ------------- |:-------------:| | Security scheme      | OAuth2                                   | | OAuth2 Flow          | accessCode                               | | Authorization URL    | https://api.samsara.com/oauth2/authorize | | Token URL            | https://api.samsara.com/oauth2/token     |    ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures). 
 *
 * The version of the OpenAPI document: 2020-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1DocumentAllOf,
    V1DocumentAllOfFromJSON,
    V1DocumentAllOfFromJSONTyped,
    V1DocumentAllOfToJSON,
    V1DocumentBase,
    V1DocumentBaseFromJSON,
    V1DocumentBaseFromJSONTyped,
    V1DocumentBaseToJSON,
} from './';

/**
 * 
 * @export
 * @interface V1Document
 */
export interface V1Document {
    /**
     * An array of objects that describe a set of fields conditionally shown by a multiple choice value.
     * @type {Array<object>}
     * @memberof V1Document
     */
    conditionalFieldSections?: Array<object>;
    /**
     * Name of the document type.
     * @type {string}
     * @memberof V1Document
     */
    documentType: string;
    /**
     * The time in Unix epoch milliseconds that the document was created in the driver app.
     * @type {number}
     * @memberof V1Document
     */
    driverCreatedAtMs: number;
    /**
     * ID of the driver for whom the document is submitted.
     * @type {number}
     * @memberof V1Document
     */
    driverId: number;
    /**
     * An array of field objects associated with a document.
     * @type {Array<object>}
     * @memberof V1Document
     */
    fields: Array<object>;
    /**
     * ID of the document.
     * @type {string}
     * @memberof V1Document
     */
    id: string;
    /**
     * Organization ID that the document belongs to.
     * @type {number}
     * @memberof V1Document
     */
    orgId: number;
    /**
     * The time in Unix epoch milliseconds that the document was received by the server.
     * @type {number}
     * @memberof V1Document
     */
    serverCreatedAtMs: number;
    /**
     * The time in Unix epoch milliseconds that the document was updated on the server.
     * @type {number}
     * @memberof V1Document
     */
    serverUpdatedAtMs: number;
    /**
     * ID of the vehicle the driver was signed into when the document was submitted. Will be `null` if the document `state` is `Required`.
     * @type {number}
     * @memberof V1Document
     */
    vehicleId: number;
    /**
     * ID of the Samsara dispatch job for which the document is submitted.
     * @type {number}
     * @memberof V1Document
     */
    dispatchJobId: number;
    /**
     * Custom name of the document. If no custom name is given to the document, the admin dashboard and driver app will display the template name as the default document name.
     * @type {string}
     * @memberof V1Document
     */
    name?: string;
    /**
     * Notes submitted with this document.
     * @type {string}
     * @memberof V1Document
     */
    notes: string;
    /**
     * The condition of the document created for the driver. Can be either `Required` or `Submitted`. If no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. `Submitted` documents have been submitted by the driver in the Driver App. `Archived` documents have been archived by the admin in the cloud dashboard.
     * @type {string}
     * @memberof V1Document
     */
    state?: V1DocumentStateEnum;
}

/**
* @export
* @enum {string}
*/
export enum V1DocumentStateEnum {
    Required = 'Required',
    Submitted = 'Submitted',
    Archived = 'Archived'
}

export function V1DocumentFromJSON(json: any): V1Document {
    return V1DocumentFromJSONTyped(json, false);
}

export function V1DocumentFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1Document {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'conditionalFieldSections': !exists(json, 'conditionalFieldSections') ? undefined : json['conditionalFieldSections'],
        'documentType': json['documentType'],
        'driverCreatedAtMs': json['driverCreatedAtMs'],
        'driverId': json['driverId'],
        'fields': json['fields'],
        'id': json['id'],
        'orgId': json['orgId'],
        'serverCreatedAtMs': json['serverCreatedAtMs'],
        'serverUpdatedAtMs': json['serverUpdatedAtMs'],
        'vehicleId': json['vehicleId'],
        'dispatchJobId': json['dispatchJobId'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'notes': json['notes'],
        'state': !exists(json, 'state') ? undefined : json['state'],
    };
}

export function V1DocumentToJSON(value?: V1Document | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'conditionalFieldSections': value.conditionalFieldSections,
        'documentType': value.documentType,
        'driverCreatedAtMs': value.driverCreatedAtMs,
        'driverId': value.driverId,
        'fields': value.fields,
        'id': value.id,
        'orgId': value.orgId,
        'serverCreatedAtMs': value.serverCreatedAtMs,
        'serverUpdatedAtMs': value.serverUpdatedAtMs,
        'vehicleId': value.vehicleId,
        'dispatchJobId': value.dispatchJobId,
        'name': value.name,
        'notes': value.notes,
        'state': value.state,
    };
}


