/* tslint:disable */
/* eslint-disable */
/**
 * Samsara API
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara\'s new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what\'s changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can\'t find an API that you\'re looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you\'re familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, please visit https://samsara.com/help.  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ### OAuth2 If building an application for our marketplace, our API is accessible via. OAuth2 as well.  | Type  | Value | | ------------- |:-------------:| | Security scheme      | OAuth2                                   | | OAuth2 Flow          | accessCode                               | | Authorization URL    | https://api.samsara.com/oauth2/authorize | | Token URL            | https://api.samsara.com/oauth2/token     |    ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures). 
 *
 * The version of the OpenAPI document: 2020-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    V1DispatchJob,
    V1DispatchJobFromJSON,
    V1DispatchJobFromJSONTyped,
    V1DispatchJobToJSON,
    V1DispatchRouteAllOf,
    V1DispatchRouteAllOfFromJSON,
    V1DispatchRouteAllOfFromJSONTyped,
    V1DispatchRouteAllOfToJSON,
    V1DispatchRouteBase,
    V1DispatchRouteBaseFromJSON,
    V1DispatchRouteBaseFromJSONTyped,
    V1DispatchRouteBaseToJSON,
} from './';

/**
 * 
 * @export
 * @interface V1DispatchRoute
 */
export interface V1DispatchRoute {
    /**
     * The dispatch jobs associated with this route.
     * @type {Array<V1DispatchJob>}
     * @memberof V1DispatchRoute
     */
    dispatchJobs?: Array<V1DispatchJob>;
    /**
     * ID of the Samsara dispatch route.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    id?: number;
    /**
     * The time in Unix epoch milliseconds that the route actually ended.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    actualEndMs?: number;
    /**
     * The time in Unix epoch milliseconds that the route actually started.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    actualStartMs?: number;
    /**
     * When set to true (default), this causes the Route to complete on arrival at the final stop. When set to false, the last stop will capture arrival and departure separately as with other stops.
     * @type {boolean}
     * @memberof V1DispatchRoute
     */
    completeLastStopOnArrival?: boolean;
    /**
     * ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    driverId?: number;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof V1DispatchRoute
     */
    externalIds?: object;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    groupId?: number;
    /**
     * Descriptive name of this route.
     * @type {string}
     * @memberof V1DispatchRoute
     */
    name?: string;
    /**
     * Notes regarding the details of this route; maximum of 2000 characters; newline characters ('\n')can be used for formatting.
     * @type {string}
     * @memberof V1DispatchRoute
     */
    notes?: string;
    /**
     * Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    odometerEndMeters?: number;
    /**
     * Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    odometerStartMeters?: number;
    /**
     * The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    scheduledEndMs?: number;
    /**
     * The distance expected to be traveled for this route in meters.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    scheduledMeters?: number;
    /**
     * The time in Unix epoch milliseconds that the route is scheduled to start.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    scheduledStartMs?: number;
    /**
     * The address of the route's starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
     * @type {string}
     * @memberof V1DispatchRoute
     */
    startLocationAddress?: string;
    /**
     * ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    startLocationAddressId?: number;
    /**
     * Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    startLocationLat?: number;
    /**
     * Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    startLocationLng?: number;
    /**
     * The name of the route's starting location. If provided, it will take precedence over the name of the address book entry.
     * @type {string}
     * @memberof V1DispatchRoute
     */
    startLocationName?: string;
    /**
     * ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    trailerId?: number;
    /**
     * ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    vehicleId?: number;
}

export function V1DispatchRouteFromJSON(json: any): V1DispatchRoute {
    return V1DispatchRouteFromJSONTyped(json, false);
}

export function V1DispatchRouteFromJSONTyped(json: any, ignoreDiscriminator: boolean): V1DispatchRoute {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'dispatchJobs': !exists(json, 'dispatch_jobs') ? undefined : ((json['dispatch_jobs'] as Array<any>).map(V1DispatchJobFromJSON)),
        'id': !exists(json, 'id') ? undefined : json['id'],
        'actualEndMs': !exists(json, 'actual_end_ms') ? undefined : json['actual_end_ms'],
        'actualStartMs': !exists(json, 'actual_start_ms') ? undefined : json['actual_start_ms'],
        'completeLastStopOnArrival': !exists(json, 'complete_last_stop_on_arrival') ? undefined : json['complete_last_stop_on_arrival'],
        'driverId': !exists(json, 'driver_id') ? undefined : json['driver_id'],
        'externalIds': !exists(json, 'externalIds') ? undefined : json['externalIds'],
        'groupId': !exists(json, 'group_id') ? undefined : json['group_id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'notes': !exists(json, 'notes') ? undefined : json['notes'],
        'odometerEndMeters': !exists(json, 'odometer_end_meters') ? undefined : json['odometer_end_meters'],
        'odometerStartMeters': !exists(json, 'odometer_start_meters') ? undefined : json['odometer_start_meters'],
        'scheduledEndMs': !exists(json, 'scheduled_end_ms') ? undefined : json['scheduled_end_ms'],
        'scheduledMeters': !exists(json, 'scheduled_meters') ? undefined : json['scheduled_meters'],
        'scheduledStartMs': !exists(json, 'scheduled_start_ms') ? undefined : json['scheduled_start_ms'],
        'startLocationAddress': !exists(json, 'start_location_address') ? undefined : json['start_location_address'],
        'startLocationAddressId': !exists(json, 'start_location_address_id') ? undefined : json['start_location_address_id'],
        'startLocationLat': !exists(json, 'start_location_lat') ? undefined : json['start_location_lat'],
        'startLocationLng': !exists(json, 'start_location_lng') ? undefined : json['start_location_lng'],
        'startLocationName': !exists(json, 'start_location_name') ? undefined : json['start_location_name'],
        'trailerId': !exists(json, 'trailer_id') ? undefined : json['trailer_id'],
        'vehicleId': !exists(json, 'vehicle_id') ? undefined : json['vehicle_id'],
    };
}

export function V1DispatchRouteToJSON(value?: V1DispatchRoute | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'dispatch_jobs': value.dispatchJobs === undefined ? undefined : ((value.dispatchJobs as Array<any>).map(V1DispatchJobToJSON)),
        'id': value.id,
        'actual_end_ms': value.actualEndMs,
        'actual_start_ms': value.actualStartMs,
        'complete_last_stop_on_arrival': value.completeLastStopOnArrival,
        'driver_id': value.driverId,
        'externalIds': value.externalIds,
        'group_id': value.groupId,
        'name': value.name,
        'notes': value.notes,
        'odometer_end_meters': value.odometerEndMeters,
        'odometer_start_meters': value.odometerStartMeters,
        'scheduled_end_ms': value.scheduledEndMs,
        'scheduled_meters': value.scheduledMeters,
        'scheduled_start_ms': value.scheduledStartMs,
        'start_location_address': value.startLocationAddress,
        'start_location_address_id': value.startLocationAddressId,
        'start_location_lat': value.startLocationLat,
        'start_location_lng': value.startLocationLng,
        'start_location_name': value.startLocationName,
        'trailer_id': value.trailerId,
        'vehicle_id': value.vehicleId,
    };
}


