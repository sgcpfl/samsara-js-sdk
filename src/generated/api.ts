/* tslint:disable */
/* eslint-disable */
/**
 * Samsara API
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara\'s new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what\'s changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api-legacy).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can\'t find an API that you\'re looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api-legacy) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you\'re familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, please visit https://samsara.com/help.  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ### OAuth2 If building an application for our marketplace, our API is accessible via. OAuth2 as well.  | Type  | Value | | ------------- |:-------------:| | Security scheme      | OAuth2                                   | | OAuth2 Flow          | accessCode                               | | Authorization URL    | https://api.samsara.com/oauth2/authorize | | Token URL            | https://api.samsara.com/oauth2/token     |    ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures). 
 *
 * The version of the OpenAPI document: 2020-06-15
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An Address object.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * Reporting location type associated with the address (used for ELD reporting purposes).
     * @type {Array<string>}
     * @memberof Address
     */
    addressTypes?: Array<AddressAddressTypesEnum>;
    /**
     * An array Contact mini-objects that are associated the Address.
     * @type {Array<ContactTinyResponse>}
     * @memberof Address
     */
    contacts?: Array<ContactTinyResponse>;
    /**
     * The date and time this address was created in RFC 3339 format.
     * @type {string}
     * @memberof Address
     */
    createdAtTime?: string;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof Address
     */
    externalIds?: object;
    /**
     * The full street address for this address/geofence, as it might be recognized by Google Maps.
     * @type {string}
     * @memberof Address
     */
    formattedAddress: string;
    /**
     * 
     * @type {AddressGeofence}
     * @memberof Address
     */
    geofence: AddressGeofence;
    /**
     * ID of the Address.
     * @type {string}
     * @memberof Address
     */
    id: string;
    /**
     * Latitude of the address. Will be geocoded from `formattedAddress` if not provided.
     * @type {number}
     * @memberof Address
     */
    latitude?: number;
    /**
     * Longitude of the address. Will be geocoded from `formattedAddress` if not provided.
     * @type {number}
     * @memberof Address
     */
    longitude?: number;
    /**
     * Name of the address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * Notes about the address.
     * @type {string}
     * @memberof Address
     */
    notes?: string;
    /**
     * An array of all tag mini-objects that are associated with the given address entry.
     * @type {Array<TagTinyResponse>}
     * @memberof Address
     */
    tags?: Array<TagTinyResponse>;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressAddressTypesEnum {
    Yard = 'yard',
    ShortHaul = 'shortHaul',
    WorkforceSite = 'workforceSite',
    RiskZone = 'riskZone',
    IndustrialSite = 'industrialSite'
}

/**
 * The geofence that defines this address and its bounds. This can either be a circle or a polygon, but not both.
 * @export
 * @interface AddressGeofence
 */
export interface AddressGeofence {
    /**
     * 
     * @type {AddressGeofenceCircle}
     * @memberof AddressGeofence
     */
    circle?: AddressGeofenceCircle;
    /**
     * 
     * @type {AddressGeofencePolygon}
     * @memberof AddressGeofence
     */
    polygon?: AddressGeofencePolygon;
}
/**
 * Information about a circular geofence. This field is only needed if the geofence is a circle.
 * @export
 * @interface AddressGeofenceCircle
 */
export interface AddressGeofenceCircle {
    /**
     * Latitude of the address. Will be geocoded from `formattedAddress` if not provided.
     * @type {number}
     * @memberof AddressGeofenceCircle
     */
    latitude?: number;
    /**
     * Longitude of the address. Will be geocoded from `formattedAddress` if not provided.
     * @type {number}
     * @memberof AddressGeofenceCircle
     */
    longitude?: number;
    /**
     * The radius of the circular geofence in meters.
     * @type {number}
     * @memberof AddressGeofenceCircle
     */
    radiusMeters: number;
}
/**
 * Information about a polygon geofence. This field is only needed if the geofence is a polygon.
 * @export
 * @interface AddressGeofencePolygon
 */
export interface AddressGeofencePolygon {
    /**
     * The vertices of the polygon geofence. These geofence vertices describe the perimeter of the polygon, and must consist of at least 3 vertices and less than 40.
     * @type {Array<AddressGeofencePolygonVertices>}
     * @memberof AddressGeofencePolygon
     */
    vertices: Array<AddressGeofencePolygonVertices>;
}
/**
 * 
 * @export
 * @interface AddressGeofencePolygonVertices
 */
export interface AddressGeofencePolygonVertices {
    /**
     * The latitude of a geofence vertex in decimal degrees.
     * @type {number}
     * @memberof AddressGeofencePolygonVertices
     */
    latitude: number;
    /**
     * The longitude of a geofence vertex in decimal degrees.
     * @type {number}
     * @memberof AddressGeofencePolygonVertices
     */
    longitude: number;
}
/**
 * An Address response body.
 * @export
 * @interface AddressResponse
 */
export interface AddressResponse {
    /**
     * 
     * @type {Address}
     * @memberof AddressResponse
     */
    data: Address;
}
/**
 * The asset creation arguments
 * @export
 * @interface AssetCreate
 */
export interface AssetCreate {
    /**
     * The custom fields of an asset.
     * @type {{ [key: string]: string; }}
     * @memberof AssetCreate
     */
    customMetadata?: { [key: string]: string; };
    /**
     * 
     * @type {AssetLocation}
     * @memberof AssetCreate
     */
    location?: AssetLocation;
    /**
     * Required if locationType is \"dataInput\". Specifies the id of a location data input which will determine the asset\'s location. **The data input will be moved to the new asset.**
     * @type {string}
     * @memberof AssetCreate
     */
    locationDataInputId?: string;
    /**
     * 
     * @type {LocationType}
     * @memberof AssetCreate
     */
    locationType?: LocationType;
    /**
     * The name of the asset.
     * @type {string}
     * @memberof AssetCreate
     */
    name: string;
    /**
     * The id of the parent asset that the asset belongs to.
     * @type {string}
     * @memberof AssetCreate
     */
    parentId?: string;
    /**
     * The asset\'s isRunning status will be true when the associated data input\'s value is 1. Data input cannot be of location format. **The data input will be moved to the new asset.**
     * @type {string}
     * @memberof AssetCreate
     */
    runningStatusDataInputId?: string;
    /**
     * The ids of the tags that the asset should belong to.
     * @type {Array<string>}
     * @memberof AssetCreate
     */
    tagIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface AssetDataInput
 */
export interface AssetDataInput {
    /**
     * Name of the data group that the data input is associated with
     * @type {string}
     * @memberof AssetDataInput
     */
    dataGroup?: string;
    /**
     * ID of the data input
     * @type {string}
     * @memberof AssetDataInput
     */
    id?: string;
    /**
     * 
     * @type {AssetDataInputLastPoint}
     * @memberof AssetDataInput
     */
    lastPoint?: AssetDataInputLastPoint;
    /**
     * Name of the data input
     * @type {string}
     * @memberof AssetDataInput
     */
    name?: string;
    /**
     * Units of data for this data input
     * @type {string}
     * @memberof AssetDataInput
     */
    units?: string;
}
/**
 * The last reported point of a data input.
 * @export
 * @interface AssetDataInputLastPoint
 */
export interface AssetDataInputLastPoint {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof AssetDataInputLastPoint
     */
    time?: string;
    /**
     * Numeric value of the data point.
     * @type {number}
     * @memberof AssetDataInputLastPoint
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface AssetDataOutput
 */
export interface AssetDataOutput {
    /**
     * Name of the data group that the data output is associated with
     * @type {string}
     * @memberof AssetDataOutput
     */
    dataGroup?: string;
    /**
     * 
     * @type {AssetDataInput}
     * @memberof AssetDataOutput
     */
    dataInput?: AssetDataInput;
    /**
     * ID of the device that the data output is configured on
     * @type {string}
     * @memberof AssetDataOutput
     */
    deviceId?: string;
    /**
     * ID of the data output
     * @type {string}
     * @memberof AssetDataOutput
     */
    id?: string;
    /**
     * Name of the data output
     * @type {string}
     * @memberof AssetDataOutput
     */
    name?: string;
}
/**
 * Bad Gateway
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsBadGatewayErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsBadRequestErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsGatewayTimeoutErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsInternalServerErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsMethodNotAllowedErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsNotFoundErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsNotImplementedErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsRequestBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsRequestBody {
    /**
     * A map of data output IDs to values. All data outputs must belong to the same asset. Only the specified IDs will be written to.
     * @type {object}
     * @memberof AssetDataOutputsPatchAssetDataOutputsRequestBody
     */
    values: object;
}
/**
 * 
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsResponseBody {
    /**
     * List of responses for each data output from the original request.
     * @type {Array<PatchAssetDataOutputsSingleResponseResponseBody>}
     * @memberof AssetDataOutputsPatchAssetDataOutputsResponseBody
     */
    data: Array<PatchAssetDataOutputsSingleResponseResponseBody>;
}
/**
 * Service unavailable
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsServiceUnavailableErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsTooManyRequestsErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface AssetDataOutputsPatchAssetDataOutputsUnauthorizedErrorResponseBody
 */
export interface AssetDataOutputsPatchAssetDataOutputsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof AssetDataOutputsPatchAssetDataOutputsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * For locationType \"point\", latitude and longitude are required. For \"address\", formattedAddress must be provided, and lat/long can be optionally included for displaying a dot on the assets map. For \"dataInput\", this object should not be passed in.
 * @export
 * @interface AssetLocation
 */
export interface AssetLocation {
    /**
     * Formatted address of the location
     * @type {string}
     * @memberof AssetLocation
     */
    formattedAddress?: string;
    /**
     * The latitude of the asset in decimal degrees.
     * @type {number}
     * @memberof AssetLocation
     */
    latitude?: number;
    /**
     * The longitude of the asset in decimal degrees.
     * @type {number}
     * @memberof AssetLocation
     */
    longitude?: number;
}
/**
 * The asset creation arguments
 * @export
 * @interface AssetPatch
 */
export interface AssetPatch {
    /**
     * The custom fields of an asset.
     * @type {{ [key: string]: string; }}
     * @memberof AssetPatch
     */
    customMetadata?: { [key: string]: string; };
    /**
     * 
     * @type {AssetLocation}
     * @memberof AssetPatch
     */
    location?: AssetLocation;
    /**
     * Required if locationType is \"dataInput\". Specifies the id of a location data input which will determine the asset\'s location. The data input must be in the asset.
     * @type {string}
     * @memberof AssetPatch
     */
    locationDataInputId?: string;
    /**
     * 
     * @type {LocationType}
     * @memberof AssetPatch
     */
    locationType?: LocationType;
    /**
     * The name of the asset.
     * @type {string}
     * @memberof AssetPatch
     */
    name?: string;
    /**
     * The id of the parent asset that the asset belongs to. Pass in an empty string to remove the child from the parent.
     * @type {string}
     * @memberof AssetPatch
     */
    parentId?: string;
    /**
     * The asset\'s isRunning status will be true when the associated data input\'s value is 1. Data input cannot be of location format. The data input must be in the asset.
     * @type {string}
     * @memberof AssetPatch
     */
    runningStatusDataInputId?: string;
    /**
     * The ids of the tags that the asset should belong to.
     * @type {Array<string>}
     * @memberof AssetPatch
     */
    tagIds?: Array<string>;
}
/**
 * Asset
 * @export
 * @interface AssetResponse
 */
export interface AssetResponse {
    /**
     * The custom fields of an asset.
     * @type {{ [key: string]: string; }}
     * @memberof AssetResponse
     */
    customMetadata?: { [key: string]: string; };
    /**
     * The list of data outputs configured on the asset.
     * @type {Array<AssetDataOutput>}
     * @memberof AssetResponse
     */
    dataOutputs?: Array<AssetDataOutput>;
    /**
     * The id of the asset
     * @type {string}
     * @memberof AssetResponse
     */
    id: string;
    /**
     * The running status of the asset. Returns True for On, and False for Off.
     * @type {boolean}
     * @memberof AssetResponse
     */
    isRunning: boolean;
    /**
     * 
     * @type {AssetLocation}
     * @memberof AssetResponse
     */
    location?: AssetLocation;
    /**
     * 
     * @type {AssetResponseLocationDataInput}
     * @memberof AssetResponse
     */
    locationDataInput?: AssetResponseLocationDataInput;
    /**
     * 
     * @type {LocationType}
     * @memberof AssetResponse
     */
    locationType?: LocationType;
    /**
     * The name of the asset.
     * @type {string}
     * @memberof AssetResponse
     */
    name: string;
    /**
     * 
     * @type {AssetResponseParentAsset}
     * @memberof AssetResponse
     */
    parentAsset?: AssetResponseParentAsset;
    /**
     * 
     * @type {AssetResponseRunningStatusDataInput}
     * @memberof AssetResponse
     */
    runningStatusDataInput?: AssetResponseRunningStatusDataInput;
    /**
     * The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting) associated with the Industrial Asset. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {Array<TagTinyResponse>}
     * @memberof AssetResponse
     */
    tags?: Array<TagTinyResponse>;
}
/**
 * The associated location data input (only applicable when locationType is \"dataInput\").
 * @export
 * @interface AssetResponseLocationDataInput
 */
export interface AssetResponseLocationDataInput {
    /**
     * Id of the data input
     * @type {string}
     * @memberof AssetResponseLocationDataInput
     */
    id: string;
}
/**
 * The asset\'s parent
 * @export
 * @interface AssetResponseParentAsset
 */
export interface AssetResponseParentAsset {
    /**
     * The id of the parent asset that the asset belongs to.
     * @type {string}
     * @memberof AssetResponseParentAsset
     */
    id: string;
    /**
     * The name of the asset.
     * @type {string}
     * @memberof AssetResponseParentAsset
     */
    name: string;
}
/**
 * The associated running status data input. isRunning will be true when the data input\'s value is 1.
 * @export
 * @interface AssetResponseRunningStatusDataInput
 */
export interface AssetResponseRunningStatusDataInput {
    /**
     * Id of the data input
     * @type {string}
     * @memberof AssetResponseRunningStatusDataInput
     */
    id: string;
}
/**
 * 
 * @export
 * @interface Attribute
 */
export interface Attribute {
    /**
     * Denotes the data type of the attribute\'s values.
     * @type {string}
     * @memberof Attribute
     */
    attributeType?: AttributeAttributeTypeEnum;
    /**
     * Defines whether or not this attribute can be used on the same entity many times (with different values).
     * @type {string}
     * @memberof Attribute
     */
    attributeValueQuantity?: AttributeAttributeValueQuantityEnum;
    /**
     * Denotes the type of entity, driver or aset.
     * @type {string}
     * @memberof Attribute
     */
    entityType?: AttributeEntityTypeEnum;
    /**
     * The samsara id of the attribute object.
     * @type {string}
     * @memberof Attribute
     */
    id?: string;
    /**
     * Name of attribute.
     * @type {string}
     * @memberof Attribute
     */
    name?: string;
    /**
     * Number values that can be associated with this attribute
     * @type {Array<number>}
     * @memberof Attribute
     */
    numberValues?: Array<number>;
    /**
     * String values that can be associated with this attribute
     * @type {Array<string>}
     * @memberof Attribute
     */
    stringValues?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum AttributeAttributeTypeEnum {
    String = 'string',
    Number = 'number'
}
/**
    * @export
    * @enum {string}
    */
export enum AttributeAttributeValueQuantityEnum {
    Single = 'single',
    Multi = 'multi'
}
/**
    * @export
    * @enum {string}
    */
export enum AttributeEntityTypeEnum {
    Driver = 'driver',
    Asset = 'asset'
}

/**
 * 
 * @export
 * @interface AttributeEntity
 */
export interface AttributeEntity {
    /**
     * 
     * @type {number}
     * @memberof AttributeEntity
     */
    entityId?: number;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof AttributeEntity
     */
    externalIds?: object;
    /**
     * 
     * @type {string}
     * @memberof AttributeEntity
     */
    name?: string;
    /**
     * Number values that are associated with this attribute.
     * @type {Array<number>}
     * @memberof AttributeEntity
     */
    numberValues?: Array<number>;
    /**
     * String values that are associated with this attribute.
     * @type {Array<string>}
     * @memberof AttributeEntity
     */
    stringValues?: Array<string>;
}
/**
 * 
 * @export
 * @interface AttributeExpanded
 */
export interface AttributeExpanded {
    /**
     * Denotes the data type of the attribute\'s values.
     * @type {string}
     * @memberof AttributeExpanded
     */
    attributeType?: AttributeExpandedAttributeTypeEnum;
    /**
     * Defines whether or not this attribute can be used on the same entity many times (with different values).
     * @type {string}
     * @memberof AttributeExpanded
     */
    attributeValueQuantity?: AttributeExpandedAttributeValueQuantityEnum;
    /**
     * Denotes the type of entity, driver or aset.
     * @type {string}
     * @memberof AttributeExpanded
     */
    entityType?: AttributeExpandedEntityTypeEnum;
    /**
     * The samsara id of the attribute object.
     * @type {string}
     * @memberof AttributeExpanded
     */
    id?: string;
    /**
     * Name of attribute.
     * @type {string}
     * @memberof AttributeExpanded
     */
    name?: string;
    /**
     * Number values that can be associated with this attribute
     * @type {Array<number>}
     * @memberof AttributeExpanded
     */
    numberValues?: Array<number>;
    /**
     * String values that can be associated with this attribute
     * @type {Array<string>}
     * @memberof AttributeExpanded
     */
    stringValues?: Array<string>;
    /**
     * Entities that this attribute is applied onto
     * @type {Array<AttributeEntity>}
     * @memberof AttributeExpanded
     */
    entities: Array<AttributeEntity>;
}

/**
    * @export
    * @enum {string}
    */
export enum AttributeExpandedAttributeTypeEnum {
    String = 'string',
    Number = 'number'
}
/**
    * @export
    * @enum {string}
    */
export enum AttributeExpandedAttributeValueQuantityEnum {
    Single = 'single',
    Multi = 'multi'
}
/**
    * @export
    * @enum {string}
    */
export enum AttributeExpandedEntityTypeEnum {
    Driver = 'driver',
    Asset = 'asset'
}

/**
 * 
 * @export
 * @interface AttributeExpandedAllOf
 */
export interface AttributeExpandedAllOf {
    /**
     * Entities that this attribute is applied onto
     * @type {Array<AttributeEntity>}
     * @memberof AttributeExpandedAllOf
     */
    entities: Array<AttributeEntity>;
}
/**
 * 
 * @export
 * @interface AttributeExpandedResponse
 */
export interface AttributeExpandedResponse {
    /**
     * 
     * @type {AttributeExpanded}
     * @memberof AttributeExpandedResponse
     */
    data?: AttributeExpanded;
}
/**
 * 
 * @export
 * @interface AttributeResponse
 */
export interface AttributeResponse {
    /**
     * 
     * @type {Attribute}
     * @memberof AttributeResponse
     */
    data?: Attribute;
}
/**
 * [beta] A minified attribute.
 * @export
 * @interface AttributeTiny
 */
export interface AttributeTiny {
    /**
     * The samsara id of the attribute object.
     * @type {string}
     * @memberof AttributeTiny
     */
    id?: string;
    /**
     * Name of attribute.
     * @type {string}
     * @memberof AttributeTiny
     */
    name?: string;
    /**
     * Number values that are associated with this attribute.
     * @type {Array<number>}
     * @memberof AttributeTiny
     */
    numberValues?: Array<number>;
    /**
     * String values that are associated with this attribute.
     * @type {Array<string>}
     * @memberof AttributeTiny
     */
    stringValues?: Array<string>;
}
/**
 * 
 * @export
 * @interface BarcodeValueObjectRequestBody
 */
export interface BarcodeValueObjectRequestBody {
    /**
     * The barcode type that was scanned.
     * @type {string}
     * @memberof BarcodeValueObjectRequestBody
     */
    barcodeType?: string;
    /**
     * The captured barcode value.
     * @type {string}
     * @memberof BarcodeValueObjectRequestBody
     */
    barcodeValue?: string;
}
/**
 * 
 * @export
 * @interface BarcodeValueObjectResponseBody
 */
export interface BarcodeValueObjectResponseBody {
    /**
     * The barcode type that was scanned.
     * @type {string}
     * @memberof BarcodeValueObjectResponseBody
     */
    barcodeType?: string;
    /**
     * The captured barcode value.
     * @type {string}
     * @memberof BarcodeValueObjectResponseBody
     */
    barcodeValue?: string;
}
/**
 * 
 * @export
 * @interface BaseRouteResponseObjectResponseBody
 */
export interface BaseRouteResponseObjectResponseBody {
    /**
     * Actual end time, if it exists, for the route in RFC 3339 format.
     * @type {string}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    actualRouteEndTime?: string;
    /**
     * Actual start time, if it exists, for the route in RFC 3339 format.
     * @type {string}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    actualRouteStartTime?: string;
    /**
     * 
     * @type {GoaDriverTinyResponseResponseBody}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    driver?: GoaDriverTinyResponseResponseBody;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the route
     * @type {string}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    id: string;
    /**
     * Route name
     * @type {string}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    name?: string;
    /**
     * Notes for the route
     * @type {string}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    notes?: string;
    /**
     * Scheduled end time, if it exists, for the route in RFC 3339 format.
     * @type {string}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    scheduledRouteEndTime?: string;
    /**
     * Scheduled start time, if it exists, for the route in RFC 3339 format.
     * @type {string}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    scheduledRouteStartTime?: string;
    /**
     * 
     * @type {RouteSettingsResponseBody}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    settings?: RouteSettingsResponseBody;
    /**
     * List of stops along the route
     * @type {Array<RoutesStopResponseObjectResponseBody>}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    stops?: Array<RoutesStopResponseObjectResponseBody>;
    /**
     * 
     * @type {GoaVehicleTinyResponseResponseBody}
     * @memberof BaseRouteResponseObjectResponseBody
     */
    vehicle?: GoaVehicleTinyResponseResponseBody;
}
/**
 * Bad Gateway
 * @export
 * @interface CameraMediaGetCameraMediaBadGatewayErrorResponseBody
 */
export interface CameraMediaGetCameraMediaBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface CameraMediaGetCameraMediaBadRequestErrorResponseBody
 */
export interface CameraMediaGetCameraMediaBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface CameraMediaGetCameraMediaGatewayTimeoutErrorResponseBody
 */
export interface CameraMediaGetCameraMediaGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface CameraMediaGetCameraMediaInternalServerErrorResponseBody
 */
export interface CameraMediaGetCameraMediaInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface CameraMediaGetCameraMediaMethodNotAllowedErrorResponseBody
 */
export interface CameraMediaGetCameraMediaMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface CameraMediaGetCameraMediaNotFoundErrorResponseBody
 */
export interface CameraMediaGetCameraMediaNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface CameraMediaGetCameraMediaNotImplementedErrorResponseBody
 */
export interface CameraMediaGetCameraMediaNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface CameraMediaGetCameraMediaResponseBody
 */
export interface CameraMediaGetCameraMediaResponseBody {
    /**
     * List of vehicle and their camera media.
     * @type {Array<VehicleCameraMediaObjectResponseBody>}
     * @memberof CameraMediaGetCameraMediaResponseBody
     */
    data: Array<VehicleCameraMediaObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof CameraMediaGetCameraMediaResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface CameraMediaGetCameraMediaServiceUnavailableErrorResponseBody
 */
export interface CameraMediaGetCameraMediaServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface CameraMediaGetCameraMediaTooManyRequestsErrorResponseBody
 */
export interface CameraMediaGetCameraMediaTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface CameraMediaGetCameraMediaUnauthorizedErrorResponseBody
 */
export interface CameraMediaGetCameraMediaUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof CameraMediaGetCameraMediaUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof CameraMediaGetCameraMediaUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface CameraObjectResponseBody
 */
export interface CameraObjectResponseBody {
    /**
     * ID of the camera.
     * @type {string}
     * @memberof CameraObjectResponseBody
     */
    id?: string;
    /**
     * List of image objects.
     * @type {Array<ImageObjectResponseBody>}
     * @memberof CameraObjectResponseBody
     */
    images?: Array<ImageObjectResponseBody>;
    /**
     * Name of the camera.
     * @type {string}
     * @memberof CameraObjectResponseBody
     */
    name?: string;
    /**
     * Serial of the camera.
     * @type {string}
     * @memberof CameraObjectResponseBody
     */
    serial?: string;
}
/**
 * A carrier proposed assignment object
 * @export
 * @interface CarrierProposedAssignment
 */
export interface CarrierProposedAssignment {
    /**
     * Time when the driver accepted this assignment in the mobile app. Will be omitted if the driver hasn\'t accepted this assignment. RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof CarrierProposedAssignment
     */
    acceptedTime?: string;
    /**
     * Time after which this assignment will be active and visible to the driver on the mobile app. Not setting it makes it active now. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof CarrierProposedAssignment
     */
    activeTime: string;
    /**
     * 
     * @type {CarrierProposedAssignmentDriver}
     * @memberof CarrierProposedAssignment
     */
    driver?: CarrierProposedAssignmentDriver;
    /**
     * Time when the driver first saw this assignment in the mobile app. Will be omitted if the driver hasn\'t seen this assignment yet. RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof CarrierProposedAssignment
     */
    firstSeenTime?: string;
    /**
     * Samsara ID for the assignment.
     * @type {string}
     * @memberof CarrierProposedAssignment
     */
    id: string;
    /**
     * Time when the driver rejected this assignment in the mobile app. Will be omitted if the driver hasn\'t rejected this assignment. RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof CarrierProposedAssignment
     */
    rejectedTime?: string;
    /**
     * Shipping Documents that this assignment will propose to the driver.
     * @type {string}
     * @memberof CarrierProposedAssignment
     */
    shippingDocs?: string;
    /**
     * Trailers that this assignment will propose to the driver.
     * @type {Array<TrailerNameOnlyResponse>}
     * @memberof CarrierProposedAssignment
     */
    trailers?: Array<TrailerNameOnlyResponse>;
    /**
     * 
     * @type {CarrierProposedAssignmentVehicle}
     * @memberof CarrierProposedAssignment
     */
    vehicle?: CarrierProposedAssignmentVehicle;
}
/**
 * 
 * @export
 * @interface CarrierProposedAssignmentDriver
 */
export interface CarrierProposedAssignmentDriver {
    /**
     * ID of the driver.
     * @type {string}
     * @memberof CarrierProposedAssignmentDriver
     */
    id?: string;
    /**
     * Name of the driver.
     * @type {string}
     * @memberof CarrierProposedAssignmentDriver
     */
    name?: string;
}
/**
 * A carrier-proposed assignment response object.
 * @export
 * @interface CarrierProposedAssignmentResponse
 */
export interface CarrierProposedAssignmentResponse {
    /**
     * 
     * @type {CarrierProposedAssignment}
     * @memberof CarrierProposedAssignmentResponse
     */
    data: CarrierProposedAssignment;
}
/**
 * 
 * @export
 * @interface CarrierProposedAssignmentVehicle
 */
export interface CarrierProposedAssignmentVehicle {
    /**
     * ID of the vehicle.
     * @type {string}
     * @memberof CarrierProposedAssignmentVehicle
     */
    id?: string;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof CarrierProposedAssignmentVehicle
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface ConditionalFieldSectionObjectResponseBody
 */
export interface ConditionalFieldSectionObjectResponseBody {
    /**
     * The index of the first conditional field associated with the triggeringFieldValue in the fieldTypes list.
     * @type {number}
     * @memberof ConditionalFieldSectionObjectResponseBody
     */
    conditionalFieldFirstIndex?: number;
    /**
     * The index of the last conditional field associated with the triggeringFieldValue in the fieldTypes list.
     * @type {number}
     * @memberof ConditionalFieldSectionObjectResponseBody
     */
    conditionalFieldLastIndex?: number;
    /**
     * The index of the multiple choice field in the fieldTypes list that triggers one or more conditional fields.
     * @type {number}
     * @memberof ConditionalFieldSectionObjectResponseBody
     */
    triggeringFieldIndex?: number;
    /**
     * The multiple choice option value that triggers the conditional fields.
     * @type {string}
     * @memberof ConditionalFieldSectionObjectResponseBody
     */
    triggeringFieldValue?: string;
}
/**
 * An objecting containing information about the connectivity status of the gateway
 * @export
 * @interface ConnectionStatusResponseObjectResponseBody
 */
export interface ConnectionStatusResponseObjectResponseBody {
    /**
     * The most recent health status of the gateway.
     * @type {string}
     * @memberof ConnectionStatusResponseObjectResponseBody
     */
    healthStatus?: ConnectionStatusResponseObjectResponseBodyHealthStatusEnum;
    /**
     * The last time the gateway was connected in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof ConnectionStatusResponseObjectResponseBody
     */
    lastConnected?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ConnectionStatusResponseObjectResponseBodyHealthStatusEnum {
    StatusNotSet = 'Status Not Set',
    Connected = 'Connected',
    NotInstalled = 'Not Installed',
    PowerSourceOffActiveVehicle = 'Power Source Off - Active Vehicle',
    PowerSourceOffInactiveVehicle = 'Power Source Off - Inactive Vehicle',
    WeakCellularSignal = 'Weak Cellular Signal',
    RequiresInvestigation = 'Requires Investigation',
    RequiresCharge = 'Requires Charge',
    UnsupportedProduct = 'Unsupported Product',
    LowBatteryReplaceDevice = 'Low Battery. Replace Device.',
    LowVehicleBattery = 'Low Vehicle Battery',
    Unplugged = 'Unplugged',
    LowChargingState = 'Low Charging State',
    VehicleOff = 'Vehicle Off',
    WeakGpsSignal = 'Weak GPS Signal',
    LowGatewayBattery = 'Low Gateway Battery',
    LowGatewayBatteryAg24 = 'Low Gateway Battery (AG24)',
    LowGatewayBatteryAg45 = 'Low Gateway Battery (AG45)',
    LowGatewayBatteryAg26 = 'Low Gateway Battery (AG26)',
    LowGatewayBatteryAg46 = 'Low Gateway Battery (AG46)',
    LowGatewayBatteryAg46P = 'Low Gateway Battery (AG46-P)',
    TemporarilyOffline = 'Temporarily Offline',
    ProlongedOffline = 'Prolonged Offline',
    RecentlyOffline = 'Recently Offline',
    ReplacementRequired = 'Replacement Required',
    StatusUnknown = 'Status Unknown'
}

/**
 * Information about a notification contact for alerts.
 * @export
 * @interface Contact
 */
export interface Contact {
    /**
     * Email address of the contact.
     * @type {string}
     * @memberof Contact
     */
    email: string;
    /**
     * First name of the contact.
     * @type {string}
     * @memberof Contact
     */
    firstName: string;
    /**
     * ID of the contact.
     * @type {string}
     * @memberof Contact
     */
    id: string;
    /**
     * Last name of the contact.
     * @type {string}
     * @memberof Contact
     */
    lastName: string;
    /**
     * Phone number of the contact.
     * @type {string}
     * @memberof Contact
     */
    phone: string;
}
/**
 * A single contact.
 * @export
 * @interface ContactResponse
 */
export interface ContactResponse {
    /**
     * 
     * @type {Contact}
     * @memberof ContactResponse
     */
    data?: Contact;
}
/**
 * A minified contact object
 * @export
 * @interface ContactTinyResponse
 */
export interface ContactTinyResponse {
    /**
     * First name of the contact.
     * @type {string}
     * @memberof ContactTinyResponse
     */
    firstName?: string;
    /**
     * ID of the contact.
     * @type {string}
     * @memberof ContactTinyResponse
     */
    id?: string;
    /**
     * Last name of the contact.
     * @type {string}
     * @memberof ContactTinyResponse
     */
    lastName?: string;
}
/**
 * A request body to create an Address.
 * @export
 * @interface CreateAddressRequest
 */
export interface CreateAddressRequest {
    /**
     * Reporting location type associated with the address (used for ELD reporting purposes).
     * @type {Array<string>}
     * @memberof CreateAddressRequest
     */
    addressTypes?: Array<CreateAddressRequestAddressTypesEnum>;
    /**
     * An array of Contact IDs associated with this Address.
     * @type {Array<string>}
     * @memberof CreateAddressRequest
     */
    contactIds?: Array<string>;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof CreateAddressRequest
     */
    externalIds?: { [key: string]: string; };
    /**
     * The full street address for this address/geofence, as it might be recognized by Google Maps.
     * @type {string}
     * @memberof CreateAddressRequest
     */
    formattedAddress: string;
    /**
     * 
     * @type {CreateAddressRequestGeofence}
     * @memberof CreateAddressRequest
     */
    geofence: CreateAddressRequestGeofence;
    /**
     * Latitude of the address. Will be geocoded from `formattedAddress` if not provided.
     * @type {number}
     * @memberof CreateAddressRequest
     */
    latitude?: number;
    /**
     * Longitude of the address. Will be geocoded from `formattedAddress` if not provided.
     * @type {number}
     * @memberof CreateAddressRequest
     */
    longitude?: number;
    /**
     * Name of the address.
     * @type {string}
     * @memberof CreateAddressRequest
     */
    name: string;
    /**
     * Notes about the address.
     * @type {string}
     * @memberof CreateAddressRequest
     */
    notes?: string;
    /**
     * An array of IDs of tags to associate with this address.
     * @type {Array<string>}
     * @memberof CreateAddressRequest
     */
    tagIds?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateAddressRequestAddressTypesEnum {
    Yard = 'yard',
    ShortHaul = 'shortHaul',
    WorkforceSite = 'workforceSite'
}

/**
 * The geofence that defines this address and its bounds. This can either be a circle or a polygon, but not both.
 * @export
 * @interface CreateAddressRequestGeofence
 */
export interface CreateAddressRequestGeofence {
    /**
     * 
     * @type {AddressGeofenceCircle}
     * @memberof CreateAddressRequestGeofence
     */
    circle?: AddressGeofenceCircle;
    /**
     * 
     * @type {AddressGeofencePolygon}
     * @memberof CreateAddressRequestGeofence
     */
    polygon?: AddressGeofencePolygon;
}
/**
 * A request body to create an Attribute.
 * @export
 * @interface CreateAttributeRequest
 */
export interface CreateAttributeRequest {
    /**
     * Denotes the data type of the attribute\'s values.
     * @type {string}
     * @memberof CreateAttributeRequest
     */
    attributeType: CreateAttributeRequestAttributeTypeEnum;
    /**
     * Defines whether or not this attribute can be used on the same entity many times (with different values).
     * @type {string}
     * @memberof CreateAttributeRequest
     */
    attributeValueQuantity: CreateAttributeRequestAttributeValueQuantityEnum;
    /**
     * Entities that will be applied to this attribute
     * @type {Array<CreateAttributeRequestEntities>}
     * @memberof CreateAttributeRequest
     */
    entities?: Array<CreateAttributeRequestEntities>;
    /**
     * Denotes the type of entity, driver or asset.
     * @type {string}
     * @memberof CreateAttributeRequest
     */
    entityType: CreateAttributeRequestEntityTypeEnum;
    /**
     * Name
     * @type {string}
     * @memberof CreateAttributeRequest
     */
    name: string;
    /**
     * Number values that can be associated with this attribute
     * @type {Array<number>}
     * @memberof CreateAttributeRequest
     */
    numberValues?: Array<number>;
    /**
     * String values that can be associated with this attribute
     * @type {Array<string>}
     * @memberof CreateAttributeRequest
     */
    stringValues?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateAttributeRequestAttributeTypeEnum {
    String = 'string',
    Number = 'number'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateAttributeRequestAttributeValueQuantityEnum {
    Single = 'single',
    Multi = 'multi'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateAttributeRequestEntityTypeEnum {
    Driver = 'driver',
    Asset = 'asset'
}

/**
 * 
 * @export
 * @interface CreateAttributeRequestEntities
 */
export interface CreateAttributeRequestEntities {
    /**
     * Entity id, based on the entity type.
     * @type {string}
     * @memberof CreateAttributeRequestEntities
     */
    entityId?: string;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof CreateAttributeRequestEntities
     */
    externalIds?: { [key: string]: string; };
    /**
     * Number values that can be associated with this attribute
     * @type {Array<number>}
     * @memberof CreateAttributeRequestEntities
     */
    numberValues?: Array<number>;
    /**
     * String values that can be associated with this attribute
     * @type {Array<string>}
     * @memberof CreateAttributeRequestEntities
     */
    stringValues?: Array<string>;
}
/**
 * New assignment for a driver.
 * @export
 * @interface CreateCarrierProposedAssignmentRequest
 */
export interface CreateCarrierProposedAssignmentRequest {
    /**
     * Time after which this assignment will be active and visible to the driver on the mobile app. Not setting it makes it active now. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof CreateCarrierProposedAssignmentRequest
     */
    activeTime?: string;
    /**
     * Samsara ID for the driver that this assignment is for.
     * @type {string}
     * @memberof CreateCarrierProposedAssignmentRequest
     */
    driverId: string;
    /**
     * Shipping Documents that this assignment will propose to the driver.
     * @type {string}
     * @memberof CreateCarrierProposedAssignmentRequest
     */
    shippingDocs?: string;
    /**
     * Names of trailers to propose.
     * @type {Array<string>}
     * @memberof CreateCarrierProposedAssignmentRequest
     */
    trailerNames?: Array<string>;
    /**
     * Samsara ID for the vehicle to propose.
     * @type {string}
     * @memberof CreateCarrierProposedAssignmentRequest
     */
    vehicleId: string;
}
/**
 * Information for adding a notification contact for alerts.
 * @export
 * @interface CreateContactRequest
 */
export interface CreateContactRequest {
    /**
     * Email address of the contact.
     * @type {string}
     * @memberof CreateContactRequest
     */
    email?: string;
    /**
     * First name of the contact.
     * @type {string}
     * @memberof CreateContactRequest
     */
    firstName?: string;
    /**
     * Last name of the contact.
     * @type {string}
     * @memberof CreateContactRequest
     */
    lastName?: string;
    /**
     * Phone number of the contact.
     * @type {string}
     * @memberof CreateContactRequest
     */
    phone?: string;
}
/**
 * Driver that should be created.
 * @export
 * @interface CreateDriverRequest
 */
export interface CreateDriverRequest {
    /**
     * 
     * @type {Array<CreateDriverRequestAttributes>}
     * @memberof CreateDriverRequest
     */
    attributes?: Array<CreateDriverRequestAttributes>;
    /**
     * 
     * @type {CreateDriverRequestCarrierSettings}
     * @memberof CreateDriverRequest
     */
    carrierSettings?: CreateDriverRequestCarrierSettings;
    /**
     * The ID Card Code on the back of the physical card assigned to the driver.  Contact Samsara if you would like to enable this feature.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    currentIdCardCode?: string;
    /**
     * Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     * @type {boolean}
     * @memberof CreateDriverRequest
     */
    eldAdverseWeatherExemptionEnabled?: boolean;
    /**
     * Flag indicating this driver may use Big Day exemption in ELD logs.
     * @type {boolean}
     * @memberof CreateDriverRequest
     */
    eldBigDayExemptionEnabled?: boolean;
    /**
     * `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
     * @type {number}
     * @memberof CreateDriverRequest
     */
    eldDayStartHour?: number;
    /**
     * Flag indicating this driver is exempt from the Electronic Logging Mandate.
     * @type {boolean}
     * @memberof CreateDriverRequest
     */
    eldExempt?: boolean;
    /**
     * Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     * @type {string}
     * @memberof CreateDriverRequest
     */
    eldExemptReason?: string;
    /**
     * Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     * @type {boolean}
     * @memberof CreateDriverRequest
     */
    eldPcEnabled?: boolean;
    /**
     * Flag indicating this driver may select the Yard Move duty status in ELD logs.
     * @type {boolean}
     * @memberof CreateDriverRequest
     */
    eldYmEnabled?: boolean;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof CreateDriverRequest
     */
    externalIds?: { [key: string]: string; };
    /**
     * Driver\'s state issued license number. The combination of this number and `licenseState` must be unique.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    licenseNumber?: string;
    /**
     * Abbreviation of US state, Canadian province, or US territory that issued driver\'s license.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    licenseState?: string;
    /**
     * Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    locale?: CreateDriverRequestLocaleEnum;
    /**
     * Driver\'s name.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    name: string;
    /**
     * Notes about the driver.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    notes?: string;
    /**
     * Password that the driver can use to login to the Samsara driver app.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    password: string;
    /**
     * Phone number of the driver.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    phone?: string;
    /**
     * ID of vehicle that the driver is permanently assigned to. (uncommon).
     * @type {string}
     * @memberof CreateDriverRequest
     */
    staticAssignedVehicleId?: string;
    /**
     * Driver\'s assigned tachograph card number (Europe specific)
     * @type {string}
     * @memberof CreateDriverRequest
     */
    tachographCardNumber?: string;
    /**
     * IDs of tags the driver is associated with.
     * @type {Array<string>}
     * @memberof CreateDriverRequest
     */
    tagIds?: Array<string>;
    /**
     * Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
     * @type {string}
     * @memberof CreateDriverRequest
     */
    timezone?: string;
    /**
     * Driver\'s login username into the driver app. The username may not contain spaces or the \'@\' symbol. The username must be unique.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    username: string;
    /**
     * Tag ID which determines which vehicles a driver will see when selecting vehicles.
     * @type {string}
     * @memberof CreateDriverRequest
     */
    vehicleGroupTagId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateDriverRequestLocaleEnum {
    Us = 'us',
    At = 'at',
    Be = 'be',
    Ca = 'ca',
    Gb = 'gb',
    Fr = 'fr',
    De = 'de',
    Ie = 'ie',
    It = 'it',
    Lu = 'lu',
    Mx = 'mx',
    Nl = 'nl',
    Es = 'es',
    Ch = 'ch',
    Pr = 'pr'
}

/**
 * A minified attribute.
 * @export
 * @interface CreateDriverRequestAttributes
 */
export interface CreateDriverRequestAttributes {
    /**
     * The samsara id of the attribute object.
     * @type {string}
     * @memberof CreateDriverRequestAttributes
     */
    id?: string;
    /**
     * Name of attribute.
     * @type {string}
     * @memberof CreateDriverRequestAttributes
     */
    name?: string;
    /**
     * Number values that are associated with this attribute.
     * @type {Array<number>}
     * @memberof CreateDriverRequestAttributes
     */
    numberValues?: Array<number>;
    /**
     * String values that are associated with this attribute.
     * @type {Array<string>}
     * @memberof CreateDriverRequestAttributes
     */
    stringValues?: Array<string>;
}
/**
 * Carrier for a given driver. If the driver\'s carrier differs from the general organization\'s carrier settings, the override value is used. Updating this value only updates the override setting for this driver.
 * @export
 * @interface CreateDriverRequestCarrierSettings
 */
export interface CreateDriverRequestCarrierSettings {
    /**
     * Carrier for a given driver.
     * @type {string}
     * @memberof CreateDriverRequestCarrierSettings
     */
    carrierName?: string;
    /**
     * Carrier US DOT Number. If this differs from the general organization\'s settings, the override value is used. Updating this value only updates the override setting for this driver.
     * @type {number}
     * @memberof CreateDriverRequestCarrierSettings
     */
    dotNumber?: number;
    /**
     * Main office address for a given driver. If this differs from the general organization\'s settings, the override value is used. 
     * @type {string}
     * @memberof CreateDriverRequestCarrierSettings
     */
    mainOfficeAddress?: string;
}
/**
 * DVIR creation body
 * @export
 * @interface CreateDvirRequest
 */
export interface CreateDvirRequest {
    /**
     * Samsara user ID of the mechanic creating the DVIR.
     * @type {string}
     * @memberof CreateDvirRequest
     */
    authorId: string;
    /**
     * The license plate of this vehicle.
     * @type {string}
     * @memberof CreateDvirRequest
     */
    licensePlate?: string;
    /**
     * Optional string if your jurisdiction requires a location of the DVIR.
     * @type {string}
     * @memberof CreateDvirRequest
     */
    location?: string;
    /**
     * The mechanics notes on the DVIR.
     * @type {string}
     * @memberof CreateDvirRequest
     */
    mechanicNotes?: string;
    /**
     * The odometer reading in meters.
     * @type {number}
     * @memberof CreateDvirRequest
     */
    odometerMeters?: number;
    /**
     * Array of ids for defects being resolved with this DVIR.
     * @type {Array<string>}
     * @memberof CreateDvirRequest
     */
    resolvedDefectIds?: Array<string>;
    /**
     * Whether or not this vehicle or trailer is safe to drive.
     * @type {string}
     * @memberof CreateDvirRequest
     */
    safetyStatus: CreateDvirRequestSafetyStatusEnum;
    /**
     * Id of trailer being inspected. Either vehicleId or trailerId must be provided.
     * @type {string}
     * @memberof CreateDvirRequest
     */
    trailerId?: string;
    /**
     * Only type \'mechanic\' is currently accepted.
     * @type {string}
     * @memberof CreateDvirRequest
     */
    type: CreateDvirRequestTypeEnum;
    /**
     * Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
     * @type {string}
     * @memberof CreateDvirRequest
     */
    vehicleId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateDvirRequestSafetyStatusEnum {
    Safe = 'safe',
    Unsafe = 'unsafe'
}
/**
    * @export
    * @enum {string}
    */
export enum CreateDvirRequestTypeEnum {
    Mechanic = 'mechanic'
}

/**
 * 
 * @export
 * @interface CreateRoutesStopRequestObjectRequestBody
 */
export interface CreateRoutesStopRequestObjectRequestBody {
    /**
     * ID of the address. An address [externalId](https://developers.samsara.com/docs/external-ids#using-external-ids) can also be used interchangeably here.
     * @type {string}
     * @memberof CreateRoutesStopRequestObjectRequestBody
     */
    addressId?: string;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof CreateRoutesStopRequestObjectRequestBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * Name of the stop
     * @type {string}
     * @memberof CreateRoutesStopRequestObjectRequestBody
     */
    name?: string;
    /**
     * Notes for the stop
     * @type {string}
     * @memberof CreateRoutesStopRequestObjectRequestBody
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoutesStopRequestObjectRequestBody
     */
    scheduledArrivalTime?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRoutesStopRequestObjectRequestBody
     */
    scheduledDepartureTime?: string;
    /**
     * 
     * @type {RoutesSingleUseAddressObjectRequestBody}
     * @memberof CreateRoutesStopRequestObjectRequestBody
     */
    singleUseLocation?: RoutesSingleUseAddressObjectRequestBody;
}
/**
 * 
 * @export
 * @interface CreateTagRequest
 */
export interface CreateTagRequest {
    /**
     * The addresses that belong to this tag.
     * @type {Array<string>}
     * @memberof CreateTagRequest
     */
    addresses?: Array<string>;
    /**
     * The trailers, unpowered, and powered assets that belong to this tag.
     * @type {Array<string>}
     * @memberof CreateTagRequest
     */
    assets?: Array<string>;
    /**
     * The drivers that belong to this tag.
     * @type {Array<string>}
     * @memberof CreateTagRequest
     */
    drivers?: Array<string>;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof CreateTagRequest
     */
    externalIds?: { [key: string]: string; };
    /**
     * The machines that belong to this tag.
     * @type {Array<string>}
     * @memberof CreateTagRequest
     */
    machines?: Array<string>;
    /**
     * Name of this tag.
     * @type {string}
     * @memberof CreateTagRequest
     */
    name: string;
    /**
     * If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
     * @type {string}
     * @memberof CreateTagRequest
     */
    parentTagId?: string;
    /**
     * The sensors that belong to this tag.
     * @type {Array<string>}
     * @memberof CreateTagRequest
     */
    sensors?: Array<string>;
    /**
     * The vehicles that belong to this tag.
     * @type {Array<string>}
     * @memberof CreateTagRequest
     */
    vehicles?: Array<string>;
}
/**
 * The user creation arguments
 * @export
 * @interface CreateUserRequest
 */
export interface CreateUserRequest {
    /**
     * The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.
     * @type {string}
     * @memberof CreateUserRequest
     */
    authType: CreateUserRequestAuthTypeEnum;
    /**
     * The email address of this user.
     * @type {string}
     * @memberof CreateUserRequest
     */
    email: string;
    /**
     * The first and last name of the user.
     * @type {string}
     * @memberof CreateUserRequest
     */
    name: string;
    /**
     * The list of roles that applies to this user. A user may have \"organizational\" roles, which apply to the user at the organizational level, and \"tag-specific\" roles, which apply to the user for a given tag.
     * @type {Array<CreateUserRequestRoles>}
     * @memberof CreateUserRequest
     */
    roles: Array<CreateUserRequestRoles>;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateUserRequestAuthTypeEnum {
    Default = 'default',
    Saml = 'saml'
}

/**
 * A role that applies to a user. If the role has a `tagId`, then the role applies for that tag. If there is no `tagId`, then the role applies at the organizational level. A user may have many tag-specific roles, but may only have one organizational role. If the organizational level role has higher privileges than a tag-specific role, then the organizational role privileges will take precedence.
 * @export
 * @interface CreateUserRequestRoles
 */
export interface CreateUserRequestRoles {
    /**
     * The unique ID for the role.
     * @type {string}
     * @memberof CreateUserRequestRoles
     */
    roleId: string;
    /**
     * ID of the tag this role applies to.
     * @type {string}
     * @memberof CreateUserRequestRoles
     */
    tagId?: string;
}
/**
 * The current HOS status type and time the driver started being in this status.
 * @export
 * @interface CurrentDutyStatus
 */
export interface CurrentDutyStatus {
    /**
     * The Hours of Service status type.
     * @type {string}
     * @memberof CurrentDutyStatus
     */
    hosStatusType?: CurrentDutyStatusHosStatusTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum CurrentDutyStatusHosStatusTypeEnum {
    OffDuty = 'offDuty',
    SleeperBed = 'sleeperBed',
    Driving = 'driving',
    OnDuty = 'onDuty',
    YardMove = 'yardMove',
    PersonalConveyance = 'personalConveyance'
}

/**
 * 
 * @export
 * @interface DataInputListResponse
 */
export interface DataInputListResponse {
    /**
     * An array of data input data points. Each object in the array represents a data input and will contain its associated data points.
     * @type {Array<DataInputResponse>}
     * @memberof DataInputListResponse
     */
    data?: Array<DataInputResponse>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof DataInputListResponse
     */
    pagination?: PaginationResponse;
}
/**
 * 
 * @export
 * @interface DataInputResponse
 */
export interface DataInputResponse {
    /**
     * Unique identifier for the data input\'s asset.
     * @type {string}
     * @memberof DataInputResponse
     */
    assetId?: string;
    /**
     * Data group for this data input.
     * @type {string}
     * @memberof DataInputResponse
     */
    dataGroup?: string;
    /**
     * Unique identifier for the data input.
     * @type {string}
     * @memberof DataInputResponse
     */
    id?: string;
    /**
     * Name of this data input.
     * @type {string}
     * @memberof DataInputResponse
     */
    name?: string;
    /**
     * Units of data for this data input.
     * @type {string}
     * @memberof DataInputResponse
     */
    units?: string;
    /**
     * List of FFT spectra data points from the data input.
     * @type {Array<FftSpectraDataPoint>}
     * @memberof DataInputResponse
     */
    fftSpectraPoints?: Array<FftSpectraDataPoint>;
    /**
     * List of active J1939D1 statuses.
     * @type {Array<J1939D1StatusDataPoint>}
     * @memberof DataInputResponse
     */
    j1939D1StatusPoints?: Array<J1939D1StatusDataPoint>;
    /**
     * List of location data points from the data input.
     * @type {Array<LocationDataPoint>}
     * @memberof DataInputResponse
     */
    locationPoints?: Array<LocationDataPoint>;
    /**
     * List of numeric data points from the data input.
     * @type {Array<NumberDataPoint>}
     * @memberof DataInputResponse
     */
    numberPoints?: Array<NumberDataPoint>;
    /**
     * List of string data points from the data input.
     * @type {Array<StringDataPoint>}
     * @memberof DataInputResponse
     */
    stringPoints?: Array<StringDataPoint>;
}
/**
 * 
 * @export
 * @interface DataInputResponseAllOf
 */
export interface DataInputResponseAllOf {
    /**
     * List of FFT spectra data points from the data input.
     * @type {Array<FftSpectraDataPoint>}
     * @memberof DataInputResponseAllOf
     */
    fftSpectraPoints?: Array<FftSpectraDataPoint>;
    /**
     * List of active J1939D1 statuses.
     * @type {Array<J1939D1StatusDataPoint>}
     * @memberof DataInputResponseAllOf
     */
    j1939D1StatusPoints?: Array<J1939D1StatusDataPoint>;
    /**
     * List of location data points from the data input.
     * @type {Array<LocationDataPoint>}
     * @memberof DataInputResponseAllOf
     */
    locationPoints?: Array<LocationDataPoint>;
    /**
     * List of numeric data points from the data input.
     * @type {Array<NumberDataPoint>}
     * @memberof DataInputResponseAllOf
     */
    numberPoints?: Array<NumberDataPoint>;
    /**
     * List of string data points from the data input.
     * @type {Array<StringDataPoint>}
     * @memberof DataInputResponseAllOf
     */
    stringPoints?: Array<StringDataPoint>;
}
/**
 * 
 * @export
 * @interface DataInputSnapshot
 */
export interface DataInputSnapshot {
    /**
     * Unique identifier for the data input\'s asset.
     * @type {string}
     * @memberof DataInputSnapshot
     */
    assetId?: string;
    /**
     * Data group for this data input.
     * @type {string}
     * @memberof DataInputSnapshot
     */
    dataGroup?: string;
    /**
     * Unique identifier for the data input.
     * @type {string}
     * @memberof DataInputSnapshot
     */
    id?: string;
    /**
     * Name of this data input.
     * @type {string}
     * @memberof DataInputSnapshot
     */
    name?: string;
    /**
     * Units of data for this data input.
     * @type {string}
     * @memberof DataInputSnapshot
     */
    units?: string;
    /**
     * 
     * @type {FftSpectraDataPoint}
     * @memberof DataInputSnapshot
     */
    fftSpectraPoint?: FftSpectraDataPoint;
    /**
     * 
     * @type {J1939D1StatusDataPoint}
     * @memberof DataInputSnapshot
     */
    j1939D1StatusPoint?: J1939D1StatusDataPoint;
    /**
     * 
     * @type {LocationDataPoint}
     * @memberof DataInputSnapshot
     */
    locationPoint?: LocationDataPoint;
    /**
     * 
     * @type {NumberDataPoint}
     * @memberof DataInputSnapshot
     */
    numberPoint?: NumberDataPoint;
    /**
     * 
     * @type {StringDataPoint}
     * @memberof DataInputSnapshot
     */
    stringPoint?: StringDataPoint;
}
/**
 * 
 * @export
 * @interface DataInputSnapshotAllOf
 */
export interface DataInputSnapshotAllOf {
    /**
     * 
     * @type {FftSpectraDataPoint}
     * @memberof DataInputSnapshotAllOf
     */
    fftSpectraPoint?: FftSpectraDataPoint;
    /**
     * 
     * @type {J1939D1StatusDataPoint}
     * @memberof DataInputSnapshotAllOf
     */
    j1939D1StatusPoint?: J1939D1StatusDataPoint;
    /**
     * 
     * @type {LocationDataPoint}
     * @memberof DataInputSnapshotAllOf
     */
    locationPoint?: LocationDataPoint;
    /**
     * 
     * @type {NumberDataPoint}
     * @memberof DataInputSnapshotAllOf
     */
    numberPoint?: NumberDataPoint;
    /**
     * 
     * @type {StringDataPoint}
     * @memberof DataInputSnapshotAllOf
     */
    stringPoint?: StringDataPoint;
}
/**
 * 
 * @export
 * @interface DataInputSnapshotResponse
 */
export interface DataInputSnapshotResponse {
    /**
     * An array of data inputs\' latest data points. Each object in the array represents a data input and its most recent data point.
     * @type {Array<DataInputSnapshot>}
     * @memberof DataInputSnapshotResponse
     */
    data?: Array<DataInputSnapshot>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof DataInputSnapshotResponse
     */
    pagination?: PaginationResponse;
}
/**
 * A minified data input object
 * @export
 * @interface DataInputTinyResponse
 */
export interface DataInputTinyResponse {
    /**
     * Unique identifier for the data input\'s asset.
     * @type {string}
     * @memberof DataInputTinyResponse
     */
    assetId?: string;
    /**
     * Data group for this data input.
     * @type {string}
     * @memberof DataInputTinyResponse
     */
    dataGroup?: string;
    /**
     * Unique identifier for the data input.
     * @type {string}
     * @memberof DataInputTinyResponse
     */
    id?: string;
    /**
     * Name of this data input.
     * @type {string}
     * @memberof DataInputTinyResponse
     */
    name?: string;
    /**
     * Units of data for this data input.
     * @type {string}
     * @memberof DataInputTinyResponse
     */
    units?: string;
}
/**
 * 
 * @export
 * @interface DataInputsTinyResponse
 */
export interface DataInputsTinyResponse {
    /**
     * An array of data input objects. Each object contains the data input\'s name, ID, and other metadata.
     * @type {Array<DataInputTinyResponse>}
     * @memberof DataInputsTinyResponse
     */
    data?: Array<DataInputTinyResponse>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof DataInputsTinyResponse
     */
    pagination?: PaginationResponse;
}
/**
 * The value of a date time field. Only present for date time fields.
 * @export
 * @interface DateTimeValueObjectRequestBody
 */
export interface DateTimeValueObjectRequestBody {
    /**
     * Date time value inin RFC 3339 format.
     * @type {string}
     * @memberof DateTimeValueObjectRequestBody
     */
    dateTime?: string;
}
/**
 * The value of a date time field. Only present for date time fields.
 * @export
 * @interface DateTimeValueObjectResponseBody
 */
export interface DateTimeValueObjectResponseBody {
    /**
     * Date time value inin RFC 3339 format.
     * @type {string}
     * @memberof DateTimeValueObjectResponseBody
     */
    dateTime?: string;
}
/**
 * 
 * @export
 * @interface Defect
 */
export interface Defect {
    /**
     * Comment on the defect.
     * @type {string}
     * @memberof Defect
     */
    comment?: string;
    /**
     * Time when the defect was created. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof Defect
     */
    createdAtTime?: string;
    /**
     * The type of DVIR defect.
     * @type {string}
     * @memberof Defect
     */
    defectType?: string;
    /**
     * ID of the defect.
     * @type {string}
     * @memberof Defect
     */
    id: string;
    /**
     * Signifies if this defect is resolved.
     * @type {boolean}
     * @memberof Defect
     */
    isResolved: boolean;
    /**
     * The mechanics notes on the defect.
     * @type {string}
     * @memberof Defect
     */
    mechanicNotes?: string;
    /**
     * Time when mechanic notes were last updated. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof Defect
     */
    mechanicNotesUpdatedAtTime?: string;
    /**
     * Time when this defect was resolved. Will not be returned if the defect is unresolved. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof Defect
     */
    resolvedAtTime?: string;
    /**
     * 
     * @type {DefectResolvedBy}
     * @memberof Defect
     */
    resolvedBy?: DefectResolvedBy;
    /**
     * 
     * @type {object & TrailerTinyResponse}
     * @memberof Defect
     */
    trailer?: object & TrailerTinyResponse;
    /**
     * 
     * @type {object & VehicleTinyResponse}
     * @memberof Defect
     */
    vehicle?: object & VehicleTinyResponse;
}
/**
 * Information about resolving a defect. If resolving a defect, must specify `isResolved` as `true` and `resolvedBy`.
 * @export
 * @interface DefectPatch
 */
export interface DefectPatch {
    /**
     * Resolves the defect. Must be `true`.
     * @type {boolean}
     * @memberof DefectPatch
     */
    isResolved?: boolean;
    /**
     * The mechanics notes on the defect.
     * @type {string}
     * @memberof DefectPatch
     */
    mechanicNotes?: string;
    /**
     * Time when defect was resolved. Defaults to now if not provided. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof DefectPatch
     */
    resolvedAtTime?: string;
    /**
     * 
     * @type {ResolvedBy}
     * @memberof DefectPatch
     */
    resolvedBy?: ResolvedBy;
}
/**
 * The person who resolved this defect.  Will not be returned if the defect is unresolved.
 * @export
 * @interface DefectResolvedBy
 */
export interface DefectResolvedBy {
    /**
     * ID of the entity that resolved this defect. If the defect was resolved by a driver, this will be a Samsara Driver ID. If the defect was resolved by a mechanic, this will be the Samsara Dashboard User ID of the mechanic.
     * @type {string}
     * @memberof DefectResolvedBy
     */
    id?: string;
    /**
     * Name of the person who resolved this defect.
     * @type {string}
     * @memberof DefectResolvedBy
     */
    name?: string;
    /**
     * Indicates whether this defect was resolved by a `driver` or a `mechanic`.
     * @type {string}
     * @memberof DefectResolvedBy
     */
    type?: DefectResolvedByTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DefectResolvedByTypeEnum {
    Driver = 'driver',
    Mechanic = 'mechanic'
}

/**
 * A single defect.
 * @export
 * @interface DefectResponse
 */
export interface DefectResponse {
    /**
     * 
     * @type {Defect}
     * @memberof DefectResponse
     */
    data?: Defect;
}
/**
 * A list of defects.
 * @export
 * @interface DefectsResponse
 */
export interface DefectsResponse {
    /**
     * 
     * @type {Array<Defect>}
     * @memberof DefectsResponse
     */
    data?: Array<Defect>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof DefectsResponse
     */
    pagination?: PaginationResponse;
}
/**
 * The distance traveled information of the log.
 * @export
 * @interface DistanceTraveledObjectResponseBody
 */
export interface DistanceTraveledObjectResponseBody {
    /**
     * Distance driven in meters, rounded to two decimal places.
     * @type {number}
     * @memberof DistanceTraveledObjectResponseBody
     */
    driveDistanceMeters?: number;
    /**
     * Distance driven for personal conveyance, rounded to two decimal places.
     * @type {number}
     * @memberof DistanceTraveledObjectResponseBody
     */
    personalConveyanceDistanceMeters?: number;
    /**
     * Distance driven for yard moves, rounded to two decimal places.
     * @type {number}
     * @memberof DistanceTraveledObjectResponseBody
     */
    yardMoveDistanceMeters?: number;
}
/**
 * Identifies a document for PDF generation.
 * @export
 * @interface DocumentPdfGenerationRequest
 */
export interface DocumentPdfGenerationRequest {
    /**
     * ID of the document.
     * @type {string}
     * @memberof DocumentPdfGenerationRequest
     */
    documentId: string;
}
/**
 * Identifies a PDF generation job.
 * @export
 * @interface DocumentPdfGenerationResponse
 */
export interface DocumentPdfGenerationResponse {
    /**
     * 
     * @type {DocumentPdfGenerationResponseData}
     * @memberof DocumentPdfGenerationResponse
     */
    data?: DocumentPdfGenerationResponseData;
}
/**
 * 
 * @export
 * @interface DocumentPdfGenerationResponseData
 */
export interface DocumentPdfGenerationResponseData {
    /**
     * ID of the document.
     * @type {string}
     * @memberof DocumentPdfGenerationResponseData
     */
    documentId?: string;
    /**
     * ID of the PDF file generated or being generated for the document.
     * @type {string}
     * @memberof DocumentPdfGenerationResponseData
     */
    id?: string;
}
/**
 * A PDF of a document
 * @export
 * @interface DocumentPdfQueryResponse
 */
export interface DocumentPdfQueryResponse {
    /**
     * 
     * @type {DocumentPdfQueryResponseData}
     * @memberof DocumentPdfQueryResponse
     */
    data?: DocumentPdfQueryResponseData;
}
/**
 * 
 * @export
 * @interface DocumentPdfQueryResponseData
 */
export interface DocumentPdfQueryResponseData {
    /**
     * Time that PDF generation was completed, in RFC 3339 format.
     * @type {string}
     * @memberof DocumentPdfQueryResponseData
     */
    completedAtTime?: string;
    /**
     * ID of the document.
     * @type {string}
     * @memberof DocumentPdfQueryResponseData
     */
    documentId?: string;
    /**
     * S3 pre-signed URL to download PDF file.
     * @type {string}
     * @memberof DocumentPdfQueryResponseData
     */
    downloadDocumentPdfUrl?: string;
    /**
     * ID of the PDF file generated or being generated for the document
     * @type {string}
     * @memberof DocumentPdfQueryResponseData
     */
    id?: string;
    /**
     * Describes status of the PDF generation job.
     * @type {string}
     * @memberof DocumentPdfQueryResponseData
     */
    jobStatus?: DocumentPdfQueryResponseDataJobStatusEnum;
    /**
     * Time that PDF generation was requested, in RFC 3339 format.
     * @type {string}
     * @memberof DocumentPdfQueryResponseData
     */
    requestedAtTime?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DocumentPdfQueryResponseDataJobStatusEnum {
    Requested = 'requested',
    Processing = 'processing',
    Completed = 'completed'
}

/**
 * A single document.
 * @export
 * @interface DocumentResponseObjectResponseBody
 */
export interface DocumentResponseObjectResponseBody {
    /**
     * List of the document conditional field sections.
     * @type {Array<ConditionalFieldSectionObjectResponseBody>}
     * @memberof DocumentResponseObjectResponseBody
     */
    conditionalFieldSections?: Array<ConditionalFieldSectionObjectResponseBody>;
    /**
     * Time the document was created in RFC 3339 format.
     * @type {string}
     * @memberof DocumentResponseObjectResponseBody
     */
    createdAtTime: string;
    /**
     * 
     * @type {GoaDocumentTypeTinyResponseResponseBody}
     * @memberof DocumentResponseObjectResponseBody
     */
    documentType: GoaDocumentTypeTinyResponseResponseBody;
    /**
     * 
     * @type {GoaDriverTinyResponseResponseBody}
     * @memberof DocumentResponseObjectResponseBody
     */
    driver: GoaDriverTinyResponseResponseBody;
    /**
     * The fields associated with this document.
     * @type {Array<FieldObjectResponseBody>}
     * @memberof DocumentResponseObjectResponseBody
     */
    fields: Array<FieldObjectResponseBody>;
    /**
     * Universally unique identifier for the document.
     * @type {string}
     * @memberof DocumentResponseObjectResponseBody
     */
    id: string;
    /**
     * Name of the document.
     * @type {string}
     * @memberof DocumentResponseObjectResponseBody
     */
    name?: string;
    /**
     * Notes on the document.
     * @type {string}
     * @memberof DocumentResponseObjectResponseBody
     */
    notes?: string;
    /**
     * 
     * @type {GoaRouteStopTinyResponseResponseBody}
     * @memberof DocumentResponseObjectResponseBody
     */
    routeStop?: GoaRouteStopTinyResponseResponseBody;
    /**
     * The condition of the document created for the driver. Can be either Required or Submitted. Required documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. Submitted documents have been submitted by the driver in the Driver App. Archived documents have been archived by the admin in the cloud dashboard.
     * @type {string}
     * @memberof DocumentResponseObjectResponseBody
     */
    state: DocumentResponseObjectResponseBodyStateEnum;
    /**
     * Time the document was updated in RFC 3339 format.
     * @type {string}
     * @memberof DocumentResponseObjectResponseBody
     */
    updatedAtTime?: string;
    /**
     * 
     * @type {GoaVehicleTinyResponseResponseBody}
     * @memberof DocumentResponseObjectResponseBody
     */
    vehicle?: GoaVehicleTinyResponseResponseBody;
}

/**
    * @export
    * @enum {string}
    */
export enum DocumentResponseObjectResponseBodyStateEnum {
    Submitted = 'submitted',
    Required = 'required',
    Archived = 'archived'
}

/**
 * Bad Gateway
 * @export
 * @interface DocumentTypesGetDocumentTypesBadGatewayErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface DocumentTypesGetDocumentTypesBadRequestErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface DocumentTypesGetDocumentTypesGatewayTimeoutErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface DocumentTypesGetDocumentTypesInternalServerErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface DocumentTypesGetDocumentTypesMethodNotAllowedErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface DocumentTypesGetDocumentTypesNotFoundErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface DocumentTypesGetDocumentTypesNotImplementedErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface DocumentTypesGetDocumentTypesResponseBody
 */
export interface DocumentTypesGetDocumentTypesResponseBody {
    /**
     * List of all document types for the organization
     * @type {Array<GetDocumentTypeResponseObjectResponseBody>}
     * @memberof DocumentTypesGetDocumentTypesResponseBody
     */
    data: Array<GetDocumentTypeResponseObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof DocumentTypesGetDocumentTypesResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface DocumentTypesGetDocumentTypesServiceUnavailableErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface DocumentTypesGetDocumentTypesTooManyRequestsErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface DocumentTypesGetDocumentTypesUnauthorizedErrorResponseBody
 */
export interface DocumentTypesGetDocumentTypesUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentTypesGetDocumentTypesUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface DocumentsDeleteDocumentBadGatewayErrorResponseBody
 */
export interface DocumentsDeleteDocumentBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface DocumentsDeleteDocumentBadRequestErrorResponseBody
 */
export interface DocumentsDeleteDocumentBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface DocumentsDeleteDocumentGatewayTimeoutErrorResponseBody
 */
export interface DocumentsDeleteDocumentGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface DocumentsDeleteDocumentInternalServerErrorResponseBody
 */
export interface DocumentsDeleteDocumentInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface DocumentsDeleteDocumentMethodNotAllowedErrorResponseBody
 */
export interface DocumentsDeleteDocumentMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface DocumentsDeleteDocumentNotFoundErrorResponseBody
 */
export interface DocumentsDeleteDocumentNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface DocumentsDeleteDocumentNotImplementedErrorResponseBody
 */
export interface DocumentsDeleteDocumentNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * Service unavailable
 * @export
 * @interface DocumentsDeleteDocumentServiceUnavailableErrorResponseBody
 */
export interface DocumentsDeleteDocumentServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface DocumentsDeleteDocumentTooManyRequestsErrorResponseBody
 */
export interface DocumentsDeleteDocumentTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface DocumentsDeleteDocumentUnauthorizedErrorResponseBody
 */
export interface DocumentsDeleteDocumentUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsDeleteDocumentUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsDeleteDocumentUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface DocumentsGetDocumentBadGatewayErrorResponseBody
 */
export interface DocumentsGetDocumentBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface DocumentsGetDocumentBadRequestErrorResponseBody
 */
export interface DocumentsGetDocumentBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface DocumentsGetDocumentGatewayTimeoutErrorResponseBody
 */
export interface DocumentsGetDocumentGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface DocumentsGetDocumentInternalServerErrorResponseBody
 */
export interface DocumentsGetDocumentInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface DocumentsGetDocumentMethodNotAllowedErrorResponseBody
 */
export interface DocumentsGetDocumentMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface DocumentsGetDocumentNotFoundErrorResponseBody
 */
export interface DocumentsGetDocumentNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface DocumentsGetDocumentNotImplementedErrorResponseBody
 */
export interface DocumentsGetDocumentNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface DocumentsGetDocumentResponseBody
 */
export interface DocumentsGetDocumentResponseBody {
    /**
     * 
     * @type {DocumentResponseObjectResponseBody}
     * @memberof DocumentsGetDocumentResponseBody
     */
    data?: DocumentResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface DocumentsGetDocumentServiceUnavailableErrorResponseBody
 */
export interface DocumentsGetDocumentServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface DocumentsGetDocumentTooManyRequestsErrorResponseBody
 */
export interface DocumentsGetDocumentTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface DocumentsGetDocumentUnauthorizedErrorResponseBody
 */
export interface DocumentsGetDocumentUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface DocumentsGetDocumentsBadGatewayErrorResponseBody
 */
export interface DocumentsGetDocumentsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface DocumentsGetDocumentsBadRequestErrorResponseBody
 */
export interface DocumentsGetDocumentsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface DocumentsGetDocumentsGatewayTimeoutErrorResponseBody
 */
export interface DocumentsGetDocumentsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface DocumentsGetDocumentsInternalServerErrorResponseBody
 */
export interface DocumentsGetDocumentsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface DocumentsGetDocumentsMethodNotAllowedErrorResponseBody
 */
export interface DocumentsGetDocumentsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface DocumentsGetDocumentsNotFoundErrorResponseBody
 */
export interface DocumentsGetDocumentsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface DocumentsGetDocumentsNotImplementedErrorResponseBody
 */
export interface DocumentsGetDocumentsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface DocumentsGetDocumentsResponseBody
 */
export interface DocumentsGetDocumentsResponseBody {
    /**
     * Multiple documents.
     * @type {Array<DocumentResponseObjectResponseBody>}
     * @memberof DocumentsGetDocumentsResponseBody
     */
    data: Array<DocumentResponseObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof DocumentsGetDocumentsResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface DocumentsGetDocumentsServiceUnavailableErrorResponseBody
 */
export interface DocumentsGetDocumentsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface DocumentsGetDocumentsTooManyRequestsErrorResponseBody
 */
export interface DocumentsGetDocumentsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface DocumentsGetDocumentsUnauthorizedErrorResponseBody
 */
export interface DocumentsGetDocumentsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsGetDocumentsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsGetDocumentsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface DocumentsPostDocumentBadGatewayErrorResponseBody
 */
export interface DocumentsPostDocumentBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface DocumentsPostDocumentBadRequestErrorResponseBody
 */
export interface DocumentsPostDocumentBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface DocumentsPostDocumentGatewayTimeoutErrorResponseBody
 */
export interface DocumentsPostDocumentGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface DocumentsPostDocumentInternalServerErrorResponseBody
 */
export interface DocumentsPostDocumentInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface DocumentsPostDocumentMethodNotAllowedErrorResponseBody
 */
export interface DocumentsPostDocumentMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface DocumentsPostDocumentNotFoundErrorResponseBody
 */
export interface DocumentsPostDocumentNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface DocumentsPostDocumentNotImplementedErrorResponseBody
 */
export interface DocumentsPostDocumentNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface DocumentsPostDocumentRequestBody
 */
export interface DocumentsPostDocumentRequestBody {
    /**
     * ID for the document type.
     * @type {string}
     * @memberof DocumentsPostDocumentRequestBody
     */
    documentTypeId: string;
    /**
     * ID of the driver. Can be either unique Samsara ID or an [external ID](https://developers.samsara.com/docs/external-ids) for the driver.
     * @type {string}
     * @memberof DocumentsPostDocumentRequestBody
     */
    driverId: string;
    /**
     * The fields associated with this document.
     * @type {Array<FieldObjectPostRequestBody>}
     * @memberof DocumentsPostDocumentRequestBody
     */
    fields?: Array<FieldObjectPostRequestBody>;
    /**
     * Name of the document.
     * @type {string}
     * @memberof DocumentsPostDocumentRequestBody
     */
    name?: string;
    /**
     * Notes on the document.
     * @type {string}
     * @memberof DocumentsPostDocumentRequestBody
     */
    notes?: string;
    /**
     * ID of the route stop. Can be either unique Samsara ID or an [external ID](https://developers.samsara.com/docs/external-ids) for the route stop.
     * @type {string}
     * @memberof DocumentsPostDocumentRequestBody
     */
    routeStopId?: string;
    /**
     * The condition of the document created for the driver. Can be either `required` or `submitted`, if no value is specified, `state` defaults to `required`. `required` documents are pre-populated documents for the Driver to fill out in the Driver App.
     * @type {string}
     * @memberof DocumentsPostDocumentRequestBody
     */
    state?: DocumentsPostDocumentRequestBodyStateEnum;
    /**
     * ID of the vehicle. Can be either unique Samsara ID or an [external ID](https://developers.samsara.com/docs/external-ids) for the vehicle.
     * @type {string}
     * @memberof DocumentsPostDocumentRequestBody
     */
    vehicleId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DocumentsPostDocumentRequestBodyStateEnum {
    Submitted = 'submitted',
    Required = 'required'
}

/**
 * 
 * @export
 * @interface DocumentsPostDocumentResponseBody
 */
export interface DocumentsPostDocumentResponseBody {
    /**
     * 
     * @type {DocumentResponseObjectResponseBody}
     * @memberof DocumentsPostDocumentResponseBody
     */
    data?: DocumentResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface DocumentsPostDocumentServiceUnavailableErrorResponseBody
 */
export interface DocumentsPostDocumentServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface DocumentsPostDocumentTooManyRequestsErrorResponseBody
 */
export interface DocumentsPostDocumentTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface DocumentsPostDocumentUnauthorizedErrorResponseBody
 */
export interface DocumentsPostDocumentUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DocumentsPostDocumentUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DocumentsPostDocumentUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * A driver object
 * @export
 * @interface Driver
 */
export interface Driver {
    /**
     * [beta] A minified attribute
     * @type {Array<AttributeTiny>}
     * @memberof Driver
     */
    attributes?: Array<AttributeTiny>;
    /**
     * 
     * @type {DriverCarrierSettings}
     * @memberof Driver
     */
    carrierSettings?: DriverCarrierSettings;
    /**
     * The date and time this driver was created in RFC 3339 format.
     * @type {string}
     * @memberof Driver
     */
    createdAtTime?: string;
    /**
     * The ID Card Code on the back of the physical card assigned to the driver.  Contact Samsara if you would like to enable this feature.
     * @type {string}
     * @memberof Driver
     */
    currentIdCardCode?: string;
    /**
     * 
     * @type {DriverActivationStatus}
     * @memberof Driver
     */
    driverActivationStatus?: DriverActivationStatus;
    /**
     * Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     * @type {boolean}
     * @memberof Driver
     */
    eldAdverseWeatherExemptionEnabled?: boolean;
    /**
     * Flag indicating this driver may use Big Day exemption in ELD logs.
     * @type {boolean}
     * @memberof Driver
     */
    eldBigDayExemptionEnabled?: boolean;
    /**
     * `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
     * @type {number}
     * @memberof Driver
     */
    eldDayStartHour?: number;
    /**
     * Flag indicating this driver is exempt from the Electronic Logging Mandate.
     * @type {boolean}
     * @memberof Driver
     */
    eldExempt?: boolean;
    /**
     * Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     * @type {string}
     * @memberof Driver
     */
    eldExemptReason?: string;
    /**
     * Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     * @type {boolean}
     * @memberof Driver
     */
    eldPcEnabled?: boolean;
    /**
     * 
     * @type {DriverEldSettings}
     * @memberof Driver
     */
    eldSettings?: DriverEldSettings;
    /**
     * Flag indicating this driver may select the Yard Move duty status in ELD logs.
     * @type {boolean}
     * @memberof Driver
     */
    eldYmEnabled?: boolean;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof Driver
     */
    externalIds?: object;
    /**
     * Samsara ID for the driver.
     * @type {string}
     * @memberof Driver
     */
    id?: string;
    /**
     * [DEPRECATED] A boolean indicating whether or not the driver is deactivated. Use `driverActivationStatus` instead.
     * @type {boolean}
     * @memberof Driver
     */
    isDeactivated?: boolean;
    /**
     * Driver\'s state issued license number. The combination of this number and `licenseState` must be unique.
     * @type {string}
     * @memberof Driver
     */
    licenseNumber?: string;
    /**
     * Abbreviation of US state, Canadian province, or US territory that issued driver\'s license.
     * @type {string}
     * @memberof Driver
     */
    licenseState?: string;
    /**
     * 
     * @type {DriverLocale}
     * @memberof Driver
     */
    locale?: DriverLocale;
    /**
     * Driver\'s name.
     * @type {string}
     * @memberof Driver
     */
    name?: string;
    /**
     * Notes about the driver.
     * @type {string}
     * @memberof Driver
     */
    notes?: string;
    /**
     * Phone number of the driver.
     * @type {string}
     * @memberof Driver
     */
    phone?: string;
    /**
     * 
     * @type {DriverStaticAssignedVehicle}
     * @memberof Driver
     */
    staticAssignedVehicle?: DriverStaticAssignedVehicle;
    /**
     * Driver\'s assigned tachograph card number (Europe specific)
     * @type {string}
     * @memberof Driver
     */
    tachographCardNumber?: string;
    /**
     * The tags this driver belongs to.
     * @type {Array<TagTinyResponse>}
     * @memberof Driver
     */
    tags?: Array<TagTinyResponse>;
    /**
     * Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
     * @type {string}
     * @memberof Driver
     */
    timezone?: string;
    /**
     * The date and time this driver was last updated in RFC 3339 format.
     * @type {string}
     * @memberof Driver
     */
    updatedAtTime?: string;
    /**
     * Driver\'s login username into the driver app. The username may not contain spaces or the \'@\' symbol. The username must be unique.
     * @type {string}
     * @memberof Driver
     */
    username?: string;
    /**
     * 
     * @type {DriverVehicleGroupTag}
     * @memberof Driver
     */
    vehicleGroupTag?: DriverVehicleGroupTag;
}
/**
 * A value indicating whether the driver is active or deactivated.
 * @export
 * @enum {string}
 */
export enum DriverActivationStatus {
    Active = 'active',
    Deactivated = 'deactivated'
}

/**
 * The configuration settings for the Samsara Driver App. Can be set or updated through the Samsara Settings page or the API at any time.
 * @export
 * @interface DriverAppSettingsResponseObjectResponseBody
 */
export interface DriverAppSettingsResponseObjectResponseBody {
    /**
     * Login user name for the fleet driver app
     * @type {string}
     * @memberof DriverAppSettingsResponseObjectResponseBody
     */
    driverFleetId?: string;
}
/**
 * 
 * @export
 * @interface DriverAssignmentObjectResponseBody
 */
export interface DriverAssignmentObjectResponseBody {
    /**
     * Assignment type of the driver-vehicle assignment, indicating the provenance of the assignment. The only type of assignment supported right now is `driverApp` assignments. This list could change, so it is recommended that clients gracefully handle any types not enumerated in this list.
     * @type {string}
     * @memberof DriverAssignmentObjectResponseBody
     */
    assignmentType?: DriverAssignmentObjectResponseBodyAssignmentTypeEnum;
    /**
     * 
     * @type {GoaDriverTinyResponseResponseBody}
     * @memberof DriverAssignmentObjectResponseBody
     */
    driver?: GoaDriverTinyResponseResponseBody;
    /**
     *  An end time in RFC 3339 format. Omitted if not applicable. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof DriverAssignmentObjectResponseBody
     */
    endTime?: string;
    /**
     * Boolean indicating whether the driver is a passenger.
     * @type {boolean}
     * @memberof DriverAssignmentObjectResponseBody
     */
    isPassenger?: boolean;
    /**
     *  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof DriverAssignmentObjectResponseBody
     */
    startTime?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum DriverAssignmentObjectResponseBodyAssignmentTypeEnum {
    DriverApp = 'driverApp'
}

/**
 * Carrier for a given driver. If the driver\'s carrier differs from the general organization\'s carrier settings, the override value is used. Updating this value only updates the override setting for this driver.
 * @export
 * @interface DriverCarrierSettings
 */
export interface DriverCarrierSettings {
    /**
     * Carrier for a given driver.
     * @type {string}
     * @memberof DriverCarrierSettings
     */
    carrierName?: string;
    /**
     * Carrier US DOT Number. If this differs from the general organization\'s settings, the override value is used. Updating this value only updates the override setting for this driver.
     * @type {number}
     * @memberof DriverCarrierSettings
     */
    dotNumber?: number;
    /**
     * Main office address for a given driver. If this differs from the general organization\'s settings, the override value is used. 
     * @type {string}
     * @memberof DriverCarrierSettings
     */
    mainOfficeAddress?: string;
}
/**
 * Summary of drivers\' efficiencies over a time range.
 * @export
 * @interface DriverEfficienciesResponse
 */
export interface DriverEfficienciesResponse {
    /**
     * 
     * @type {DriverEfficienciesResponseData}
     * @memberof DriverEfficienciesResponse
     */
    data?: DriverEfficienciesResponseData;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof DriverEfficienciesResponse
     */
    pagination?: PaginationResponse;
}
/**
 * 
 * @export
 * @interface DriverEfficienciesResponseData
 */
export interface DriverEfficienciesResponseData {
    /**
     * A list of drivers\' efficiencies.
     * @type {Array<DriverEfficiency>}
     * @memberof DriverEfficienciesResponseData
     */
    driverSummaries?: Array<DriverEfficiency>;
    /**
     * End time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-16T16:00:00Z`
     * @type {string}
     * @memberof DriverEfficienciesResponseData
     */
    summaryEndTime?: string;
    /**
     * Start time of the window for which this efficiency report was computed. Will be a UTC timestamp in RFC 3339 format. For example: `2020-03-15T16:00:00Z`
     * @type {string}
     * @memberof DriverEfficienciesResponseData
     */
    summaryStartTime?: string;
}
/**
 * Summary of a driver\'s efficiency.
 * @export
 * @interface DriverEfficiency
 */
export interface DriverEfficiency {
    /**
     * 
     * @type {ExtendedDriverTinyResponse}
     * @memberof DriverEfficiency
     */
    driver?: ExtendedDriverTinyResponse;
    /**
     * Distance driven in meters.
     * @type {number}
     * @memberof DriverEfficiency
     */
    totalDistanceDrivenMeters?: number;
    /**
     * Time driven in milliseconds.
     * @type {number}
     * @memberof DriverEfficiency
     */
    totalDriveTimeDurationMs?: number;
    /**
     * Fuel consumption in milliliters.
     * @type {number}
     * @memberof DriverEfficiency
     */
    totalFuelConsumedMl?: number;
    /**
     * Time spent idling in milliseconds.
     * @type {number}
     * @memberof DriverEfficiency
     */
    totalIdleTimeDurationMs?: number;
    /**
     * Time spent with power take off enabled while idling in milliseconds.
     * @type {number}
     * @memberof DriverEfficiency
     */
    totalPowerTakeOffDurationMs?: number;
    /**
     * Summaries of vehicle efficiency for each vehicle the driver was driving during the given time period.
     * @type {Array<VehicleSummary>}
     * @memberof DriverEfficiency
     */
    vehicleSummaries?: Array<VehicleSummary>;
}
/**
 * An ELD ruleset for a driver.
 * @export
 * @interface DriverEldRuleset
 */
export interface DriverEldRuleset {
    /**
     * 
     * @type {DriverEldRulesetRestBreak}
     * @memberof DriverEldRuleset
     */
    _break?: DriverEldRulesetRestBreak;
    /**
     * 
     * @type {DriverEldRulesetCycle}
     * @memberof DriverEldRuleset
     */
    cycle?: DriverEldRulesetCycle;
    /**
     * The jurisdiction of the ELD ruleset applied to this driver. These are specified by either `CS` or `CN` for Canada South and Canada North, respectively, or the ISO 3166-2 postal code for the supported state or territory.
     * @type {string}
     * @memberof DriverEldRuleset
     */
    jurisdiction?: string;
    /**
     * 
     * @type {DriverEldRulesetRestart}
     * @memberof DriverEldRuleset
     */
    restart?: DriverEldRulesetRestart;
    /**
     * 
     * @type {DriverEldRulesetShift}
     * @memberof DriverEldRuleset
     */
    shift?: DriverEldRulesetShift;
}
/**
 * The cycle of the ELD ruleset applied to this driver.
 * @export
 * @enum {string}
 */
export enum DriverEldRulesetCycle {
    Usa60Hour7Day = 'USA 60 hour / 7 day',
    Usa70Hour8Day = 'USA 70 hour / 8 day',
    Ak80Hour8Day = 'AK 80 hour / 8 day',
    Ak70Hour7Day = 'AK 70 hour / 7 day',
    Ca80Hour8Day = 'CA 80 hour / 8 day',
    Ca112Hour8Day = 'CA 112 hour / 8 day',
    Fl80Hour8Day = 'FL 80 hour / 8 day',
    Fl70Hour7Day = 'FL 70 hour / 7 day',
    Ne80Hour8Day = 'NE 80 hour / 8 day',
    Ne70Hour7Day = 'NE 70 hour / 7 day',
    Nc80Hour8Day = 'NC 80 hour / 8 day',
    Nc70Hour7Day = 'NC 70 hour / 7 day',
    Ok70Hour8Day = 'OK 70 hour / 8 day',
    Ok60Hour7Day = 'OK 60 hour / 7 day',
    Or80Hour8Day = 'OR 80 hour / 8 day',
    Or70Hour7Day = 'OR 70 hour / 7 day',
    Sc80Hour8Day = 'SC 80 hour / 8 day',
    Sc70Hour7Day = 'SC 70 hour / 7 day',
    Tx70Hour7Day = 'TX 70 hour / 7 day',
    Wi80Hour8Day = 'WI 80 hour / 8 day',
    Wi70Hour7Day = 'WI 70 hour / 7 day',
    CanadaSouthCycle170Hour7Day = 'Canada South Cycle 1 (70 hour / 7 day)',
    CanadaSouthCycle2120Hour14Day = 'Canada South Cycle 2 (120 hour / 14 day)',
    CanadaNorthCycle180Hour7Day = 'Canada North Cycle 1 (80 hour / 7 day)',
    CanadaNorthCycle2120Hour14Day = 'Canada North Cycle 2 (120 hour / 14 day)'
}

/**
 * The daily off duty setting of the ELD ruleset applied to this driver.
 * @export
 * @enum {string}
 */
export enum DriverEldRulesetDailyOffDuty {
    South = 'Canada South',
    North = 'Canada North'
}

/**
 * The rest break required setting of the ELD ruleset applied to this driver.
 * @export
 * @enum {string}
 */
export enum DriverEldRulesetRestBreak {
    PropertyOffDutySleeper = 'Property (off-duty/sleeper)',
    ExplosivesHazMatOnDuty = 'Explosives/HazMat (on-duty)'
}

/**
 * The restart of the ELD ruleset applied to this driver.
 * @export
 * @enum {string}
 */
export enum DriverEldRulesetRestart {
    _34HourRestart = '34-hour Restart',
    _24HourRestart = '24-hour Restart',
    _36HourRestart = '36-hour Restart',
    _72HourRestart = '72-hour Restart'
}

/**
 * The shift of the ELD ruleset applied to this driver.
 * @export
 * @enum {string}
 */
export enum DriverEldRulesetShift {
    Property = 'US Interstate Property',
    Passenger = 'US Interstate Passenger'
}

/**
 * The US short haul ruleset type of the ELD ruleset applied to this driver.
 * @export
 * @enum {string}
 */
export enum DriverEldRulesetUsShortHaulType {
    _100AirMilePassenger = '100 Air-Mile (Passenger)',
    _100AirMileProperty = '100 Air-Mile (Property)',
    _150AirMileNonCdl = '150 Air-Mile (Non-CDL)'
}

/**
 * The driver\'s ELD settings.
 * @export
 * @interface DriverEldSettings
 */
export interface DriverEldSettings {
    /**
     * The driver\'s ELD rulesets and overrides.
     * @type {Array<DriverEldRuleset>}
     * @memberof DriverEldSettings
     */
    rulesets?: Array<DriverEldRuleset>;
}
/**
 * Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales.
 * @export
 * @enum {string}
 */
export enum DriverLocale {
    Us = 'us',
    At = 'at',
    Be = 'be',
    Ca = 'ca',
    Gb = 'gb',
    Fr = 'fr',
    De = 'de',
    Ie = 'ie',
    It = 'it',
    Lu = 'lu',
    Mx = 'mx',
    Nl = 'nl',
    Es = 'es',
    Ch = 'ch',
    Pr = 'pr'
}

/**
 * A single driver.
 * @export
 * @interface DriverResponse
 */
export interface DriverResponse {
    /**
     * 
     * @type {Driver}
     * @memberof DriverResponse
     */
    data?: Driver;
}
/**
 * 
 * @export
 * @interface DriverRulesetObjectResponseBody
 */
export interface DriverRulesetObjectResponseBody {
    /**
     * The rest break required setting of the ELD ruleset applied to this driver.
     * @type {string}
     * @memberof DriverRulesetObjectResponseBody
     */
    _break?: DriverRulesetObjectResponseBodyBreakEnum;
    /**
     * The cycle of the ELD ruleset applied to this driver.
     * @type {string}
     * @memberof DriverRulesetObjectResponseBody
     */
    cycle?: DriverRulesetObjectResponseBodyCycleEnum;
    /**
     * The jurisdiction of the ELD ruleset applied to this driver. These are specified by either `CS` or `CN` for Canada South and Canada North, respectively, or the ISO 3166-2 postal code for the supported state or territory.
     * @type {string}
     * @memberof DriverRulesetObjectResponseBody
     */
    jurisdiction?: string;
    /**
     * The restart of the ELD ruleset applied to this driver.
     * @type {string}
     * @memberof DriverRulesetObjectResponseBody
     */
    restart?: DriverRulesetObjectResponseBodyRestartEnum;
    /**
     * The shift of the ELD ruleset applied to this driver.
     * @type {string}
     * @memberof DriverRulesetObjectResponseBody
     */
    shift?: DriverRulesetObjectResponseBodyShiftEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DriverRulesetObjectResponseBodyBreakEnum {
    PropertyOffDutySleeper = 'Property (off-duty/sleeper)',
    ExplosivesHazMatOnDuty = 'Explosives/HazMat (on-duty)'
}
/**
    * @export
    * @enum {string}
    */
export enum DriverRulesetObjectResponseBodyCycleEnum {
    Usa60Hour7Day = 'USA 60 hour / 7 day',
    Usa70Hour8Day = 'USA 70 hour / 8 day',
    Ak80Hour8Day = 'AK 80 hour / 8 day',
    Ak70Hour7Day = 'AK 70 hour / 7 day',
    Ca80Hour8Day = 'CA 80 hour / 8 day',
    Ca112Hour8Day = 'CA 112 hour / 8 day',
    Fl80Hour8Day = 'FL 80 hour / 8 day',
    Fl70Hour7Day = 'FL 70 hour / 7 day',
    Ne80Hour8Day = 'NE 80 hour / 8 day',
    Ne70Hour7Day = 'NE 70 hour / 7 day',
    Nc80Hour8Day = 'NC 80 hour / 8 day',
    Nc70Hour7Day = 'NC 70 hour / 7 day',
    Ok70Hour8Day = 'OK 70 hour / 8 day',
    Ok60Hour7Day = 'OK 60 hour / 7 day',
    Or80Hour8Day = 'OR 80 hour / 8 day',
    Or70Hour7Day = 'OR 70 hour / 7 day',
    Sc80Hour8Day = 'SC 80 hour / 8 day',
    Sc70Hour7Day = 'SC 70 hour / 7 day',
    Tx70Hour7Day = 'TX 70 hour / 7 day',
    Wi80Hour8Day = 'WI 80 hour / 8 day',
    Wi70Hour7Day = 'WI 70 hour / 7 day',
    CanadaSouthCycle170Hour7Day = 'Canada South Cycle 1 (70 hour / 7 day)',
    CanadaSouthCycle2120Hour14Day = 'Canada South Cycle 2 (120 hour / 14 day)',
    CanadaNorthCycle180Hour7Day = 'Canada North Cycle 1 (80 hour / 7 day)',
    CanadaNorthCycle2120Hour14Day = 'Canada North Cycle 2 (120 hour / 14 day)'
}
/**
    * @export
    * @enum {string}
    */
export enum DriverRulesetObjectResponseBodyRestartEnum {
    _34HourRestart = '34-hour Restart',
    _24HourRestart = '24-hour Restart',
    _36HourRestart = '36-hour Restart',
    _72HourRestart = '72-hour Restart'
}
/**
    * @export
    * @enum {string}
    */
export enum DriverRulesetObjectResponseBodyShiftEnum {
    Property = 'US Interstate Property',
    Passenger = 'US Interstate Passenger'
}

/**
 * Vehicle assigned to the driver for static vehicle assignments. (uncommon).
 * @export
 * @interface DriverStaticAssignedVehicle
 */
export interface DriverStaticAssignedVehicle {
    /**
     * ID of the vehicle.
     * @type {string}
     * @memberof DriverStaticAssignedVehicle
     */
    id?: string;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof DriverStaticAssignedVehicle
     */
    name?: string;
}
/**
 * List of all driver tachograph activities in a specified time range.
 * @export
 * @interface DriverTachographActivityResponse
 */
export interface DriverTachographActivityResponse {
    /**
     * 
     * @type {Array<TachographActivityListWrapper>}
     * @memberof DriverTachographActivityResponse
     */
    data?: Array<TachographActivityListWrapper>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof DriverTachographActivityResponse
     */
    pagination?: PaginationResponse;
}
/**
 * A minified driver object.
 * @export
 * @interface DriverTinyResponse
 */
export interface DriverTinyResponse {
    /**
     * ID of the driver.
     * @type {string}
     * @memberof DriverTinyResponse
     */
    id?: string;
    /**
     * Name of the driver.
     * @type {string}
     * @memberof DriverTinyResponse
     */
    name?: string;
}
/**
 * Tag which determines which vehicles a driver will see when selecting vehicles.
 * @export
 * @interface DriverVehicleGroupTag
 */
export interface DriverVehicleGroupTag {
    /**
     * ID of the tag.
     * @type {string}
     * @memberof DriverVehicleGroupTag
     */
    id?: string;
    /**
     * Name of the tag.
     * @type {string}
     * @memberof DriverVehicleGroupTag
     */
    name?: string;
    /**
     * If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
     * @type {string}
     * @memberof DriverVehicleGroupTag
     */
    parentTagId?: string;
}
/**
 * The driver the log applies to.
 * @export
 * @interface DriverWithTimezoneEldSettingsObjectResponseBody
 */
export interface DriverWithTimezoneEldSettingsObjectResponseBody {
    /**
     * 
     * @type {EldSettingsObjectResponseBody}
     * @memberof DriverWithTimezoneEldSettingsObjectResponseBody
     */
    eldSettings?: EldSettingsObjectResponseBody;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof DriverWithTimezoneEldSettingsObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the driver
     * @type {string}
     * @memberof DriverWithTimezoneEldSettingsObjectResponseBody
     */
    id: string;
    /**
     * Name of the driver
     * @type {string}
     * @memberof DriverWithTimezoneEldSettingsObjectResponseBody
     */
    name: string;
    /**
     * Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
     * @type {string}
     * @memberof DriverWithTimezoneEldSettingsObjectResponseBody
     */
    timezone?: string;
}
/**
 * Bad Gateway
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsBadGatewayErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsBadRequestErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsGatewayTimeoutErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsInternalServerErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsMethodNotAllowedErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsNotFoundErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsNotImplementedErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsResponseBody {
    /**
     * List of driver and their vehicle assignments.
     * @type {Array<DriversVehicleAssignmentsObjectResponseBody>}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsResponseBody
     */
    data: Array<DriversVehicleAssignmentsObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsServiceUnavailableErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsTooManyRequestsErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsUnauthorizedErrorResponseBody
 */
export interface DriversVehicleAssignmentsGetDriversVehicleAssignmentsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof DriversVehicleAssignmentsGetDriversVehicleAssignmentsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface DriversVehicleAssignmentsObjectResponseBody
 */
export interface DriversVehicleAssignmentsObjectResponseBody {
    /**
     * A value indicating whether the driver is active or deactivated.
     * @type {string}
     * @memberof DriversVehicleAssignmentsObjectResponseBody
     */
    driverActivationStatus: DriversVehicleAssignmentsObjectResponseBodyDriverActivationStatusEnum;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof DriversVehicleAssignmentsObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the driver.
     * @type {string}
     * @memberof DriversVehicleAssignmentsObjectResponseBody
     */
    id: string;
    /**
     * Name of the driver.
     * @type {string}
     * @memberof DriversVehicleAssignmentsObjectResponseBody
     */
    name: string;
    /**
     * List of vehicle assignment objects.
     * @type {Array<VehicleAssignmentObjectResponseBody>}
     * @memberof DriversVehicleAssignmentsObjectResponseBody
     */
    vehicleAssignments: Array<VehicleAssignmentObjectResponseBody>;
}

/**
    * @export
    * @enum {string}
    */
export enum DriversVehicleAssignmentsObjectResponseBodyDriverActivationStatusEnum {
    Active = 'active',
    Deactivated = 'deactivated'
}

/**
 * The duty status durations of the log.
 * @export
 * @interface DutyStatusDurationObjectResponseBody
 */
export interface DutyStatusDurationObjectResponseBody {
    /**
     * Duration the driver was active for in the log period in milliseconds.
     * @type {number}
     * @memberof DutyStatusDurationObjectResponseBody
     */
    activeDurationMs?: number;
    /**
     * Duration the driver was driving for in the log period in milliseconds.
     * @type {number}
     * @memberof DutyStatusDurationObjectResponseBody
     */
    driveDurationMs?: number;
    /**
     * Duration the driver was off duty for in the log period in milliseconds.
     * @type {number}
     * @memberof DutyStatusDurationObjectResponseBody
     */
    offDutyDurationMs?: number;
    /**
     * Duration the driver was on duty for in the log period in milliseconds.
     * @type {number}
     * @memberof DutyStatusDurationObjectResponseBody
     */
    onDutyDurationMs?: number;
    /**
     * Duration the driver was driving for personal conveyance for in the log period in milliseconds.
     * @type {number}
     * @memberof DutyStatusDurationObjectResponseBody
     */
    personalConveyanceDurationMs?: number;
    /**
     * Duration the driver was in their sleeper berth for in the log period in milliseconds.
     * @type {number}
     * @memberof DutyStatusDurationObjectResponseBody
     */
    sleeperBerthDurationMs?: number;
    /**
     * Duration the driver was waiting for in the log period in milliseconds.
     * @type {number}
     * @memberof DutyStatusDurationObjectResponseBody
     */
    waitingTimeDurationMs?: number;
    /**
     * Duration the driver was driving for yard moves for in the log period in milliseconds.
     * @type {number}
     * @memberof DutyStatusDurationObjectResponseBody
     */
    yardMoveDurationMs?: number;
}
/**
 * Information about a DVIR.
 * @export
 * @interface Dvir
 */
export interface Dvir {
    /**
     * 
     * @type {DvirAuthorSignature}
     * @memberof Dvir
     */
    authorSignature?: DvirAuthorSignature;
    /**
     * Time when driver signed and completed this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof Dvir
     */
    endTime?: string;
    /**
     * Unique Samsara ID for the DVIR.
     * @type {string}
     * @memberof Dvir
     */
    id: string;
    /**
     * The license plate of this vehicle.
     * @type {string}
     * @memberof Dvir
     */
    licensePlate?: string;
    /**
     * Optional string if your jurisdiction requires a location of the DVIR.
     * @type {string}
     * @memberof Dvir
     */
    location?: string;
    /**
     * The mechanics notes on the DVIR.
     * @type {string}
     * @memberof Dvir
     */
    mechanicNotes?: string;
    /**
     * The odometer reading in meters.
     * @type {number}
     * @memberof Dvir
     */
    odometerMeters?: number;
    /**
     * The condition of vehicle on which DVIR was done.
     * @type {string}
     * @memberof Dvir
     */
    safetyStatus?: DvirSafetyStatusEnum;
    /**
     * 
     * @type {DvirSecondSignature}
     * @memberof Dvir
     */
    secondSignature?: DvirSecondSignature;
    /**
     * Time when driver began filling out this DVIR. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof Dvir
     */
    startTime?: string;
    /**
     * 
     * @type {DvirThirdSignature}
     * @memberof Dvir
     */
    thirdSignature?: DvirThirdSignature;
    /**
     * 
     * @type {DvirTrailer}
     * @memberof Dvir
     */
    trailer?: DvirTrailer;
    /**
     * Defects registered for the trailer which was part of the DVIR.
     * @type {Array<DvirTrailerDefectsItems>}
     * @memberof Dvir
     */
    trailerDefects?: Array<DvirTrailerDefectsItems>;
    /**
     * The name of the trailer the DVIR was submitted for.  Only included for tractor+trailer DVIRs.
     * @type {string}
     * @memberof Dvir
     */
    trailerName?: string;
    /**
     * Inspection type of the DVIR.
     * @type {string}
     * @memberof Dvir
     */
    type?: DvirTypeEnum;
    /**
     * 
     * @type {DvirVehicle}
     * @memberof Dvir
     */
    vehicle?: DvirVehicle;
    /**
     * Defects registered for the vehicle which was part of the DVIR.
     * @type {Array<DvirTrailerDefectsItems>}
     * @memberof Dvir
     */
    vehicleDefects?: Array<DvirTrailerDefectsItems>;
}

/**
    * @export
    * @enum {string}
    */
export enum DvirSafetyStatusEnum {
    Safe = 'safe',
    Unsafe = 'unsafe',
    Resolved = 'resolved'
}
/**
    * @export
    * @enum {string}
    */
export enum DvirTypeEnum {
    PreTrip = 'preTrip',
    PostTrip = 'postTrip',
    Mechanic = 'mechanic',
    Unspecified = 'unspecified'
}

/**
 * 
 * @export
 * @interface DvirAuthorSignature
 */
export interface DvirAuthorSignature {
    /**
     * 
     * @type {object & UserTinyResponse}
     * @memberof DvirAuthorSignature
     */
    signatoryUser?: object & UserTinyResponse;
    /**
     * The time when the DVIR was signed. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof DvirAuthorSignature
     */
    signedAtTime?: string;
    /**
     * Whether the DVIR was submitted by a `driver` or `mechanic`.
     * @type {string}
     * @memberof DvirAuthorSignature
     */
    type?: DvirAuthorSignatureTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DvirAuthorSignatureTypeEnum {
    Driver = 'driver',
    Mechanic = 'mechanic'
}

/**
 * The DVIR response.
 * @export
 * @interface DvirResponse
 */
export interface DvirResponse {
    /**
     * 
     * @type {Dvir}
     * @memberof DvirResponse
     */
    data?: Dvir;
}
/**
 * 
 * @export
 * @interface DvirSecondSignature
 */
export interface DvirSecondSignature {
    /**
     * 
     * @type {object & UserTinyResponse}
     * @memberof DvirSecondSignature
     */
    signatoryUser?: object & UserTinyResponse;
    /**
     * The time when the DVIR was signed. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof DvirSecondSignature
     */
    signedAtTime?: string;
    /**
     * Whether the DVIR was submitted by a `driver` or `mechanic`.
     * @type {string}
     * @memberof DvirSecondSignature
     */
    type?: DvirSecondSignatureTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DvirSecondSignatureTypeEnum {
    Driver = 'driver',
    Mechanic = 'mechanic'
}

/**
 * DVIR Signure.
 * @export
 * @interface DvirSignature
 */
export interface DvirSignature {
    /**
     * 
     * @type {object & UserTinyResponse}
     * @memberof DvirSignature
     */
    signatoryUser?: object & UserTinyResponse;
    /**
     * The time when the DVIR was signed. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof DvirSignature
     */
    signedAtTime?: string;
    /**
     * Whether the DVIR was submitted by a `driver` or `mechanic`.
     * @type {string}
     * @memberof DvirSignature
     */
    type?: DvirSignatureTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DvirSignatureTypeEnum {
    Driver = 'driver',
    Mechanic = 'mechanic'
}

/**
 * 
 * @export
 * @interface DvirThirdSignature
 */
export interface DvirThirdSignature {
    /**
     * 
     * @type {object & UserTinyResponse}
     * @memberof DvirThirdSignature
     */
    signatoryUser?: object & UserTinyResponse;
    /**
     * The time when the DVIR was signed. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof DvirThirdSignature
     */
    signedAtTime?: string;
    /**
     * Whether the DVIR was submitted by a `driver` or `mechanic`.
     * @type {string}
     * @memberof DvirThirdSignature
     */
    type?: DvirThirdSignatureTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DvirThirdSignatureTypeEnum {
    Driver = 'driver',
    Mechanic = 'mechanic'
}

/**
 * 
 * @export
 * @interface DvirTrailer
 */
export interface DvirTrailer {
    /**
     * ID of the trailer.
     * @type {string}
     * @memberof DvirTrailer
     */
    id?: string;
    /**
     * Name of the trailer.
     * @type {string}
     * @memberof DvirTrailer
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface DvirTrailerDefectsItems
 */
export interface DvirTrailerDefectsItems {
    /**
     * Comment on the defect.
     * @type {string}
     * @memberof DvirTrailerDefectsItems
     */
    comment?: string;
    /**
     * Time when the defect was created. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof DvirTrailerDefectsItems
     */
    createdAtTime?: string;
    /**
     * The type of DVIR defect.
     * @type {string}
     * @memberof DvirTrailerDefectsItems
     */
    defectType?: string;
    /**
     * ID of the defect.
     * @type {string}
     * @memberof DvirTrailerDefectsItems
     */
    id: string;
    /**
     * Signifies if this defect is resolved.
     * @type {boolean}
     * @memberof DvirTrailerDefectsItems
     */
    isResolved: boolean;
    /**
     * The mechanics notes on the defect.
     * @type {string}
     * @memberof DvirTrailerDefectsItems
     */
    mechanicNotes?: string;
    /**
     * Time when mechanic notes were last updated. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof DvirTrailerDefectsItems
     */
    mechanicNotesUpdatedAtTime?: string;
    /**
     * Time when this defect was resolved. Will not be returned if the defect is unresolved. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof DvirTrailerDefectsItems
     */
    resolvedAtTime?: string;
    /**
     * 
     * @type {DefectResolvedBy}
     * @memberof DvirTrailerDefectsItems
     */
    resolvedBy?: DefectResolvedBy;
    /**
     * 
     * @type {object}
     * @memberof DvirTrailerDefectsItems
     */
    trailer?: object;
    /**
     * 
     * @type {object}
     * @memberof DvirTrailerDefectsItems
     */
    vehicle?: object;
}
/**
 * 
 * @export
 * @interface DvirVehicle
 */
export interface DvirVehicle {
    /**
     * ID of the vehicle.
     * @type {string}
     * @memberof DvirVehicle
     */
    id?: string;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof DvirVehicle
     */
    name?: string;
}
/**
 * A list of DVIRs and pagination information.
 * @export
 * @interface DvirsListResponse
 */
export interface DvirsListResponse {
    /**
     * A list of DVIRs.
     * @type {Array<Dvir>}
     * @memberof DvirsListResponse
     */
    data: Array<Dvir>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof DvirsListResponse
     */
    pagination: PaginationResponse;
}
/**
 * The driver\'s ELD settings.
 * @export
 * @interface EldSettingsObjectResponseBody
 */
export interface EldSettingsObjectResponseBody {
    /**
     * The driver\'s ELD rulesets and overrides.
     * @type {Array<DriverRulesetObjectResponseBody>}
     * @memberof EldSettingsObjectResponseBody
     */
    rulesets?: Array<DriverRulesetObjectResponseBody>;
}
/**
 * Bad Gateway
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateBadGatewayErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateBadRequestErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateGatewayTimeoutErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateInternalServerErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateMethodNotAllowedErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateNotFoundErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateNotImplementedErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateRequestBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateRequestBody {
    /**
     * Desired state of engine immobilizer.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateRequestBody
     */
    state: EngineImmobilizerUpdateEngineImmobilizerStateRequestBodyStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EngineImmobilizerUpdateEngineImmobilizerStateRequestBodyStateEnum {
    Disabled = 'ignition_disabled',
    Enabled = 'ignition_enabled'
}

/**
 * 
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateResponseBody {
    /**
     * Vehicle ID
     * @type {number}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateResponseBody
     */
    id: number;
    /**
     * Requested state of the engine immobilizer.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateResponseBody
     */
    state: EngineImmobilizerUpdateEngineImmobilizerStateResponseBodyStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EngineImmobilizerUpdateEngineImmobilizerStateResponseBodyStateEnum {
    Enabled = 'ignition_enabled',
    Disabled = 'ignition_disabled'
}

/**
 * Service unavailable
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateServiceUnavailableErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateTooManyRequestsErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface EngineImmobilizerUpdateEngineImmobilizerStateUnauthorizedErrorResponseBody
 */
export interface EngineImmobilizerUpdateEngineImmobilizerStateUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EngineImmobilizerUpdateEngineImmobilizerStateUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * An equipment object.
 * @export
 * @interface Equipment
 */
export interface Equipment {
    /**
     * An equipment identification number.
     * @type {string}
     * @memberof Equipment
     */
    assetSerial?: string;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof Equipment
     */
    externalIds?: { [key: string]: string; };
    /**
     * Unique Samsara ID for the equipment.
     * @type {string}
     * @memberof Equipment
     */
    id: string;
    /**
     * 
     * @type {EquipmentInstalledGateway}
     * @memberof Equipment
     */
    installedGateway?: EquipmentInstalledGateway;
    /**
     * Name of the equipment.
     * @type {string}
     * @memberof Equipment
     */
    name?: string;
    /**
     * Notes about a piece of equipment. Samsara supports a maximum of 255 chars.
     * @type {string}
     * @memberof Equipment
     */
    notes?: string;
    /**
     * An array of all tag mini-objects that are associated with the given equipment.
     * @type {Array<TagTinyResponse>}
     * @memberof Equipment
     */
    tags?: Array<TagTinyResponse>;
}
/**
 * Engine RPM reading.
 * @export
 * @interface EquipmentEngineRpm
 */
export interface EquipmentEngineRpm {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentEngineRpm
     */
    time: string;
    /**
     * The revolutions per minute of the engine.
     * @type {number}
     * @memberof EquipmentEngineRpm
     */
    value: number;
}
/**
 * [DEPRECATED] Please use either `gatewayEngineSeconds` or `obdEngineSeconds`.
 * @export
 * @interface EquipmentEngineSeconds
 */
export interface EquipmentEngineSeconds {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentEngineSeconds
     */
    time: string;
    /**
     * An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.
     * @type {number}
     * @memberof EquipmentEngineSeconds
     */
    value: number;
}
/**
 * [DEPRECATED] Please use either `gatewayEngineStates` or `obdEngineStates`.
 * @export
 * @interface EquipmentEngineState
 */
export interface EquipmentEngineState {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentEngineState
     */
    time: string;
    /**
     * An approximation of engine state based on readings the AG24 receives from the aux/digio cable.
     * @type {string}
     * @memberof EquipmentEngineState
     */
    value: EquipmentEngineStateValueEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EquipmentEngineStateValueEnum {
    Off = 'Off',
    On = 'On'
}

/**
 * Fuel percent reading.
 * @export
 * @interface EquipmentFuelPercent
 */
export interface EquipmentFuelPercent {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentFuelPercent
     */
    time: string;
    /**
     * The percent of fuel in the unit of equipment.
     * @type {number}
     * @memberof EquipmentFuelPercent
     */
    value: number;
}
/**
 * Engine seconds reading from the aux/digio cable.
 * @export
 * @interface EquipmentGatewayEngineSeconds
 */
export interface EquipmentGatewayEngineSeconds {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentGatewayEngineSeconds
     */
    time: string;
    /**
     * An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.
     * @type {number}
     * @memberof EquipmentGatewayEngineSeconds
     */
    value: number;
}
/**
 * Engine state reading from the aux/digio cable.
 * @export
 * @interface EquipmentGatewayEngineState
 */
export interface EquipmentGatewayEngineState {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentGatewayEngineState
     */
    time: string;
    /**
     * An approximation of engine state based on readings the AG24 receives from the aux/digio cable.
     * @type {string}
     * @memberof EquipmentGatewayEngineState
     */
    value: EquipmentGatewayEngineStateValueEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EquipmentGatewayEngineStateValueEnum {
    Off = 'Off',
    On = 'On'
}

/**
 * Engine seconds reading from the J1939/CAT cable.
 * @export
 * @interface EquipmentGatewayJ1939EngineSeconds
 */
export interface EquipmentGatewayJ1939EngineSeconds {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentGatewayJ1939EngineSeconds
     */
    time: string;
    /**
     * An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power and an offset provided manually through the Samsara cloud dashboard.
     * @type {number}
     * @memberof EquipmentGatewayJ1939EngineSeconds
     */
    value: number;
}
/**
 * GPS odometer reading.
 * @export
 * @interface EquipmentGpsOdometerMeters
 */
export interface EquipmentGpsOdometerMeters {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentGpsOdometerMeters
     */
    time: string;
    /**
     * An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
     * @type {number}
     * @memberof EquipmentGpsOdometerMeters
     */
    value: number;
}
/**
 * 
 * @export
 * @interface EquipmentInstalledGateway
 */
export interface EquipmentInstalledGateway {
    /**
     * The model of the installed Samsara gateway.
     * @type {string}
     * @memberof EquipmentInstalledGateway
     */
    model?: string;
    /**
     * The serial of the installed Samsara gateway.
     * @type {string}
     * @memberof EquipmentInstalledGateway
     */
    serial?: string;
}
/**
 * List of all equipment objects, and pagination information.
 * @export
 * @interface EquipmentListResponse
 */
export interface EquipmentListResponse {
    /**
     * List of equipment objects.
     * @type {Array<Equipment>}
     * @memberof EquipmentListResponse
     */
    data: Array<Equipment>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EquipmentListResponse
     */
    pagination: PaginationResponse;
}
/**
 * Location reading.
 * @export
 * @interface EquipmentLocation
 */
export interface EquipmentLocation {
    /**
     * Heading of the unit of equipment in degrees.
     * @type {number}
     * @memberof EquipmentLocation
     */
    heading?: number;
    /**
     * GPS latitude represented in degrees
     * @type {number}
     * @memberof EquipmentLocation
     */
    latitude: number;
    /**
     * GPS longitude represented in degrees
     * @type {number}
     * @memberof EquipmentLocation
     */
    longitude: number;
    /**
     * GPS speed of the unit of equipment in miles per hour.
     * @type {number}
     * @memberof EquipmentLocation
     */
    speed?: number;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof EquipmentLocation
     */
    time: string;
}
/**
 * A time-series of equipment locations and pagination information
 * @export
 * @interface EquipmentLocationsListResponse
 */
export interface EquipmentLocationsListResponse {
    /**
     * Time-series of locations for the specified units of equipment.
     * @type {Array<EquipmentLocationsListResponseData>}
     * @memberof EquipmentLocationsListResponse
     */
    data: Array<EquipmentLocationsListResponseData>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EquipmentLocationsListResponse
     */
    pagination: PaginationResponse;
}
/**
 * A unit of equipment and its time-series of location events.
 * @export
 * @interface EquipmentLocationsListResponseData
 */
export interface EquipmentLocationsListResponseData {
    /**
     * Unique Samsara ID for the equipment.
     * @type {string}
     * @memberof EquipmentLocationsListResponseData
     */
    id: string;
    /**
     * A time-series of location events for the given unit of equipment.
     * @type {Array<EquipmentLocation>}
     * @memberof EquipmentLocationsListResponseData
     */
    locations: Array<EquipmentLocation>;
    /**
     * Name of the equipment.
     * @type {string}
     * @memberof EquipmentLocationsListResponseData
     */
    name: string;
}
/**
 * The most recent equipment locations and pagination information
 * @export
 * @interface EquipmentLocationsResponse
 */
export interface EquipmentLocationsResponse {
    /**
     * List of the most recent locations for the specified units of equipment.
     * @type {Array<EquipmentLocationsResponseData>}
     * @memberof EquipmentLocationsResponse
     */
    data: Array<EquipmentLocationsResponseData>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EquipmentLocationsResponse
     */
    pagination: PaginationResponse;
}
/**
 * A unit of equipment and its most recent location.
 * @export
 * @interface EquipmentLocationsResponseData
 */
export interface EquipmentLocationsResponseData {
    /**
     * Unique Samsara ID for the equipment.
     * @type {string}
     * @memberof EquipmentLocationsResponseData
     */
    id: string;
    /**
     * 
     * @type {EquipmentLocation}
     * @memberof EquipmentLocationsResponseData
     */
    location: EquipmentLocation;
    /**
     * Name of the equipment.
     * @type {string}
     * @memberof EquipmentLocationsResponseData
     */
    name: string;
}
/**
 * Engine seconds reading from on-board diagnostics.
 * @export
 * @interface EquipmentObdEngineSeconds
 */
export interface EquipmentObdEngineSeconds {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentObdEngineSeconds
     */
    time: string;
    /**
     * The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics.
     * @type {number}
     * @memberof EquipmentObdEngineSeconds
     */
    value: number;
}
/**
 * Engine state reading from on-board diagnostics.
 * @export
 * @interface EquipmentObdEngineState
 */
export interface EquipmentObdEngineState {
    /**
     * UTC timestamp of the time the data point was generated by the equipment, in RFC3339 format.
     * @type {string}
     * @memberof EquipmentObdEngineState
     */
    time: string;
    /**
     * The state of the engine read from on-board diagnostics.
     * @type {string}
     * @memberof EquipmentObdEngineState
     */
    value: EquipmentObdEngineStateValueEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum EquipmentObdEngineStateValueEnum {
    Off = 'Off',
    On = 'On',
    Idle = 'Idle'
}

/**
 * Bad Gateway
 * @export
 * @interface EquipmentPatchEquipmentBadGatewayErrorResponseBody
 */
export interface EquipmentPatchEquipmentBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface EquipmentPatchEquipmentBadRequestErrorResponseBody
 */
export interface EquipmentPatchEquipmentBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface EquipmentPatchEquipmentGatewayTimeoutErrorResponseBody
 */
export interface EquipmentPatchEquipmentGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface EquipmentPatchEquipmentInternalServerErrorResponseBody
 */
export interface EquipmentPatchEquipmentInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface EquipmentPatchEquipmentMethodNotAllowedErrorResponseBody
 */
export interface EquipmentPatchEquipmentMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface EquipmentPatchEquipmentNotFoundErrorResponseBody
 */
export interface EquipmentPatchEquipmentNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface EquipmentPatchEquipmentNotImplementedErrorResponseBody
 */
export interface EquipmentPatchEquipmentNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface EquipmentPatchEquipmentRequestBody
 */
export interface EquipmentPatchEquipmentRequestBody {
    /**
     * List of attributes associated with the entity
     * @type {Array<GoaAttributeTiny>}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    attributes?: Array<GoaAttributeTiny>;
    /**
     * When you provide a manual engine hours override, Samsara will begin updating a equipment\'s engine hours used since this override was set.
     * @type {number}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    engineHours?: number;
    /**
     * The serial number of the equipment.
     * @type {string}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    equipmentSerialNumber?: string;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * The unique Samsara ID of the Equipment. This is automatically generated when the Equipment object is created. It cannot be changed.
     * @type {string}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    id?: string;
    /**
     * The human-readable name of the Equipment. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. By default, this name is the serial number of the Samsara Asset Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    name?: string;
    /**
     * These are generic notes about the Equipment. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    notes?: string;
    /**
     * When you provide a manual odometer override, Samsara will begin updating a equipment\'s odometer using GPS distance traveled since this override was set.
     * @type {number}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    odometerMeters?: number;
    /**
     * An array of IDs of tags to associate with this equipment.
     * @type {Array<string>}
     * @memberof EquipmentPatchEquipmentRequestBody
     */
    tagIds?: Array<string>;
}
/**
 * 
 * @export
 * @interface EquipmentPatchEquipmentResponseBody
 */
export interface EquipmentPatchEquipmentResponseBody {
    /**
     * 
     * @type {EquipmentWithAttributesResponseObjectResponseBody}
     * @memberof EquipmentPatchEquipmentResponseBody
     */
    data: EquipmentWithAttributesResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface EquipmentPatchEquipmentServiceUnavailableErrorResponseBody
 */
export interface EquipmentPatchEquipmentServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface EquipmentPatchEquipmentTooManyRequestsErrorResponseBody
 */
export interface EquipmentPatchEquipmentTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface EquipmentPatchEquipmentUnauthorizedErrorResponseBody
 */
export interface EquipmentPatchEquipmentUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof EquipmentPatchEquipmentUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof EquipmentPatchEquipmentUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * A response containing an equipment object.
 * @export
 * @interface EquipmentResponse
 */
export interface EquipmentResponse {
    /**
     * 
     * @type {Equipment}
     * @memberof EquipmentResponse
     */
    data: Equipment;
}
/**
 * A time-series of equipment stats and pagination information
 * @export
 * @interface EquipmentStatsListResponse
 */
export interface EquipmentStatsListResponse {
    /**
     * Time-series of stats for the specified units of equipment and stat types.
     * @type {Array<EquipmentStatsListResponseData>}
     * @memberof EquipmentStatsListResponse
     */
    data: Array<EquipmentStatsListResponseData>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EquipmentStatsListResponse
     */
    pagination: PaginationResponse;
}
/**
 * A unit of equipment and its time-series of stats events.
 * @export
 * @interface EquipmentStatsListResponseData
 */
export interface EquipmentStatsListResponseData {
    /**
     * A time-series of engine RPM readings for the given unit of equipment.
     * @type {Array<EquipmentEngineRpm>}
     * @memberof EquipmentStatsListResponseData
     */
    engineRpm?: Array<EquipmentEngineRpm>;
    /**
     * [DEPRECATED] Please use either `gatewayEngineSeconds`, `obdEngineSeconds`, or `gatewayJ1939EngineSeconds`.
     * @type {Array<EquipmentEngineSeconds>}
     * @memberof EquipmentStatsListResponseData
     */
    engineSeconds?: Array<EquipmentEngineSeconds>;
    /**
     * [DEPRECATED] Please use either `gatewayEngineStates` or `obdEngineStates`.
     * @type {Array<EquipmentEngineState>}
     * @memberof EquipmentStatsListResponseData
     */
    engineStates?: Array<EquipmentEngineState>;
    /**
     * A time-series of fuel percent level changes for the given unit of equipment.
     * @type {Array<EquipmentFuelPercent>}
     * @memberof EquipmentStatsListResponseData
     */
    fuelPercent?: Array<EquipmentFuelPercent>;
    /**
     * A time-series of engine seconds readings for the given unit of equipment as an approximate based on readings from the AG24\'s aux/digio cable.
     * @type {Array<EquipmentGatewayEngineSeconds>}
     * @memberof EquipmentStatsListResponseData
     */
    gatewayEngineSeconds?: Array<EquipmentGatewayEngineSeconds>;
    /**
     * A time-series of engine state changes (as read from the AG24\'s aux/digio cable) for the given unit of equipment.
     * @type {Array<EquipmentGatewayEngineState>}
     * @memberof EquipmentStatsListResponseData
     */
    gatewayEngineState?: Array<EquipmentGatewayEngineState>;
    /**
     * A time-series of engine seconds readings for the given unit of equipment as an approximate based on readings from the AG24\'s CAT/J1939 cable.
     * @type {Array<EquipmentGatewayJ1939EngineSeconds>}
     * @memberof EquipmentStatsListResponseData
     */
    gatewayJ1939EngineSeconds?: Array<EquipmentGatewayJ1939EngineSeconds>;
    /**
     * A time-series of GPS odometer readings for the given unit of equipment.
     * @type {Array<EquipmentGpsOdometerMeters>}
     * @memberof EquipmentStatsListResponseData
     */
    gpsOdometerMeters?: Array<EquipmentGpsOdometerMeters>;
    /**
     * Unique Samsara ID for the equipment.
     * @type {string}
     * @memberof EquipmentStatsListResponseData
     */
    id: string;
    /**
     * Name of the equipment.
     * @type {string}
     * @memberof EquipmentStatsListResponseData
     */
    name: string;
    /**
     * A time-series of engine seconds readings for the given unit of equipment directly from on-board diagnostics.
     * @type {Array<EquipmentObdEngineSeconds>}
     * @memberof EquipmentStatsListResponseData
     */
    obdEngineSeconds?: Array<EquipmentObdEngineSeconds>;
    /**
     * A time-series of engine state changes (as read from on-board diagnostics) for the given unit of equipment.
     * @type {Array<EquipmentObdEngineState>}
     * @memberof EquipmentStatsListResponseData
     */
    obdEngineState?: Array<EquipmentObdEngineState>;
}
/**
 * The most recent equipment stats and pagination information
 * @export
 * @interface EquipmentStatsResponse
 */
export interface EquipmentStatsResponse {
    /**
     * List of the most recent stats for the specified units of equipment and stat types.
     * @type {Array<EquipmentStatsResponseData>}
     * @memberof EquipmentStatsResponse
     */
    data: Array<EquipmentStatsResponseData>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof EquipmentStatsResponse
     */
    pagination: PaginationResponse;
}
/**
 * A unit of equipment and its most recent stat.
 * @export
 * @interface EquipmentStatsResponseData
 */
export interface EquipmentStatsResponseData {
    /**
     * 
     * @type {EquipmentEngineRpm}
     * @memberof EquipmentStatsResponseData
     */
    engineRpm?: EquipmentEngineRpm;
    /**
     * 
     * @type {EquipmentEngineSeconds}
     * @memberof EquipmentStatsResponseData
     */
    engineSeconds?: EquipmentEngineSeconds;
    /**
     * 
     * @type {EquipmentEngineState}
     * @memberof EquipmentStatsResponseData
     */
    engineState?: EquipmentEngineState;
    /**
     * 
     * @type {EquipmentFuelPercent}
     * @memberof EquipmentStatsResponseData
     */
    fuelPercent?: EquipmentFuelPercent;
    /**
     * 
     * @type {EquipmentGatewayEngineSeconds}
     * @memberof EquipmentStatsResponseData
     */
    gatewayEngineSeconds?: EquipmentGatewayEngineSeconds;
    /**
     * 
     * @type {EquipmentGatewayEngineState}
     * @memberof EquipmentStatsResponseData
     */
    gatewayEngineState?: EquipmentGatewayEngineState;
    /**
     * 
     * @type {EquipmentGpsOdometerMeters}
     * @memberof EquipmentStatsResponseData
     */
    gpsOdometerMeters?: EquipmentGpsOdometerMeters;
    /**
     * Unique Samsara ID for the equipment.
     * @type {string}
     * @memberof EquipmentStatsResponseData
     */
    id: string;
    /**
     * Name of the equipment.
     * @type {string}
     * @memberof EquipmentStatsResponseData
     */
    name: string;
    /**
     * 
     * @type {EquipmentObdEngineSeconds}
     * @memberof EquipmentStatsResponseData
     */
    obdEngineSeconds?: EquipmentObdEngineSeconds;
    /**
     * 
     * @type {EquipmentObdEngineState}
     * @memberof EquipmentStatsResponseData
     */
    obdEngineState?: EquipmentObdEngineState;
}
/**
 * The equipment object.
 * @export
 * @interface EquipmentWithAttributesResponseObjectResponseBody
 */
export interface EquipmentWithAttributesResponseObjectResponseBody {
    /**
     * List of attributes associated with the entity
     * @type {Array<GoaAttributeTinyResponseBody>}
     * @memberof EquipmentWithAttributesResponseObjectResponseBody
     */
    attributes?: Array<GoaAttributeTinyResponseBody>;
    /**
     * The serial number of the equipment.
     * @type {string}
     * @memberof EquipmentWithAttributesResponseObjectResponseBody
     */
    equipmentSerialNumber?: string;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof EquipmentWithAttributesResponseObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * The unique Samsara ID of the Equipment. This is automatically generated when the Equipment object is created. It cannot be changed.
     * @type {string}
     * @memberof EquipmentWithAttributesResponseObjectResponseBody
     */
    id?: string;
    /**
     * 
     * @type {GoaGatewayTinyResponseResponseBody}
     * @memberof EquipmentWithAttributesResponseObjectResponseBody
     */
    installedGateway?: GoaGatewayTinyResponseResponseBody;
    /**
     * The human-readable name of the Equipment. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. By default, this name is the serial number of the Samsara Asset Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof EquipmentWithAttributesResponseObjectResponseBody
     */
    name?: string;
    /**
     * These are generic notes about the Equipment. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof EquipmentWithAttributesResponseObjectResponseBody
     */
    notes?: string;
    /**
     * The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting) associated with the Equipment.
     * @type {Array<GoaTagTinyResponseResponseBody>}
     * @memberof EquipmentWithAttributesResponseObjectResponseBody
     */
    tags?: Array<GoaTagTinyResponseResponseBody>;
}
/**
 * A minified driver object.
 * @export
 * @interface ExtendedDriverTinyResponse
 */
export interface ExtendedDriverTinyResponse {
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof ExtendedDriverTinyResponse
     */
    externalIds?: object;
    /**
     * ID of the driver.
     * @type {string}
     * @memberof ExtendedDriverTinyResponse
     */
    id?: string;
    /**
     * Name of the driver.
     * @type {string}
     * @memberof ExtendedDriverTinyResponse
     */
    name?: string;
    /**
     * Username of the driver.
     * @type {string}
     * @memberof ExtendedDriverTinyResponse
     */
    username?: string;
}
/**
 * FFT spectrum data point of a data input.
 * @export
 * @interface FftSpectraDataPoint
 */
export interface FftSpectraDataPoint {
    /**
     * 
     * @type {FftSpectraDataPointFftSpectra}
     * @memberof FftSpectraDataPoint
     */
    fftSpectra?: FftSpectraDataPointFftSpectra;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof FftSpectraDataPoint
     */
    time?: string;
}
/**
 * FFT spectrum data
 * @export
 * @interface FftSpectraDataPointFftSpectra
 */
export interface FftSpectraDataPointFftSpectra {
    /**
     * Frequencies
     * @type {Array<number>}
     * @memberof FftSpectraDataPointFftSpectra
     */
    frequencies?: Array<number>;
    /**
     * X-axis data
     * @type {Array<number>}
     * @memberof FftSpectraDataPointFftSpectra
     */
    x?: Array<number>;
    /**
     * Y-axis data
     * @type {Array<number>}
     * @memberof FftSpectraDataPointFftSpectra
     */
    y?: Array<number>;
    /**
     * Z-axis data
     * @type {Array<number>}
     * @memberof FftSpectraDataPointFftSpectra
     */
    z?: Array<number>;
}
/**
 * 
 * @export
 * @interface FieldObjectPostRequestBody
 */
export interface FieldObjectPostRequestBody {
    /**
     * The name of the field.
     * @type {string}
     * @memberof FieldObjectPostRequestBody
     */
    label: string;
    /**
     * The type of field.
     * @type {string}
     * @memberof FieldObjectPostRequestBody
     */
    type: FieldObjectPostRequestBodyTypeEnum;
    /**
     * 
     * @type {FieldObjectValueRequestBody}
     * @memberof FieldObjectPostRequestBody
     */
    value?: FieldObjectValueRequestBody;
}

/**
    * @export
    * @enum {string}
    */
export enum FieldObjectPostRequestBodyTypeEnum {
    Photo = 'photo',
    String = 'string',
    Number = 'number',
    MultipleChoice = 'multipleChoice',
    Signature = 'signature',
    DateTime = 'dateTime',
    ScannedDocument = 'scannedDocument',
    Barcode = 'barcode'
}

/**
 * 
 * @export
 * @interface FieldObjectResponseBody
 */
export interface FieldObjectResponseBody {
    /**
     * The name of the field.
     * @type {string}
     * @memberof FieldObjectResponseBody
     */
    label: string;
    /**
     * The type of field.
     * @type {string}
     * @memberof FieldObjectResponseBody
     */
    type: FieldObjectResponseBodyTypeEnum;
    /**
     * 
     * @type {FieldObjectValueResponseBody}
     * @memberof FieldObjectResponseBody
     */
    value: FieldObjectValueResponseBody;
}

/**
    * @export
    * @enum {string}
    */
export enum FieldObjectResponseBodyTypeEnum {
    Photo = 'photo',
    String = 'string',
    Number = 'number',
    MultipleChoice = 'multipleChoice',
    Signature = 'signature',
    DateTime = 'dateTime',
    ScannedDocument = 'scannedDocument',
    Barcode = 'barcode'
}

/**
 * The value of the document field. The shape of value depends on the type.
 * @export
 * @interface FieldObjectValueRequestBody
 */
export interface FieldObjectValueRequestBody {
    /**
     * The value of a barcode scanning field. Only present for barcode scanning fields.
     * @type {Array<BarcodeValueObjectRequestBody>}
     * @memberof FieldObjectValueRequestBody
     */
    barcodeValue?: Array<BarcodeValueObjectRequestBody>;
    /**
     * 
     * @type {DateTimeValueObjectRequestBody}
     * @memberof FieldObjectValueRequestBody
     */
    dateTimeValue?: DateTimeValueObjectRequestBody;
    /**
     * The value of a multiple choice field. Only present for multiple choice fields.
     * @type {Array<MultipleChoiceValueObjectRequestBody>}
     * @memberof FieldObjectValueRequestBody
     */
    multipleChoiceValue?: Array<MultipleChoiceValueObjectRequestBody>;
    /**
     * The value of a number field. Only present for number fields.
     * @type {number}
     * @memberof FieldObjectValueRequestBody
     */
    numberValue?: number;
    /**
     * The value of a photo field. Only present for photo fields.
     * @type {Array<PhotoValueObjectRequestBody>}
     * @memberof FieldObjectValueRequestBody
     */
    photoValue?: Array<PhotoValueObjectRequestBody>;
    /**
     * The value of a scanned document field. Only present for scanned document fields.
     * @type {Array<ScannedDocumentValueObjectRequestBody>}
     * @memberof FieldObjectValueRequestBody
     */
    scannedDocumentValue?: Array<ScannedDocumentValueObjectRequestBody>;
    /**
     * 
     * @type {SignatureValueObjectRequestBody}
     * @memberof FieldObjectValueRequestBody
     */
    signatureValue?: SignatureValueObjectRequestBody;
    /**
     * The value of a string field. Only present for string fields.
     * @type {string}
     * @memberof FieldObjectValueRequestBody
     */
    stringValue?: string;
}
/**
 * The value of the document field. The shape of value depends on the type.
 * @export
 * @interface FieldObjectValueResponseBody
 */
export interface FieldObjectValueResponseBody {
    /**
     * The value of a barcode scanning field. Only present for barcode scanning fields.
     * @type {Array<BarcodeValueObjectResponseBody>}
     * @memberof FieldObjectValueResponseBody
     */
    barcodeValue?: Array<BarcodeValueObjectResponseBody>;
    /**
     * 
     * @type {DateTimeValueObjectResponseBody}
     * @memberof FieldObjectValueResponseBody
     */
    dateTimeValue?: DateTimeValueObjectResponseBody;
    /**
     * The value of a multiple choice field. Only present for multiple choice fields.
     * @type {Array<MultipleChoiceValueObjectResponseBody>}
     * @memberof FieldObjectValueResponseBody
     */
    multipleChoiceValue?: Array<MultipleChoiceValueObjectResponseBody>;
    /**
     * The value of a number field. Only present for number fields.
     * @type {number}
     * @memberof FieldObjectValueResponseBody
     */
    numberValue?: number;
    /**
     * The value of a photo field. Only present for photo fields.
     * @type {Array<PhotoValueObjectResponseBody>}
     * @memberof FieldObjectValueResponseBody
     */
    photoValue?: Array<PhotoValueObjectResponseBody>;
    /**
     * The value of a scanned document field. Only present for scanned document fields.
     * @type {Array<ScannedDocumentValueObjectResponseBody>}
     * @memberof FieldObjectValueResponseBody
     */
    scannedDocumentValue?: Array<ScannedDocumentValueObjectResponseBody>;
    /**
     * 
     * @type {SignatureValueObjectResponseBody}
     * @memberof FieldObjectValueResponseBody
     */
    signatureValue?: SignatureValueObjectResponseBody;
    /**
     * The value of a string field. Only present for string fields.
     * @type {string}
     * @memberof FieldObjectValueResponseBody
     */
    stringValue?: string;
}
/**
 * 
 * @export
 * @interface FieldTypesObjectResponseBody
 */
export interface FieldTypesObjectResponseBody {
    /**
     * The type of value this field can have.
     * @type {string}
     * @memberof FieldTypesObjectResponseBody
     */
    fieldType: FieldTypesObjectResponseBodyFieldTypeEnum;
    /**
     * The name of the field type.
     * @type {string}
     * @memberof FieldTypesObjectResponseBody
     */
    label: string;
    /**
     * A list of the multiple choice field option labels.
     * @type {Array<MultipleChoiceFieldTypeMetaDataObjectResponseBody>}
     * @memberof FieldTypesObjectResponseBody
     */
    multipleChoiceFieldTypeMetaData?: Array<MultipleChoiceFieldTypeMetaDataObjectResponseBody>;
    /**
     * 
     * @type {NumberFieldTypeMetaDataObjectResponseBody}
     * @memberof FieldTypesObjectResponseBody
     */
    numberFieldTypeMetaData?: NumberFieldTypeMetaDataObjectResponseBody;
    /**
     * The indicator that states if the field is required.
     * @type {boolean}
     * @memberof FieldTypesObjectResponseBody
     */
    requiredField: boolean;
    /**
     * 
     * @type {SignatureFieldTypeMetaDataObjectResponseBody}
     * @memberof FieldTypesObjectResponseBody
     */
    signatureFieldTypeMetaData?: SignatureFieldTypeMetaDataObjectResponseBody;
}

/**
    * @export
    * @enum {string}
    */
export enum FieldTypesObjectResponseBodyFieldTypeEnum {
    Photo = 'photo',
    String = 'string',
    Number = 'number',
    MultipleChoice = 'multipleChoice',
    Signature = 'signature',
    DateTime = 'dateTime',
    ScannedDocument = 'scannedDocument',
    Barcode = 'barcode'
}

/**
 * An object containing information about the asset the gateway is installed on
 * @export
 * @interface GatewayAssetResponseObjectResponseBody
 */
export interface GatewayAssetResponseObjectResponseBody {
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof GatewayAssetResponseObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * The unique Samsara ID of the asset where the gateway is installed. This is automatically generated when the asset is created and cannot be changed. Use this ID on PATCH vehicle, equipment, or trailer endpoints to update the asset
     * @type {string}
     * @memberof GatewayAssetResponseObjectResponseBody
     */
    id?: string;
}
/**
 * 
 * @export
 * @interface GatewayResponseObjectResponseBody
 */
export interface GatewayResponseObjectResponseBody {
    /**
     * 
     * @type {GatewayAssetResponseObjectResponseBody}
     * @memberof GatewayResponseObjectResponseBody
     */
    asset?: GatewayAssetResponseObjectResponseBody;
    /**
     * 
     * @type {ConnectionStatusResponseObjectResponseBody}
     * @memberof GatewayResponseObjectResponseBody
     */
    connectionStatus?: ConnectionStatusResponseObjectResponseBody;
    /**
     * The model of the gateway installed on the asset.
     * @type {string}
     * @memberof GatewayResponseObjectResponseBody
     */
    model: GatewayResponseObjectResponseBodyModelEnum;
    /**
     * The serial number of the gateway installed on the asset.
     * @type {string}
     * @memberof GatewayResponseObjectResponseBody
     */
    serial: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GatewayResponseObjectResponseBodyModelEnum {
    None = 'none',
    Ag45 = 'AG45',
    Ag41 = 'AG41',
    Ag46Eu = 'AG46EU',
    Ig41 = 'IG41',
    Vg34 = 'VG34',
    Ig15 = 'IG15',
    Em22 = 'EM22',
    Pm7 = 'PM7',
    Vg54Na = 'VG54NA',
    Oemp = 'OEMP',
    Acccrgo = 'ACCCRGO',
    Em01 = 'EM01',
    Baxter = 'Baxter',
    Igmao = 'IGMAO',
    Ekm = 'EKM',
    Dm1 = 'DM1',
    Vg54Eu = 'VG54EU',
    Ig11 = 'IG11',
    Cm12 = 'CM12',
    Ag41Eu = 'AG41EU',
    Im32 = 'IM32',
    Ag46P = 'AG46P',
    Em12 = 'EM12',
    Em21 = 'EM21',
    Cm31 = 'CM31',
    Ag46 = 'AG46',
    Ig61 = 'IG61',
    Oemv = 'OEMV',
    Trailer = 'Trailer',
    Im31 = 'IM31',
    Vg33 = 'VG33',
    Ag24 = 'AG24',
    Hm21 = 'HM21',
    Em23 = 'EM23',
    Vg34Eu = 'VG34EU',
    Ag26Eu = 'AG26EU',
    Ig20 = 'IG20',
    Hm11 = 'HM11',
    Nvr10 = 'NVR10',
    Vg34Fn = 'VG34FN',
    Ig21 = 'IG21',
    Igmai = 'IGMAI',
    Ag15 = 'AG15',
    Oem = 'OEM',
    Ag26 = 'AG26',
    Sg1 = 'SG1',
    Vs25C = 'VS25C',
    Pm20 = 'PM20',
    Accbdh = 'ACCBDH',
    Ag24Eu = 'AG24EU',
    Cmvr = 'CMVR',
    Acchmi10 = 'ACCHMI10',
    Oemr = 'OEMR',
    Vg32 = 'VG32',
    Pm10 = 'PM10',
    Vs2C = 'VS2C',
    Em02 = 'EM02',
    Em11 = 'EM11',
    Im33 = 'IM33',
    Accdm11 = 'ACCDM11',
    Cm52 = 'CM52',
    Cm11 = 'CM11',
    Gw22 = 'GW22',
    Vs25 = 'VS25',
    Cm22 = 'CM22',
    Cm32 = 'CM32',
    Pm8 = 'PM8',
    Wm11 = 'WM11',
    Ag45Eu = 'AG45EU'
}

/**
 * A minified gateway including serial number and model.
 * @export
 * @interface GatewayTiny
 */
export interface GatewayTiny {
    /**
     * The gateway model
     * @type {string}
     * @memberof GatewayTiny
     */
    model?: string;
    /**
     * The serial number of the gateway.
     * @type {string}
     * @memberof GatewayTiny
     */
    serial?: string;
}
/**
 * Bad Gateway
 * @export
 * @interface GatewaysDeleteGatewayBadGatewayErrorResponseBody
 */
export interface GatewaysDeleteGatewayBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface GatewaysDeleteGatewayBadRequestErrorResponseBody
 */
export interface GatewaysDeleteGatewayBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface GatewaysDeleteGatewayGatewayTimeoutErrorResponseBody
 */
export interface GatewaysDeleteGatewayGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface GatewaysDeleteGatewayInternalServerErrorResponseBody
 */
export interface GatewaysDeleteGatewayInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface GatewaysDeleteGatewayMethodNotAllowedErrorResponseBody
 */
export interface GatewaysDeleteGatewayMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface GatewaysDeleteGatewayNotFoundErrorResponseBody
 */
export interface GatewaysDeleteGatewayNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface GatewaysDeleteGatewayNotImplementedErrorResponseBody
 */
export interface GatewaysDeleteGatewayNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * Service unavailable
 * @export
 * @interface GatewaysDeleteGatewayServiceUnavailableErrorResponseBody
 */
export interface GatewaysDeleteGatewayServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface GatewaysDeleteGatewayTooManyRequestsErrorResponseBody
 */
export interface GatewaysDeleteGatewayTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface GatewaysDeleteGatewayUnauthorizedErrorResponseBody
 */
export interface GatewaysDeleteGatewayUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysDeleteGatewayUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysDeleteGatewayUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface GatewaysGetGatewaysBadGatewayErrorResponseBody
 */
export interface GatewaysGetGatewaysBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface GatewaysGetGatewaysBadRequestErrorResponseBody
 */
export interface GatewaysGetGatewaysBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface GatewaysGetGatewaysGatewayTimeoutErrorResponseBody
 */
export interface GatewaysGetGatewaysGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface GatewaysGetGatewaysInternalServerErrorResponseBody
 */
export interface GatewaysGetGatewaysInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface GatewaysGetGatewaysMethodNotAllowedErrorResponseBody
 */
export interface GatewaysGetGatewaysMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface GatewaysGetGatewaysNotFoundErrorResponseBody
 */
export interface GatewaysGetGatewaysNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface GatewaysGetGatewaysNotImplementedErrorResponseBody
 */
export interface GatewaysGetGatewaysNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface GatewaysGetGatewaysResponseBody
 */
export interface GatewaysGetGatewaysResponseBody {
    /**
     * Activated gateways
     * @type {Array<GatewayResponseObjectResponseBody>}
     * @memberof GatewaysGetGatewaysResponseBody
     */
    data: Array<GatewayResponseObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof GatewaysGetGatewaysResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface GatewaysGetGatewaysServiceUnavailableErrorResponseBody
 */
export interface GatewaysGetGatewaysServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface GatewaysGetGatewaysTooManyRequestsErrorResponseBody
 */
export interface GatewaysGetGatewaysTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface GatewaysGetGatewaysUnauthorizedErrorResponseBody
 */
export interface GatewaysGetGatewaysUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysGetGatewaysUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysGetGatewaysUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface GatewaysPostGatewayBadGatewayErrorResponseBody
 */
export interface GatewaysPostGatewayBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface GatewaysPostGatewayBadRequestErrorResponseBody
 */
export interface GatewaysPostGatewayBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface GatewaysPostGatewayGatewayTimeoutErrorResponseBody
 */
export interface GatewaysPostGatewayGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface GatewaysPostGatewayInternalServerErrorResponseBody
 */
export interface GatewaysPostGatewayInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface GatewaysPostGatewayMethodNotAllowedErrorResponseBody
 */
export interface GatewaysPostGatewayMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface GatewaysPostGatewayNotFoundErrorResponseBody
 */
export interface GatewaysPostGatewayNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface GatewaysPostGatewayNotImplementedErrorResponseBody
 */
export interface GatewaysPostGatewayNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface GatewaysPostGatewayRequestBody
 */
export interface GatewaysPostGatewayRequestBody {
    /**
     * Gateway serial number
     * @type {string}
     * @memberof GatewaysPostGatewayRequestBody
     */
    serial: string;
}
/**
 * 
 * @export
 * @interface GatewaysPostGatewayResponseBody
 */
export interface GatewaysPostGatewayResponseBody {
    /**
     * 
     * @type {GatewayResponseObjectResponseBody}
     * @memberof GatewaysPostGatewayResponseBody
     */
    data: GatewayResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface GatewaysPostGatewayServiceUnavailableErrorResponseBody
 */
export interface GatewaysPostGatewayServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface GatewaysPostGatewayTooManyRequestsErrorResponseBody
 */
export interface GatewaysPostGatewayTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface GatewaysPostGatewayUnauthorizedErrorResponseBody
 */
export interface GatewaysPostGatewayUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof GatewaysPostGatewayUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof GatewaysPostGatewayUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface GetAttributesByEntityTypeResponse
 */
export interface GetAttributesByEntityTypeResponse {
    /**
     * 
     * @type {Array<Attribute>}
     * @memberof GetAttributesByEntityTypeResponse
     */
    data?: Array<Attribute>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof GetAttributesByEntityTypeResponse
     */
    pagination?: PaginationResponse;
}
/**
 * 
 * @export
 * @interface GetDocumentTypeResponseObjectResponseBody
 */
export interface GetDocumentTypeResponseObjectResponseBody {
    /**
     * List of the document type conditional field sections.
     * @type {Array<ConditionalFieldSectionObjectResponseBody>}
     * @memberof GetDocumentTypeResponseObjectResponseBody
     */
    conditionalFieldSections?: Array<ConditionalFieldSectionObjectResponseBody>;
    /**
     * The fields associated with this document type.
     * @type {Array<FieldTypesObjectResponseBody>}
     * @memberof GetDocumentTypeResponseObjectResponseBody
     */
    fieldTypes?: Array<FieldTypesObjectResponseBody>;
    /**
     * Universally unique identifier for the document type. This value can be passed in as the documentTypeId when creating a document.
     * @type {string}
     * @memberof GetDocumentTypeResponseObjectResponseBody
     */
    id?: string;
    /**
     * Name of the document type.
     * @type {string}
     * @memberof GetDocumentTypeResponseObjectResponseBody
     */
    name?: string;
    /**
     * ID for the organization this document type belongs to.
     * @type {number}
     * @memberof GetDocumentTypeResponseObjectResponseBody
     */
    orgId?: number;
}
/**
 * A minified Address object
 * @export
 * @interface GoaAddressTinyResponseResponseBody
 */
export interface GoaAddressTinyResponseResponseBody {
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof GoaAddressTinyResponseResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * Id of the address
     * @type {string}
     * @memberof GoaAddressTinyResponseResponseBody
     */
    id: string;
    /**
     * Name of the address
     * @type {string}
     * @memberof GoaAddressTinyResponseResponseBody
     */
    name: string;
}
/**
 * Attribute properties.
 * @export
 * @interface GoaAttributeTiny
 */
export interface GoaAttributeTiny {
    /**
     * Id of the attribute
     * @type {string}
     * @memberof GoaAttributeTiny
     */
    id?: string;
    /**
     * Name of the attribute
     * @type {string}
     * @memberof GoaAttributeTiny
     */
    name?: string;
    /**
     * List of number values associated with the attribute
     * @type {Array<number>}
     * @memberof GoaAttributeTiny
     */
    numberValues?: Array<number>;
    /**
     * List of string values associated with the attribute.
     * @type {Array<string>}
     * @memberof GoaAttributeTiny
     */
    stringValues?: Array<string>;
}
/**
 * Attribute properties.
 * @export
 * @interface GoaAttributeTinyRequestBody
 */
export interface GoaAttributeTinyRequestBody {
    /**
     * Id of the attribute
     * @type {string}
     * @memberof GoaAttributeTinyRequestBody
     */
    id?: string;
    /**
     * Name of the attribute
     * @type {string}
     * @memberof GoaAttributeTinyRequestBody
     */
    name?: string;
    /**
     * List of number values associated with the attribute
     * @type {Array<number>}
     * @memberof GoaAttributeTinyRequestBody
     */
    numberValues?: Array<number>;
    /**
     * List of string values associated with the attribute.
     * @type {Array<string>}
     * @memberof GoaAttributeTinyRequestBody
     */
    stringValues?: Array<string>;
}
/**
 * Attribute properties.
 * @export
 * @interface GoaAttributeTinyResponseBody
 */
export interface GoaAttributeTinyResponseBody {
    /**
     * Id of the attribute
     * @type {string}
     * @memberof GoaAttributeTinyResponseBody
     */
    id?: string;
    /**
     * Name of the attribute
     * @type {string}
     * @memberof GoaAttributeTinyResponseBody
     */
    name?: string;
    /**
     * List of number values associated with the attribute
     * @type {Array<number>}
     * @memberof GoaAttributeTinyResponseBody
     */
    numberValues?: Array<number>;
    /**
     * List of string values associated with the attribute.
     * @type {Array<string>}
     * @memberof GoaAttributeTinyResponseBody
     */
    stringValues?: Array<string>;
}
/**
 * A minified Document object
 * @export
 * @interface GoaDocumentTinyResponseResponseBody
 */
export interface GoaDocumentTinyResponseResponseBody {
    /**
     * Id of the document
     * @type {string}
     * @memberof GoaDocumentTinyResponseResponseBody
     */
    id: string;
    /**
     * Name of the document
     * @type {string}
     * @memberof GoaDocumentTinyResponseResponseBody
     */
    name?: string;
}
/**
 * A minified document type object
 * @export
 * @interface GoaDocumentTypeTinyResponseResponseBody
 */
export interface GoaDocumentTypeTinyResponseResponseBody {
    /**
     * ID of the document type.
     * @type {string}
     * @memberof GoaDocumentTypeTinyResponseResponseBody
     */
    id?: string;
    /**
     * Name of the document type.
     * @type {string}
     * @memberof GoaDocumentTypeTinyResponseResponseBody
     */
    name?: string;
}
/**
 * A minified driver object
 * @export
 * @interface GoaDriverTinyResponseResponseBody
 */
export interface GoaDriverTinyResponseResponseBody {
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof GoaDriverTinyResponseResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the driver
     * @type {string}
     * @memberof GoaDriverTinyResponseResponseBody
     */
    id: string;
    /**
     * Name of the driver
     * @type {string}
     * @memberof GoaDriverTinyResponseResponseBody
     */
    name?: string;
}
/**
 * A minified gateway object
 * @export
 * @interface GoaGatewayTinyResponseResponseBody
 */
export interface GoaGatewayTinyResponseResponseBody {
    /**
     * The model of the gateway installed on the asset.
     * @type {string}
     * @memberof GoaGatewayTinyResponseResponseBody
     */
    model: GoaGatewayTinyResponseResponseBodyModelEnum;
    /**
     * The serial number of the gateway installed on the asset.
     * @type {string}
     * @memberof GoaGatewayTinyResponseResponseBody
     */
    serial: string;
}

/**
    * @export
    * @enum {string}
    */
export enum GoaGatewayTinyResponseResponseBodyModelEnum {
    None = 'none',
    Ag45 = 'AG45',
    Ag41 = 'AG41',
    Ag46Eu = 'AG46EU',
    Ig41 = 'IG41',
    Vg34 = 'VG34',
    Ig15 = 'IG15',
    Em22 = 'EM22',
    Pm7 = 'PM7',
    Vg54Na = 'VG54NA',
    Oemp = 'OEMP',
    Acccrgo = 'ACCCRGO',
    Em01 = 'EM01',
    Baxter = 'Baxter',
    Igmao = 'IGMAO',
    Ekm = 'EKM',
    Dm1 = 'DM1',
    Vg54Eu = 'VG54EU',
    Ig11 = 'IG11',
    Cm12 = 'CM12',
    Ag41Eu = 'AG41EU',
    Im32 = 'IM32',
    Ag46P = 'AG46P',
    Em12 = 'EM12',
    Em21 = 'EM21',
    Cm31 = 'CM31',
    Ag46 = 'AG46',
    Ig61 = 'IG61',
    Oemv = 'OEMV',
    Trailer = 'Trailer',
    Im31 = 'IM31',
    Vg33 = 'VG33',
    Ag24 = 'AG24',
    Hm21 = 'HM21',
    Em23 = 'EM23',
    Vg34Eu = 'VG34EU',
    Ag26Eu = 'AG26EU',
    Ig20 = 'IG20',
    Hm11 = 'HM11',
    Nvr10 = 'NVR10',
    Vg34Fn = 'VG34FN',
    Ig21 = 'IG21',
    Igmai = 'IGMAI',
    Ag15 = 'AG15',
    Oem = 'OEM',
    Ag26 = 'AG26',
    Sg1 = 'SG1',
    Vs25C = 'VS25C',
    Pm20 = 'PM20',
    Accbdh = 'ACCBDH',
    Ag24Eu = 'AG24EU',
    Cmvr = 'CMVR',
    Acchmi10 = 'ACCHMI10',
    Oemr = 'OEMR',
    Vg32 = 'VG32',
    Pm10 = 'PM10',
    Vs2C = 'VS2C',
    Em02 = 'EM02',
    Em11 = 'EM11',
    Im33 = 'IM33',
    Accdm11 = 'ACCDM11',
    Cm52 = 'CM52',
    Cm11 = 'CM11',
    Gw22 = 'GW22',
    Vs25 = 'VS25',
    Cm22 = 'CM22',
    Cm32 = 'CM32',
    Pm8 = 'PM8',
    Wm11 = 'WM11',
    Ag45Eu = 'AG45EU'
}

/**
 * Pagination parameters.
 * @export
 * @interface GoaPaginationResponseResponseBody
 */
export interface GoaPaginationResponseResponseBody {
    /**
     * Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request\'s \'after\' query parameter. This may be an empty string if there are no more pages left to view.
     * @type {string}
     * @memberof GoaPaginationResponseResponseBody
     */
    endCursor: string;
    /**
     * True if there are more pages of results immediately available after this endCursor.
     * @type {boolean}
     * @memberof GoaPaginationResponseResponseBody
     */
    hasNextPage: boolean;
}
/**
 * A minified route stop object
 * @export
 * @interface GoaRouteStopTinyResponseResponseBody
 */
export interface GoaRouteStopTinyResponseResponseBody {
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof GoaRouteStopTinyResponseResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * Id of the route stop
     * @type {string}
     * @memberof GoaRouteStopTinyResponseResponseBody
     */
    id?: string;
    /**
     * Name of the route stop
     * @type {string}
     * @memberof GoaRouteStopTinyResponseResponseBody
     */
    name?: string;
}
/**
 * A minified tag object
 * @export
 * @interface GoaTagTinyResponseResponseBody
 */
export interface GoaTagTinyResponseResponseBody {
    /**
     * ID of the tag
     * @type {string}
     * @memberof GoaTagTinyResponseResponseBody
     */
    id: string;
    /**
     * Name of the tag.
     * @type {string}
     * @memberof GoaTagTinyResponseResponseBody
     */
    name: string;
    /**
     * If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
     * @type {string}
     * @memberof GoaTagTinyResponseResponseBody
     */
    parentTagId?: string;
}
/**
 * A minified vehicle object
 * @export
 * @interface GoaVehicleTinyResponseResponseBody
 */
export interface GoaVehicleTinyResponseResponseBody {
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof GoaVehicleTinyResponseResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the vehicle
     * @type {string}
     * @memberof GoaVehicleTinyResponseResponseBody
     */
    id?: string;
    /**
     * Name of the vehicle
     * @type {string}
     * @memberof GoaVehicleTinyResponseResponseBody
     */
    name?: string;
}
/**
 * Remaining durations for the HOS rest break requirement.
 * @export
 * @interface HosBreak
 */
export interface HosBreak {
    /**
     * Time until the driver has a required break in milliseconds.
     * @type {number}
     * @memberof HosBreak
     */
    timeUntilBreakDurationMs?: number;
}
/**
 * Remaining durations and start times (where applicable) for various HOS rules. See [this page](https://www.samsara.com/fleet/eld-compliance/hours-of-service) for more information on HOS rules.
 * @export
 * @interface HosClocks
 */
export interface HosClocks {
    /**
     * 
     * @type {HosBreak}
     * @memberof HosClocks
     */
    _break?: HosBreak;
    /**
     * 
     * @type {HosCycle}
     * @memberof HosClocks
     */
    cycle?: HosCycle;
    /**
     * 
     * @type {HosDrive}
     * @memberof HosClocks
     */
    drive?: HosDrive;
    /**
     * 
     * @type {HosShift}
     * @memberof HosClocks
     */
    shift?: HosShift;
}
/**
 * HOS clock values for a specific driver, including remaining times and violations.
 * @export
 * @interface HosClocksForDriver
 */
export interface HosClocksForDriver {
    /**
     * 
     * @type {HosClocks}
     * @memberof HosClocksForDriver
     */
    clocks?: HosClocks;
    /**
     * 
     * @type {CurrentDutyStatus}
     * @memberof HosClocksForDriver
     */
    currentDutyStatus?: CurrentDutyStatus;
    /**
     * 
     * @type {VehicleTinyResponse}
     * @memberof HosClocksForDriver
     */
    currentVehicle?: VehicleTinyResponse;
    /**
     * 
     * @type {DriverTinyResponse}
     * @memberof HosClocksForDriver
     */
    driver?: DriverTinyResponse;
    /**
     * 
     * @type {HosViolations}
     * @memberof HosClocksForDriver
     */
    violations?: HosViolations;
}
/**
 * Drivers HOS clocks and pagination info.
 * @export
 * @interface HosClocksResponse
 */
export interface HosClocksResponse {
    /**
     * List of HOS clocks for the specified drivers.
     * @type {Array<HosClocksForDriver>}
     * @memberof HosClocksResponse
     */
    data: Array<HosClocksForDriver>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof HosClocksResponse
     */
    pagination: PaginationResponse;
}
/**
 * Remaining durations and start time for the HOS driving cycle.
 * @export
 * @interface HosCycle
 */
export interface HosCycle {
    /**
     * Remaining on duty or driving time the driver has in the current cycle in milliseconds. For property-carrying drivers, this is the amount of time the driver can be on duty or driving before hitting the 60/70-hour limit in 7/8 days.
     * @type {number}
     * @memberof HosCycle
     */
    cycleRemainingDurationMs?: number;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof HosCycle
     */
    cycleStartedAtTime?: string;
    /**
     * Remaining on duty or driving time the driver has available tomorrow in milliseconds. For property-carrying drivers this is calculated based on the 60/70-hour limit in 7/8 days rule.
     * @type {number}
     * @memberof HosCycle
     */
    cycleTomorrowDurationMs?: number;
}
/**
 * Bad Gateway
 * @export
 * @interface HosDailyLogsGetHosDailyLogsBadGatewayErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface HosDailyLogsGetHosDailyLogsBadRequestErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface HosDailyLogsGetHosDailyLogsGatewayTimeoutErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface HosDailyLogsGetHosDailyLogsInternalServerErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface HosDailyLogsGetHosDailyLogsMethodNotAllowedErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface HosDailyLogsGetHosDailyLogsNotFoundErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface HosDailyLogsGetHosDailyLogsNotImplementedErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface HosDailyLogsGetHosDailyLogsResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsResponseBody {
    /**
     * List of drivers and their HOS daily logs data.
     * @type {Array<HosDailyLogsObjectResponseBody>}
     * @memberof HosDailyLogsGetHosDailyLogsResponseBody
     */
    data: Array<HosDailyLogsObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof HosDailyLogsGetHosDailyLogsResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface HosDailyLogsGetHosDailyLogsServiceUnavailableErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface HosDailyLogsGetHosDailyLogsTooManyRequestsErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface HosDailyLogsGetHosDailyLogsUnauthorizedErrorResponseBody
 */
export interface HosDailyLogsGetHosDailyLogsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof HosDailyLogsGetHosDailyLogsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface HosDailyLogsObjectResponseBody
 */
export interface HosDailyLogsObjectResponseBody {
    /**
     * 
     * @type {DistanceTraveledObjectResponseBody}
     * @memberof HosDailyLogsObjectResponseBody
     */
    distanceTraveled?: DistanceTraveledObjectResponseBody;
    /**
     * 
     * @type {DriverWithTimezoneEldSettingsObjectResponseBody}
     * @memberof HosDailyLogsObjectResponseBody
     */
    driver: DriverWithTimezoneEldSettingsObjectResponseBody;
    /**
     * 
     * @type {DutyStatusDurationObjectResponseBody}
     * @memberof HosDailyLogsObjectResponseBody
     */
    dutyStatusDurations?: DutyStatusDurationObjectResponseBody;
    /**
     * The end time of the daily log in RFC 3339 format. This will be calculated using timezone of the driver.
     * @type {string}
     * @memberof HosDailyLogsObjectResponseBody
     */
    endTime: string;
    /**
     * 
     * @type {LogMetaDataObjectResponseBody}
     * @memberof HosDailyLogsObjectResponseBody
     */
    logMetaData?: LogMetaDataObjectResponseBody;
    /**
     * 
     * @type {DutyStatusDurationObjectResponseBody}
     * @memberof HosDailyLogsObjectResponseBody
     */
    pendingDutyStatusDurations?: DutyStatusDurationObjectResponseBody;
    /**
     * The start time of the daily log in RFC 3339 format. This will be calculated using timezone of the driver.
     * @type {string}
     * @memberof HosDailyLogsObjectResponseBody
     */
    startTime: string;
}
/**
 * Remaining durations for the HOS driving shift limits.
 * @export
 * @interface HosDrive
 */
export interface HosDrive {
    /**
     * Remaining driving time the driver has in the current shift in milliseconds. For property-carrying drivers, this is the amount of time the driver can drive before hitting the 11-hour limit.
     * @type {number}
     * @memberof HosDrive
     */
    driveRemainingDurationMs?: number;
}
/**
 * A single HOS log entry.
 * @export
 * @interface HosLogEntry
 */
export interface HosLogEntry {
    /**
     * The codriver information.
     * @type {Array<DriverTinyResponse>}
     * @memberof HosLogEntry
     */
    codrivers?: Array<DriverTinyResponse>;
    /**
     * The Hours of Service status type.
     * @type {string}
     * @memberof HosLogEntry
     */
    hosStatusType?: HosLogEntryHosStatusTypeEnum;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof HosLogEntry
     */
    logEndTime?: string;
    /**
     * 
     * @type {Location}
     * @memberof HosLogEntry
     */
    logRecordedLocation?: Location;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof HosLogEntry
     */
    logStartTime: string;
    /**
     * Remark associated with the log entry.
     * @type {string}
     * @memberof HosLogEntry
     */
    remark?: string;
    /**
     * 
     * @type {VehicleTinyResponse}
     * @memberof HosLogEntry
     */
    vehicle?: VehicleTinyResponse;
}

/**
    * @export
    * @enum {string}
    */
export enum HosLogEntryHosStatusTypeEnum {
    OffDuty = 'offDuty',
    SleeperBed = 'sleeperBed',
    Driving = 'driving',
    OnDuty = 'onDuty',
    YardMove = 'yardMove',
    PersonalConveyance = 'personalConveyance'
}

/**
 * List of HOS logs for a driver.
 * @export
 * @interface HosLogsForDriver
 */
export interface HosLogsForDriver {
    /**
     * 
     * @type {DriverTinyResponse}
     * @memberof HosLogsForDriver
     */
    driver?: DriverTinyResponse;
    /**
     * List of HOS log entries.
     * @type {Array<HosLogEntry>}
     * @memberof HosLogsForDriver
     */
    hosLogs?: Array<HosLogEntry>;
}
/**
 * HOS logs and pagination info.
 * @export
 * @interface HosLogsResponse
 */
export interface HosLogsResponse {
    /**
     * List of HOS logs for the specified drivers.
     * @type {Array<HosLogsForDriver>}
     * @memberof HosLogsResponse
     */
    data: Array<HosLogsForDriver>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof HosLogsResponse
     */
    pagination: PaginationResponse;
}
/**
 * Remaining durations and start time for the HOS on duty shift limits.
 * @export
 * @interface HosShift
 */
export interface HosShift {
    /**
     * Remaining on duty or driving time the driver in the current shift in milliseconds. For property-carrying drivers, this is the amount of time the driver can be on duty or driving before hitting the 14-hour limit.
     * @type {number}
     * @memberof HosShift
     */
    shiftRemainingDurationMs?: number;
}
/**
 * Durations the driver has been in violation of HOS rules. See [this page](https://www.samsara.com/fleet/eld-compliance/hours-of-service) for more information on HOS rules.
 * @export
 * @interface HosViolations
 */
export interface HosViolations {
    /**
     * Time since the driver has surpassed the driving cycle duration limit in milliseconds. For property-carrying drivers, this is the amount of time the driver has been on duty or driving past the 60/70-hour limit in 7/8 days.
     * @type {number}
     * @memberof HosViolations
     */
    cycleViolationDurationMs?: number;
    /**
     * Time since the driver has surpassed the driving shift duration limit in milliseconds. For property-carrying drivers, this is the amount of time the driver has been driving past the 11-hour limit.
     * @type {number}
     * @memberof HosViolations
     */
    shiftDrivingViolationDurationMs?: number;
}
/**
 * Bad Gateway
 * @export
 * @interface IFTAGetIftaJurisdictionReportsBadGatewayErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface IFTAGetIftaJurisdictionReportsBadRequestErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface IFTAGetIftaJurisdictionReportsGatewayTimeoutErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface IFTAGetIftaJurisdictionReportsInternalServerErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface IFTAGetIftaJurisdictionReportsMethodNotAllowedErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface IFTAGetIftaJurisdictionReportsNotFoundErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface IFTAGetIftaJurisdictionReportsNotImplementedErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface IFTAGetIftaJurisdictionReportsResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsResponseBody {
    /**
     * 
     * @type {IftaJurisdictionReportDataObjectResponseBody}
     * @memberof IFTAGetIftaJurisdictionReportsResponseBody
     */
    data: IftaJurisdictionReportDataObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface IFTAGetIftaJurisdictionReportsServiceUnavailableErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface IFTAGetIftaJurisdictionReportsTooManyRequestsErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface IFTAGetIftaJurisdictionReportsUnauthorizedErrorResponseBody
 */
export interface IFTAGetIftaJurisdictionReportsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaJurisdictionReportsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface IFTAGetIftaVehicleReportsBadGatewayErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface IFTAGetIftaVehicleReportsBadRequestErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface IFTAGetIftaVehicleReportsGatewayTimeoutErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface IFTAGetIftaVehicleReportsInternalServerErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface IFTAGetIftaVehicleReportsMethodNotAllowedErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface IFTAGetIftaVehicleReportsNotFoundErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface IFTAGetIftaVehicleReportsNotImplementedErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface IFTAGetIftaVehicleReportsResponseBody
 */
export interface IFTAGetIftaVehicleReportsResponseBody {
    /**
     * 
     * @type {IftaVehicleReportDataObjectResponseBody}
     * @memberof IFTAGetIftaVehicleReportsResponseBody
     */
    data: IftaVehicleReportDataObjectResponseBody;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof IFTAGetIftaVehicleReportsResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface IFTAGetIftaVehicleReportsServiceUnavailableErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface IFTAGetIftaVehicleReportsTooManyRequestsErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface IFTAGetIftaVehicleReportsUnauthorizedErrorResponseBody
 */
export interface IFTAGetIftaVehicleReportsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof IFTAGetIftaVehicleReportsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Dictionary containing summarized jurisdiction report data.
 * @export
 * @interface IftaJurisdictionReportDataObjectResponseBody
 */
export interface IftaJurisdictionReportDataObjectResponseBody {
    /**
     * List of summarized jurisdiction reports.
     * @type {Array<IftaJurisdictionSummaryObjectResponseBody>}
     * @memberof IftaJurisdictionReportDataObjectResponseBody
     */
    jurisdictionReports: Array<IftaJurisdictionSummaryObjectResponseBody>;
    /**
     * The specified month duration for this IFTA report.
     * @type {string}
     * @memberof IftaJurisdictionReportDataObjectResponseBody
     */
    month?: string;
    /**
     * The specified quarter duration for this IFTA report.
     * @type {string}
     * @memberof IftaJurisdictionReportDataObjectResponseBody
     */
    quarter?: string;
    /**
     * 
     * @type {IftaReportTroubleshootingObjectResponseBody}
     * @memberof IftaJurisdictionReportDataObjectResponseBody
     */
    troubleshooting?: IftaReportTroubleshootingObjectResponseBody;
    /**
     * The specified year for this IFTA report.
     * @type {number}
     * @memberof IftaJurisdictionReportDataObjectResponseBody
     */
    year: number;
}
/**
 * A summary of this jurisdiction\'s IFTA data.
 * @export
 * @interface IftaJurisdictionSummaryObjectResponseBody
 */
export interface IftaJurisdictionSummaryObjectResponseBody {
    /**
     * Jurisdiction code.
     * @type {string}
     * @memberof IftaJurisdictionSummaryObjectResponseBody
     */
    jurisdiction: string;
    /**
     * Liters purchased for all qualified vehicles.
     * @type {number}
     * @memberof IftaJurisdictionSummaryObjectResponseBody
     */
    taxPaidLiters?: number;
    /**
     * Distance in meters traveled on public roads in an IFTA jurisdiction.
     * @type {number}
     * @memberof IftaJurisdictionSummaryObjectResponseBody
     */
    taxableMeters: number;
    /**
     * Total meters driven in this jurisdiction, taxable and non-taxable.
     * @type {number}
     * @memberof IftaJurisdictionSummaryObjectResponseBody
     */
    totalMeters: number;
}
/**
 * IFTA report troubleshooting information.
 * @export
 * @interface IftaReportTroubleshootingObjectResponseBody
 */
export interface IftaReportTroubleshootingObjectResponseBody {
    /**
     * Whether or not fuel purchases were found for this report.
     * @type {boolean}
     * @memberof IftaReportTroubleshootingObjectResponseBody
     */
    noPurchasesFound: boolean;
    /**
     * The number of fuel purchases without a fuel type assigned. Fuel purchases are used to calculate tax paid gallons.
     * @type {number}
     * @memberof IftaReportTroubleshootingObjectResponseBody
     */
    unassignedFuelTypePurchases: number;
    /**
     * The number of vehicles without a fuel type assigned. Vehicles without an assigned fuel type may affect total mileage.
     * @type {number}
     * @memberof IftaReportTroubleshootingObjectResponseBody
     */
    unassignedFuelTypeVehicles: number;
    /**
     * Purchases without an assigned fuel type may affect tax-paid gallons and fleet mpg.
     * @type {number}
     * @memberof IftaReportTroubleshootingObjectResponseBody
     */
    unassignedVehiclePurchases: number;
}
/**
 * Dictionary containing summarized vehicle report data.
 * @export
 * @interface IftaVehicleReportDataObjectResponseBody
 */
export interface IftaVehicleReportDataObjectResponseBody {
    /**
     * The specified month duration for this IFTA report.
     * @type {string}
     * @memberof IftaVehicleReportDataObjectResponseBody
     */
    month?: string;
    /**
     * The specified quarter duration for this IFTA report.
     * @type {string}
     * @memberof IftaVehicleReportDataObjectResponseBody
     */
    quarter?: string;
    /**
     * 
     * @type {IftaReportTroubleshootingObjectResponseBody}
     * @memberof IftaVehicleReportDataObjectResponseBody
     */
    troubleshooting?: IftaReportTroubleshootingObjectResponseBody;
    /**
     * List of summarized vehicle reports.
     * @type {Array<IftaVehicleReportObjectResponseBody>}
     * @memberof IftaVehicleReportDataObjectResponseBody
     */
    vehicleReports: Array<IftaVehicleReportObjectResponseBody>;
    /**
     * The specified year for this IFTA report.
     * @type {number}
     * @memberof IftaVehicleReportDataObjectResponseBody
     */
    year: number;
}
/**
 * A summary of this vehicle\'s IFTA data.
 * @export
 * @interface IftaVehicleReportObjectResponseBody
 */
export interface IftaVehicleReportObjectResponseBody {
    /**
     * List of jurisdiction summaries.
     * @type {Array<IftaJurisdictionSummaryObjectResponseBody>}
     * @memberof IftaVehicleReportObjectResponseBody
     */
    jurisdictions: Array<IftaJurisdictionSummaryObjectResponseBody>;
    /**
     * 
     * @type {GoaVehicleTinyResponseResponseBody}
     * @memberof IftaVehicleReportObjectResponseBody
     */
    vehicle: GoaVehicleTinyResponseResponseBody;
}
/**
 * 
 * @export
 * @interface ImageDataObjectResponseBody
 */
export interface ImageDataObjectResponseBody {
    /**
     * A description of the cameras view. Empty if none can be inferred. (Examples: `frontFacing`, `driverFacing`).
     * @type {string}
     * @memberof ImageDataObjectResponseBody
     */
    cameraView?: string;
    /**
     * The s3 url of the image.
     * @type {string}
     * @memberof ImageDataObjectResponseBody
     */
    url?: string;
    /**
     * The expiry time of the URL in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof ImageDataObjectResponseBody
     */
    urlExpiryTime?: string;
}
/**
 * 
 * @export
 * @interface ImageObjectResponseBody
 */
export interface ImageObjectResponseBody {
    /**
     * The capture time of the image in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof ImageObjectResponseBody
     */
    captureTime?: string;
    /**
     * List of image data objects.
     * @type {Array<ImageDataObjectResponseBody>}
     * @memberof ImageObjectResponseBody
     */
    imageData?: Array<ImageDataObjectResponseBody>;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * This is only for a recurring route.  If set to true, delete all following runs of the route.  If set to false, only delete the current route.
     * @type {boolean}
     * @memberof InlineObject
     */
    apply_to_future_routes?: boolean;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * Duty status to set the driver to. The only supported values are \'ON_DUTY\' and \'OFF_DUTY\'.
     * @type {string}
     * @memberof InlineObject1
     */
    duty_status: string;
    /**
     * Location to associate the duty status change with.
     * @type {string}
     * @memberof InlineObject1
     */
    location?: string;
    /**
     * Remark to associate the duty status change with.
     * @type {string}
     * @memberof InlineObject1
     */
    remark?: string;
    /**
     * Timestamp that the duty status will begin at specified in milliseconds UNIX time. Defaults to the current time if left blank. This can only be set to up to 8 hours in the past.
     * @type {number}
     * @memberof InlineObject1
     */
    status_change_at_ms?: number;
    /**
     * Vehicle ID to associate the duty status change with.
     * @type {number}
     * @memberof InlineObject1
     */
    vehicle_id?: number;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * IDs of the drivers for whom the messages are sent to.
     * @type {Array<number>}
     * @memberof InlineObject2
     */
    driverIds: Array<number>;
    /**
     * The text sent in the message.
     * @type {string}
     * @memberof InlineObject2
     */
    text: string;
}
/**
 * 
 * @export
 * @interface InlineObject3
 */
export interface InlineObject3 {
    /**
     * End of the time range, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof InlineObject3
     */
    endMs: number;
    /**
     * Beginning of the time range, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof InlineObject3
     */
    startMs: number;
}
/**
 * 
 * @export
 * @interface InlineObject4
 */
export interface InlineObject4 {
    /**
     * List of sensor IDs to query.
     * @type {Array<number>}
     * @memberof InlineObject4
     */
    sensors: Array<number>;
}
/**
 * 
 * @export
 * @interface InlineObject5
 */
export interface InlineObject5 {
    /**
     * List of sensor IDs to query.
     * @type {Array<number>}
     * @memberof InlineObject5
     */
    sensors: Array<number>;
}
/**
 * 
 * @export
 * @interface InlineObject6
 */
export interface InlineObject6 {
    /**
     * End of the time range, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof InlineObject6
     */
    endMs: number;
    /**
     * 
     * @type {string}
     * @memberof InlineObject6
     */
    fillMissing?: InlineObject6FillMissingEnum;
    /**
     * 
     * @type {Array<V1SensorsHistorySeries>}
     * @memberof InlineObject6
     */
    series: Array<V1SensorsHistorySeries>;
    /**
     * Beginning of the time range, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof InlineObject6
     */
    startMs: number;
    /**
     * Time resolution for which data should be returned, in milliseconds. Specifying 3600000 will return data at hour intervals.
     * @type {number}
     * @memberof InlineObject6
     */
    stepMs: number;
}

/**
    * @export
    * @enum {string}
    */
export enum InlineObject6FillMissingEnum {
    WithNull = 'withNull',
    WithPrevious = 'withPrevious'
}

/**
 * 
 * @export
 * @interface InlineObject7
 */
export interface InlineObject7 {
    /**
     * List of sensor IDs to query.
     * @type {Array<number>}
     * @memberof InlineObject7
     */
    sensors: Array<number>;
}
/**
 * 
 * @export
 * @interface InlineObject8
 */
export interface InlineObject8 {
    /**
     * List of sensor IDs to query.
     * @type {Array<number>}
     * @memberof InlineObject8
     */
    sensors: Array<number>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {AssetResponse}
     * @memberof InlineResponse200
     */
    data?: AssetResponse;
}
/**
 * 
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     * 
     * @type {Array<V1Asset>}
     * @memberof InlineResponse2001
     */
    assets?: Array<V1Asset>;
}
/**
 * 
 * @export
 * @interface InlineResponse2002
 */
export interface InlineResponse2002 {
    /**
     * 
     * @type {Array<V1AssetCurrentLocationsResponse>}
     * @memberof InlineResponse2002
     */
    assets?: Array<V1AssetCurrentLocationsResponse>;
    /**
     * 
     * @type {V1Pagination}
     * @memberof InlineResponse2002
     */
    pagination?: V1Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2003
 */
export interface InlineResponse2003 {
    /**
     * 
     * @type {Array<V1AssetsReefer>}
     * @memberof InlineResponse2003
     */
    data?: Array<V1AssetsReefer>;
    /**
     * 
     * @type {V1Pagination}
     * @memberof InlineResponse2003
     */
    pagination?: V1Pagination;
}
/**
 * 
 * @export
 * @interface InlineResponse2004
 */
export interface InlineResponse2004 {
    /**
     * 
     * @type {Array<V1VehicleMaintenance>}
     * @memberof InlineResponse2004
     */
    vehicles?: Array<V1VehicleMaintenance>;
}
/**
 * A list of messages.
 * @export
 * @interface InlineResponse2005
 */
export interface InlineResponse2005 {
    /**
     * 
     * @type {Array<V1MessageResponse>}
     * @memberof InlineResponse2005
     */
    data?: Array<V1MessageResponse>;
}
/**
 * A list of created messages.
 * @export
 * @interface InlineResponse2006
 */
export interface InlineResponse2006 {
    /**
     * 
     * @type {Array<V1Message>}
     * @memberof InlineResponse2006
     */
    data?: Array<V1Message>;
}
/**
 * 
 * @export
 * @interface InlineResponse2007
 */
export interface InlineResponse2007 {
    /**
     * 
     * @type {V1Pagination}
     * @memberof InlineResponse2007
     */
    pagination?: V1Pagination;
    /**
     * 
     * @type {Array<V1TrailerAssignmentsResponse>}
     * @memberof InlineResponse2007
     */
    trailers?: Array<V1TrailerAssignmentsResponse>;
}
/**
 * 
 * @export
 * @interface InlineResponse2008
 */
export interface InlineResponse2008 {
    /**
     * 
     * @type {Array<V1Machine>}
     * @memberof InlineResponse2008
     */
    machines?: Array<V1Machine>;
}
/**
 * 
 * @export
 * @interface InlineResponse2009
 */
export interface InlineResponse2009 {
    /**
     * 
     * @type {Array<V1Sensor>}
     * @memberof InlineResponse2009
     */
    sensors?: Array<V1Sensor>;
}
/**
 * Active J1939D1 statuses of a device.
 * @export
 * @interface J1939D1StatusDataPoint
 */
export interface J1939D1StatusDataPoint {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof J1939D1StatusDataPoint
     */
    time?: string;
    /**
     * List of active statuses.
     * @type {Array<J1939D1StatusDataPointValue>}
     * @memberof J1939D1StatusDataPoint
     */
    value?: Array<J1939D1StatusDataPointValue>;
}
/**
 * A single J1939D1 status
 * @export
 * @interface J1939D1StatusDataPointValue
 */
export interface J1939D1StatusDataPointValue {
    /**
     * 
     * @type {number}
     * @memberof J1939D1StatusDataPointValue
     */
    amberLampStatus?: number;
    /**
     * 
     * @type {number}
     * @memberof J1939D1StatusDataPointValue
     */
    fmi?: number;
    /**
     * 
     * @type {number}
     * @memberof J1939D1StatusDataPointValue
     */
    milStatus?: number;
    /**
     * 
     * @type {number}
     * @memberof J1939D1StatusDataPointValue
     */
    occuranceCount?: number;
    /**
     * 
     * @type {number}
     * @memberof J1939D1StatusDataPointValue
     */
    protectLampStatus?: number;
    /**
     * 
     * @type {number}
     * @memberof J1939D1StatusDataPointValue
     */
    redLampStatus?: number;
    /**
     * 
     * @type {number}
     * @memberof J1939D1StatusDataPointValue
     */
    spn?: number;
    /**
     * 
     * @type {number}
     * @memberof J1939D1StatusDataPointValue
     */
    txId?: number;
}
/**
 * A list of Addresses and pagination information.
 * @export
 * @interface ListAddressesResponse
 */
export interface ListAddressesResponse {
    /**
     * A list of Addresses.
     * @type {Array<Address>}
     * @memberof ListAddressesResponse
     */
    data: Array<Address>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListAddressesResponse
     */
    pagination: PaginationResponse;
}
/**
 * A list of carrier-proposed assignments and pagination information.
 * @export
 * @interface ListCarrierProposedAssignmentResponse
 */
export interface ListCarrierProposedAssignmentResponse {
    /**
     * A list of carrier-proposed assignments
     * @type {Array<CarrierProposedAssignment>}
     * @memberof ListCarrierProposedAssignmentResponse
     */
    data: Array<CarrierProposedAssignment>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListCarrierProposedAssignmentResponse
     */
    pagination: PaginationResponse;
}
/**
 * A list of contacts.
 * @export
 * @interface ListContactsResponse
 */
export interface ListContactsResponse {
    /**
     * 
     * @type {Array<Contact>}
     * @memberof ListContactsResponse
     */
    data?: Array<Contact>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListContactsResponse
     */
    pagination?: PaginationResponse;
}
/**
 * A list of drivers.
 * @export
 * @interface ListDriversResponse
 */
export interface ListDriversResponse {
    /**
     * 
     * @type {Array<Driver>}
     * @memberof ListDriversResponse
     */
    data?: Array<Driver>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListDriversResponse
     */
    pagination?: PaginationResponse;
}
/**
 * 
 * @export
 * @interface ListIndustrialAssetsResponse
 */
export interface ListIndustrialAssetsResponse {
    /**
     * 
     * @type {Array<AssetResponse>}
     * @memberof ListIndustrialAssetsResponse
     */
    data?: Array<AssetResponse>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListIndustrialAssetsResponse
     */
    pagination?: PaginationResponse;
}
/**
 * A list of tags.
 * @export
 * @interface ListTagsResponse
 */
export interface ListTagsResponse {
    /**
     * 
     * @type {Array<Tag>}
     * @memberof ListTagsResponse
     */
    data?: Array<Tag>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListTagsResponse
     */
    pagination?: PaginationResponse;
}
/**
 * A list of user roles.
 * @export
 * @interface ListUserRolesResponse
 */
export interface ListUserRolesResponse {
    /**
     * A list of user roles
     * @type {Array<UserRole>}
     * @memberof ListUserRolesResponse
     */
    data?: Array<UserRole>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListUserRolesResponse
     */
    pagination?: PaginationResponse;
}
/**
 * A list of users.
 * @export
 * @interface ListUsersResponse
 */
export interface ListUsersResponse {
    /**
     * A list of users.
     * @type {Array<User>}
     * @memberof ListUsersResponse
     */
    data?: Array<User>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListUsersResponse
     */
    pagination?: PaginationResponse;
}
/**
 * Response for retrieving a list of vehicles.
 * @export
 * @interface ListVehiclesResponse
 */
export interface ListVehiclesResponse {
    /**
     * 
     * @type {Array<Vehicle>}
     * @memberof ListVehiclesResponse
     */
    data: Array<Vehicle>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListVehiclesResponse
     */
    pagination: PaginationResponse;
}
/**
 * Location object
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * GPS latitude represented in degrees
     * @type {number}
     * @memberof Location
     */
    latitude: number;
    /**
     * GPS longitude represented in degrees
     * @type {number}
     * @memberof Location
     */
    longitude: number;
}
/**
 * A single location data point of a data input.
 * @export
 * @interface LocationDataPoint
 */
export interface LocationDataPoint {
    /**
     * 
     * @type {LocationDataPointGpsLocation}
     * @memberof LocationDataPoint
     */
    gpsLocation?: LocationDataPointGpsLocation;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof LocationDataPoint
     */
    time?: string;
}
/**
 * GPS location information of the data input\'s datapoint.
 * @export
 * @interface LocationDataPointGpsLocation
 */
export interface LocationDataPointGpsLocation {
    /**
     * Formatted address of the location
     * @type {string}
     * @memberof LocationDataPointGpsLocation
     */
    formattedAddress?: string;
    /**
     * Speed of GPS (meters per second)
     * @type {number}
     * @memberof LocationDataPointGpsLocation
     */
    gpsMetersPerSecond?: number;
    /**
     * Heading degrees
     * @type {number}
     * @memberof LocationDataPointGpsLocation
     */
    headingDegrees?: number;
    /**
     * Latitude of the location
     * @type {number}
     * @memberof LocationDataPointGpsLocation
     */
    latitude?: number;
    /**
     * Longitude of the location
     * @type {number}
     * @memberof LocationDataPointGpsLocation
     */
    longitude?: number;
    /**
     * 
     * @type {LocationDataPointGpsLocationPlace}
     * @memberof LocationDataPointGpsLocation
     */
    place?: LocationDataPointGpsLocationPlace;
}
/**
 * Address of the location
 * @export
 * @interface LocationDataPointGpsLocationPlace
 */
export interface LocationDataPointGpsLocationPlace {
    /**
     * City
     * @type {string}
     * @memberof LocationDataPointGpsLocationPlace
     */
    city?: string;
    /**
     * House number
     * @type {string}
     * @memberof LocationDataPointGpsLocationPlace
     */
    houseNumber?: string;
    /**
     * Neighborhood
     * @type {string}
     * @memberof LocationDataPointGpsLocationPlace
     */
    neighborhood?: string;
    /**
     * POI
     * @type {string}
     * @memberof LocationDataPointGpsLocationPlace
     */
    poi?: string;
    /**
     * Postcode
     * @type {string}
     * @memberof LocationDataPointGpsLocationPlace
     */
    postcode?: string;
    /**
     * State
     * @type {string}
     * @memberof LocationDataPointGpsLocationPlace
     */
    state?: string;
    /**
     * Street
     * @type {string}
     * @memberof LocationDataPointGpsLocationPlace
     */
    street?: string;
}
/**
 * The format of the location. This field is required if a location is provided.
 * @export
 * @enum {string}
 */
export enum LocationType {
    Point = 'point',
    Address = 'address',
    DataInput = 'dataInput'
}

/**
 * The metadata of the log.
 * @export
 * @interface LogMetaDataObjectResponseBody
 */
export interface LogMetaDataObjectResponseBody {
    /**
     * Whether the driver has claimed the [Adverse Driving Exemption](https://kb.samsara.com/hc/en-us/articles/360047336792-Adverse-Driving-Exemption) for this HOS day chart.
     * @type {boolean}
     * @memberof LogMetaDataObjectResponseBody
     */
    adverseDrivingClaimed?: boolean;
    /**
     * Whether the driver has claimed the [Big Day Exemption](https://kb.samsara.com/hc/en-us/articles/360055496492-16-hour-Short-haul-Big-Day-Exemption) for this HOS day chart.
     * @type {boolean}
     * @memberof LogMetaDataObjectResponseBody
     */
    bigDayClaimed?: boolean;
    /**
     * The address of the carrier used for this HOS chart.
     * @type {string}
     * @memberof LogMetaDataObjectResponseBody
     */
    carrierFormattedAddress?: string;
    /**
     * The name of the carrier used for this HOS chart.
     * @type {string}
     * @memberof LogMetaDataObjectResponseBody
     */
    carrierName?: string;
    /**
     * The US DOT number of the carrier used for this HOS chart.
     * @type {number}
     * @memberof LogMetaDataObjectResponseBody
     */
    carrierUsDotNumber?: number;
    /**
     * The time this log was certified in RFC 3339 format.
     * @type {string}
     * @memberof LogMetaDataObjectResponseBody
     */
    certifiedAtTime?: string;
    /**
     * The address of the Home Terminal used for this HOS chart.
     * @type {string}
     * @memberof LogMetaDataObjectResponseBody
     */
    homeTerminalFormattedAddress?: string;
    /**
     * The name of the Home Terminal used for this HOS chart.
     * @type {string}
     * @memberof LogMetaDataObjectResponseBody
     */
    homeTerminalName?: string;
    /**
     * Whether this HOS day chart was certified by the driver.
     * @type {boolean}
     * @memberof LogMetaDataObjectResponseBody
     */
    isCertified?: boolean;
    /**
     * Whether the driver has the 150 air-mile Short Haul Exemption active for this HOS day chart.
     * @type {boolean}
     * @memberof LogMetaDataObjectResponseBody
     */
    isUsShortHaulActive?: boolean;
    /**
     * List of shipping document names associated with the driver for the day.
     * @type {string}
     * @memberof LogMetaDataObjectResponseBody
     */
    shippingDocs?: string;
    /**
     * List of trailer names associated with the driver for the day. If a trailer was associated with a log through the driver app the trailer name will be the trailer ID.
     * @type {Array<string>}
     * @memberof LogMetaDataObjectResponseBody
     */
    trailerNames?: Array<string>;
    /**
     * List of vehicles associated with the driver for the day.
     * @type {Array<VehicleResponseResponseBody>}
     * @memberof LogMetaDataObjectResponseBody
     */
    vehicles?: Array<VehicleResponseResponseBody>;
}
/**
 * A single route. Only the fields that have changed are present in the response. All other fields, including the route id, will not be present in the response. For now, only routeStops are included since only Route Tracking updates are supported.
 * @export
 * @interface MinimalRouteResponseBody
 */
export interface MinimalRouteResponseBody {
    /**
     * The route stops in the route. Only stops that have been updated will be included in the response.
     * @type {Array<MinimalRouteStopResponseBody>}
     * @memberof MinimalRouteResponseBody
     */
    stops?: Array<MinimalRouteStopResponseBody>;
}
/**
 * A single route stop for a route.
 * @export
 * @interface MinimalRouteStopResponseBody
 */
export interface MinimalRouteStopResponseBody {
    /**
     * Actual arrival time, if it exists, for the route stop in RFC 3339 format.
     * @type {string}
     * @memberof MinimalRouteStopResponseBody
     */
    actualArrivalTime?: string;
    /**
     * Actual departure time, if it exists, for the route stop in RFC 3339 format.
     * @type {string}
     * @memberof MinimalRouteStopResponseBody
     */
    actualDepartureTime?: string;
    /**
     * The time the stop became en-route, in RFC 3339 format.
     * @type {string}
     * @memberof MinimalRouteStopResponseBody
     */
    enRouteTime?: string;
    /**
     * Estimated time of arrival, if this stop is currently en-route, in RFC 3339 format.
     * @type {string}
     * @memberof MinimalRouteStopResponseBody
     */
    eta?: string;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof MinimalRouteStopResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * Unique identifier for the route stop.
     * @type {string}
     * @memberof MinimalRouteStopResponseBody
     */
    id: string;
    /**
     * Skipped time, if it exists, for the route stop in RFC 3339 format.
     * @type {string}
     * @memberof MinimalRouteStopResponseBody
     */
    skippedTime?: string;
    /**
     * The current state of the route stop.
     * @type {string}
     * @memberof MinimalRouteStopResponseBody
     */
    state: MinimalRouteStopResponseBodyStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum MinimalRouteStopResponseBodyStateEnum {
    Unassigned = 'unassigned',
    Scheduled = 'scheduled',
    EnRoute = 'en route',
    Skipped = 'skipped',
    Arrived = 'arrived',
    Departed = 'departed'
}

/**
 * 
 * @export
 * @interface MultipleChoiceFieldTypeMetaDataObjectResponseBody
 */
export interface MultipleChoiceFieldTypeMetaDataObjectResponseBody {
    /**
     * The option choice label.
     * @type {string}
     * @memberof MultipleChoiceFieldTypeMetaDataObjectResponseBody
     */
    label?: string;
}
/**
 * 
 * @export
 * @interface MultipleChoiceValueObjectRequestBody
 */
export interface MultipleChoiceValueObjectRequestBody {
    /**
     * Boolean representing if the choice has been selected.
     * @type {boolean}
     * @memberof MultipleChoiceValueObjectRequestBody
     */
    selected?: boolean;
    /**
     * Description of the choice.
     * @type {string}
     * @memberof MultipleChoiceValueObjectRequestBody
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface MultipleChoiceValueObjectResponseBody
 */
export interface MultipleChoiceValueObjectResponseBody {
    /**
     * Boolean representing if the choice has been selected.
     * @type {boolean}
     * @memberof MultipleChoiceValueObjectResponseBody
     */
    selected?: boolean;
    /**
     * Description of the choice.
     * @type {string}
     * @memberof MultipleChoiceValueObjectResponseBody
     */
    value?: string;
}
/**
 * A single numeric data point of a data input.
 * @export
 * @interface NumberDataPoint
 */
export interface NumberDataPoint {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof NumberDataPoint
     */
    time?: string;
    /**
     * Numeric value of the data point.
     * @type {number}
     * @memberof NumberDataPoint
     */
    value?: number;
}
/**
 * The number field metadata.
 * @export
 * @interface NumberFieldTypeMetaDataObjectResponseBody
 */
export interface NumberFieldTypeMetaDataObjectResponseBody {
    /**
     * The number of decimal places allowed for the field.
     * @type {number}
     * @memberof NumberFieldTypeMetaDataObjectResponseBody
     */
    numberOfDecimalPlaces?: number;
}
/**
 * Information about your organization.
 * @export
 * @interface OrganizationInfo
 */
export interface OrganizationInfo {
    /**
     * 
     * @type {OrganizationInfoCarrierSettings}
     * @memberof OrganizationInfo
     */
    carrierSettings?: OrganizationInfoCarrierSettings;
    /**
     * ID of the organization.
     * @type {string}
     * @memberof OrganizationInfo
     */
    id?: string;
    /**
     * Name of organization.
     * @type {string}
     * @memberof OrganizationInfo
     */
    name?: string;
}
/**
 * Carrier for a given organization.
 * @export
 * @interface OrganizationInfoCarrierSettings
 */
export interface OrganizationInfoCarrierSettings {
    /**
     * Carrier for a given organization.
     * @type {string}
     * @memberof OrganizationInfoCarrierSettings
     */
    carrierName?: string;
    /**
     * Carrier US DOT Number for the organization.
     * @type {number}
     * @memberof OrganizationInfoCarrierSettings
     */
    dotNumber?: number;
    /**
     * Main office address for a given organization.
     * @type {string}
     * @memberof OrganizationInfoCarrierSettings
     */
    mainOfficeAddress?: string;
}
/**
 * Information about an organization.
 * @export
 * @interface OrganizationInfoResponse
 */
export interface OrganizationInfoResponse {
    /**
     * 
     * @type {OrganizationInfo}
     * @memberof OrganizationInfoResponse
     */
    data?: OrganizationInfo;
}
/**
 * Pagination parameters.
 * @export
 * @interface PaginationResponse
 */
export interface PaginationResponse {
    /**
     * Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request\'s \'after\' query parameter. This may be an empty string if there are no more pages left to view.
     * @type {string}
     * @memberof PaginationResponse
     */
    endCursor: string;
    /**
     * True if there are more pages of results immediately available after this endCursor.
     * @type {boolean}
     * @memberof PaginationResponse
     */
    hasNextPage: boolean;
}
/**
 * If this tag is part a hierarchical tag tree, this is the parent tag, otherwise this will be omitted.
 * @export
 * @interface ParentTag
 */
export interface ParentTag {
    /**
     * The object ID.
     * @type {string}
     * @memberof ParentTag
     */
    id: string;
    /**
     * The tag name.
     * @type {string}
     * @memberof ParentTag
     */
    name?: string;
}
/**
 * A response that corresponds to an element in the original request body.
 * @export
 * @interface PatchAssetDataOutputsSingleResponseResponseBody
 */
export interface PatchAssetDataOutputsSingleResponseResponseBody {
    /**
     * If the request failed, this displays the error message.
     * @type {string}
     * @memberof PatchAssetDataOutputsSingleResponseResponseBody
     */
    errorMessage?: string;
    /**
     * The data output ID.
     * @type {string}
     * @memberof PatchAssetDataOutputsSingleResponseResponseBody
     */
    id: string;
    /**
     * The status code of the request. 200 indicates the request succeeded for this data output. 500 indicates an internal server error.
     * @type {number}
     * @memberof PatchAssetDataOutputsSingleResponseResponseBody
     */
    statusCode: number;
}
/**
 * 
 * @export
 * @interface PatchTagRequest
 */
export interface PatchTagRequest {
    /**
     * The addresses that belong to this tag.
     * @type {Array<string>}
     * @memberof PatchTagRequest
     */
    addresses?: Array<string>;
    /**
     * The trailers, unpowered, and powered assets that belong to this tag.
     * @type {Array<string>}
     * @memberof PatchTagRequest
     */
    assets?: Array<string>;
    /**
     * The drivers that belong to this tag.
     * @type {Array<string>}
     * @memberof PatchTagRequest
     */
    drivers?: Array<string>;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof PatchTagRequest
     */
    externalIds?: { [key: string]: string; };
    /**
     * The machines that belong to this tag.
     * @type {Array<string>}
     * @memberof PatchTagRequest
     */
    machines?: Array<string>;
    /**
     * Name of this tag.
     * @type {string}
     * @memberof PatchTagRequest
     */
    name?: string;
    /**
     * If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
     * @type {string}
     * @memberof PatchTagRequest
     */
    parentTagId?: string;
    /**
     * The sensors that belong to this tag.
     * @type {Array<string>}
     * @memberof PatchTagRequest
     */
    sensors?: Array<string>;
    /**
     * The vehicles that belong to this tag.
     * @type {Array<string>}
     * @memberof PatchTagRequest
     */
    vehicles?: Array<string>;
}
/**
 * 
 * @export
 * @interface PhotoValueObjectRequestBody
 */
export interface PhotoValueObjectRequestBody {
    /**
     * Id of the photo.
     * @type {string}
     * @memberof PhotoValueObjectRequestBody
     */
    id?: string;
    /**
     * Url of the photo.
     * @type {string}
     * @memberof PhotoValueObjectRequestBody
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface PhotoValueObjectResponseBody
 */
export interface PhotoValueObjectResponseBody {
    /**
     * Id of the photo.
     * @type {string}
     * @memberof PhotoValueObjectResponseBody
     */
    id?: string;
    /**
     * Url of the photo.
     * @type {string}
     * @memberof PhotoValueObjectResponseBody
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface ReplaceTagRequest
 */
export interface ReplaceTagRequest {
    /**
     * The addresses that belong to this tag.
     * @type {Array<string>}
     * @memberof ReplaceTagRequest
     */
    addresses?: Array<string>;
    /**
     * The trailers, unpowered, and powered assets that belong to this tag.
     * @type {Array<string>}
     * @memberof ReplaceTagRequest
     */
    assets?: Array<string>;
    /**
     * The drivers that belong to this tag.
     * @type {Array<string>}
     * @memberof ReplaceTagRequest
     */
    drivers?: Array<string>;
    /**
     * The machines that belong to this tag.
     * @type {Array<string>}
     * @memberof ReplaceTagRequest
     */
    machines?: Array<string>;
    /**
     * Name of this tag.
     * @type {string}
     * @memberof ReplaceTagRequest
     */
    name?: string;
    /**
     * If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
     * @type {string}
     * @memberof ReplaceTagRequest
     */
    parentTagId?: string;
    /**
     * The sensors that belong to this tag.
     * @type {Array<string>}
     * @memberof ReplaceTagRequest
     */
    sensors?: Array<string>;
    /**
     * The vehicles that belong to this tag.
     * @type {Array<string>}
     * @memberof ReplaceTagRequest
     */
    vehicles?: Array<string>;
}
/**
 * Information about the user who is resolving a defect.
 * @export
 * @interface ResolvedBy
 */
export interface ResolvedBy {
    /**
     * The Id of user who is resolving the defect.
     * @type {string}
     * @memberof ResolvedBy
     */
    id: string;
    /**
     * The type of user who is resolving the defect. Must be \"mechanic\".
     * @type {string}
     * @memberof ResolvedBy
     */
    type: ResolvedByTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ResolvedByTypeEnum {
    Mechanic = 'mechanic'
}

/**
 * Reverse geocoded information
 * @export
 * @interface ReverseGeoObjectResponseBody
 */
export interface ReverseGeoObjectResponseBody {
    /**
     * Formatted address of the reverse geocoding data.
     * @type {string}
     * @memberof ReverseGeoObjectResponseBody
     */
    formattedLocation?: string;
}
/**
 * A diff of the changes for a route update.
 * @export
 * @interface RouteChangesResponseBody
 */
export interface RouteChangesResponseBody {
    /**
     * 
     * @type {MinimalRouteResponseBody}
     * @memberof RouteChangesResponseBody
     */
    after: MinimalRouteResponseBody;
    /**
     * 
     * @type {MinimalRouteResponseBody}
     * @memberof RouteChangesResponseBody
     */
    before: MinimalRouteResponseBody;
}
/**
 * Route feed object.
 * @export
 * @interface RouteFeedObjectResponseBody
 */
export interface RouteFeedObjectResponseBody {
    /**
     * 
     * @type {RouteChangesResponseBody}
     * @memberof RouteFeedObjectResponseBody
     */
    changes: RouteChangesResponseBody;
    /**
     * The operation that was performed as part of this route update.
     * @type {string}
     * @memberof RouteFeedObjectResponseBody
     */
    operation?: RouteFeedObjectResponseBodyOperationEnum;
    /**
     * 
     * @type {BaseRouteResponseObjectResponseBody}
     * @memberof RouteFeedObjectResponseBody
     */
    route: BaseRouteResponseObjectResponseBody;
    /**
     * The source of this route update. Updates that are triggered by time or by the route being completed are \'automatic\'.
     * @type {string}
     * @memberof RouteFeedObjectResponseBody
     */
    source: RouteFeedObjectResponseBodySourceEnum;
    /**
     * The timestamp of the route in RFC 3339 format.
     * @type {string}
     * @memberof RouteFeedObjectResponseBody
     */
    time: string;
    /**
     * The type of route update. The route tracking updates occur as a route is completed and stops transition from one state to another. Currently only Route Tracking updates are supported, but this will change in the future when additional types are added.
     * @type {string}
     * @memberof RouteFeedObjectResponseBody
     */
    type: RouteFeedObjectResponseBodyTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RouteFeedObjectResponseBodyOperationEnum {
    Scheduled = 'stop scheduled',
    EnRoute = 'stop en route',
    Skipped = 'stop skipped',
    Arrived = 'stop arrived',
    Departed = 'stop departed',
    EtaUpdated = 'stop ETA updated',
    ArrivalTimeUpdated = 'stop arrival time updated',
    CompletionTimeUpdated = 'stop completion time updated'
}
/**
    * @export
    * @enum {string}
    */
export enum RouteFeedObjectResponseBodySourceEnum {
    Automatic = 'automatic',
    Driver = 'driver',
    Admin = 'admin'
}
/**
    * @export
    * @enum {string}
    */
export enum RouteFeedObjectResponseBodyTypeEnum {
    RouteTracking = 'route tracking'
}

/**
 * An optional dictionary, only necessary to override the defaults for route start and end conditions.
 * @export
 * @interface RouteSettingsRequestBody
 */
export interface RouteSettingsRequestBody {
    /**
     * Defaults to \'arriveLastStop\' which ends the route upon arriving at the final stop. The condition \'departLastStop\'  ends the route upon departing the last stop. If \'arriveLastStop\' is set, then the departure time of the final stop should not be set.
     * @type {string}
     * @memberof RouteSettingsRequestBody
     */
    routeCompletionCondition?: RouteSettingsRequestBodyRouteCompletionConditionEnum;
    /**
     * Defaults to \'departFirstStop\' which starts the route upon departing the first stop in the route.  The condition \'arriveFirstStop\' starts the route upon arriving at the first stop in the route. If \'departFirstStop\' is set, the arrival time of the first stop should not be set.
     * @type {string}
     * @memberof RouteSettingsRequestBody
     */
    routeStartingCondition?: RouteSettingsRequestBodyRouteStartingConditionEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RouteSettingsRequestBodyRouteCompletionConditionEnum {
    ArriveLastStop = 'arriveLastStop',
    DepartLastStop = 'departLastStop'
}
/**
    * @export
    * @enum {string}
    */
export enum RouteSettingsRequestBodyRouteStartingConditionEnum {
    DepartFirstStop = 'departFirstStop',
    ArriveFirstStop = 'arriveFirstStop'
}

/**
 * An optional dictionary, only necessary to override the defaults for route start and end conditions.
 * @export
 * @interface RouteSettingsResponseBody
 */
export interface RouteSettingsResponseBody {
    /**
     * Defaults to \'arriveLastStop\' which ends the route upon arriving at the final stop. The condition \'departLastStop\'  ends the route upon departing the last stop. If \'arriveLastStop\' is set, then the departure time of the final stop should not be set.
     * @type {string}
     * @memberof RouteSettingsResponseBody
     */
    routeCompletionCondition?: RouteSettingsResponseBodyRouteCompletionConditionEnum;
    /**
     * Defaults to \'departFirstStop\' which starts the route upon departing the first stop in the route.  The condition \'arriveFirstStop\' starts the route upon arriving at the first stop in the route. If \'departFirstStop\' is set, the arrival time of the first stop should not be set.
     * @type {string}
     * @memberof RouteSettingsResponseBody
     */
    routeStartingCondition?: RouteSettingsResponseBodyRouteStartingConditionEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RouteSettingsResponseBodyRouteCompletionConditionEnum {
    ArriveLastStop = 'arriveLastStop',
    DepartLastStop = 'departLastStop'
}
/**
    * @export
    * @enum {string}
    */
export enum RouteSettingsResponseBodyRouteStartingConditionEnum {
    DepartFirstStop = 'departFirstStop',
    ArriveFirstStop = 'arriveFirstStop'
}

/**
 * Bad Gateway
 * @export
 * @interface RoutesCreateRouteBadGatewayErrorResponseBody
 */
export interface RoutesCreateRouteBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface RoutesCreateRouteBadRequestErrorResponseBody
 */
export interface RoutesCreateRouteBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface RoutesCreateRouteGatewayTimeoutErrorResponseBody
 */
export interface RoutesCreateRouteGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface RoutesCreateRouteInternalServerErrorResponseBody
 */
export interface RoutesCreateRouteInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface RoutesCreateRouteMethodNotAllowedErrorResponseBody
 */
export interface RoutesCreateRouteMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface RoutesCreateRouteNotFoundErrorResponseBody
 */
export interface RoutesCreateRouteNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface RoutesCreateRouteNotImplementedErrorResponseBody
 */
export interface RoutesCreateRouteNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface RoutesCreateRouteRequestBody
 */
export interface RoutesCreateRouteRequestBody {
    /**
     * ID of the driver
     * @type {string}
     * @memberof RoutesCreateRouteRequestBody
     */
    driverId?: string;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof RoutesCreateRouteRequestBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * Name for the route
     * @type {string}
     * @memberof RoutesCreateRouteRequestBody
     */
    name: string;
    /**
     * Notes about the route.
     * @type {string}
     * @memberof RoutesCreateRouteRequestBody
     */
    notes?: string;
    /**
     * 
     * @type {RouteSettingsRequestBody}
     * @memberof RoutesCreateRouteRequestBody
     */
    settings?: RouteSettingsRequestBody;
    /**
     * List of stops along the route. For each stop, exactly one of `addressId` and `singleUseLocation` are required. Depending on the `settings` on your route, either a `scheduledArrivalTime` or `scheduledDepartureTime` must be specified for the first job.
     * @type {Array<CreateRoutesStopRequestObjectRequestBody>}
     * @memberof RoutesCreateRouteRequestBody
     */
    stops: Array<CreateRoutesStopRequestObjectRequestBody>;
    /**
     * ID of the vehicle
     * @type {string}
     * @memberof RoutesCreateRouteRequestBody
     */
    vehicleId?: string;
}
/**
 * 
 * @export
 * @interface RoutesCreateRouteResponseBody
 */
export interface RoutesCreateRouteResponseBody {
    /**
     * 
     * @type {BaseRouteResponseObjectResponseBody}
     * @memberof RoutesCreateRouteResponseBody
     */
    data?: BaseRouteResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface RoutesCreateRouteServiceUnavailableErrorResponseBody
 */
export interface RoutesCreateRouteServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface RoutesCreateRouteTooManyRequestsErrorResponseBody
 */
export interface RoutesCreateRouteTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface RoutesCreateRouteUnauthorizedErrorResponseBody
 */
export interface RoutesCreateRouteUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesCreateRouteUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesCreateRouteUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface RoutesFetchRouteBadGatewayErrorResponseBody
 */
export interface RoutesFetchRouteBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface RoutesFetchRouteBadRequestErrorResponseBody
 */
export interface RoutesFetchRouteBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface RoutesFetchRouteGatewayTimeoutErrorResponseBody
 */
export interface RoutesFetchRouteGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface RoutesFetchRouteInternalServerErrorResponseBody
 */
export interface RoutesFetchRouteInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface RoutesFetchRouteMethodNotAllowedErrorResponseBody
 */
export interface RoutesFetchRouteMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface RoutesFetchRouteNotFoundErrorResponseBody
 */
export interface RoutesFetchRouteNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface RoutesFetchRouteNotImplementedErrorResponseBody
 */
export interface RoutesFetchRouteNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface RoutesFetchRouteResponseBody
 */
export interface RoutesFetchRouteResponseBody {
    /**
     * 
     * @type {BaseRouteResponseObjectResponseBody}
     * @memberof RoutesFetchRouteResponseBody
     */
    data?: BaseRouteResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface RoutesFetchRouteServiceUnavailableErrorResponseBody
 */
export interface RoutesFetchRouteServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface RoutesFetchRouteTooManyRequestsErrorResponseBody
 */
export interface RoutesFetchRouteTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface RoutesFetchRouteUnauthorizedErrorResponseBody
 */
export interface RoutesFetchRouteUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRouteUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRouteUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface RoutesFetchRoutesBadGatewayErrorResponseBody
 */
export interface RoutesFetchRoutesBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface RoutesFetchRoutesBadRequestErrorResponseBody
 */
export interface RoutesFetchRoutesBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface RoutesFetchRoutesGatewayTimeoutErrorResponseBody
 */
export interface RoutesFetchRoutesGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface RoutesFetchRoutesInternalServerErrorResponseBody
 */
export interface RoutesFetchRoutesInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface RoutesFetchRoutesMethodNotAllowedErrorResponseBody
 */
export interface RoutesFetchRoutesMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface RoutesFetchRoutesNotFoundErrorResponseBody
 */
export interface RoutesFetchRoutesNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface RoutesFetchRoutesNotImplementedErrorResponseBody
 */
export interface RoutesFetchRoutesNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface RoutesFetchRoutesResponseBody
 */
export interface RoutesFetchRoutesResponseBody {
    /**
     * An array containing multiple routes.
     * @type {Array<BaseRouteResponseObjectResponseBody>}
     * @memberof RoutesFetchRoutesResponseBody
     */
    data: Array<BaseRouteResponseObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof RoutesFetchRoutesResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface RoutesFetchRoutesServiceUnavailableErrorResponseBody
 */
export interface RoutesFetchRoutesServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface RoutesFetchRoutesTooManyRequestsErrorResponseBody
 */
export interface RoutesFetchRoutesTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface RoutesFetchRoutesUnauthorizedErrorResponseBody
 */
export interface RoutesFetchRoutesUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesFetchRoutesUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesFetchRoutesUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface RoutesGetRoutesFeedBadGatewayErrorResponseBody
 */
export interface RoutesGetRoutesFeedBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface RoutesGetRoutesFeedBadRequestErrorResponseBody
 */
export interface RoutesGetRoutesFeedBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface RoutesGetRoutesFeedGatewayTimeoutErrorResponseBody
 */
export interface RoutesGetRoutesFeedGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface RoutesGetRoutesFeedInternalServerErrorResponseBody
 */
export interface RoutesGetRoutesFeedInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface RoutesGetRoutesFeedMethodNotAllowedErrorResponseBody
 */
export interface RoutesGetRoutesFeedMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface RoutesGetRoutesFeedNotFoundErrorResponseBody
 */
export interface RoutesGetRoutesFeedNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface RoutesGetRoutesFeedNotImplementedErrorResponseBody
 */
export interface RoutesGetRoutesFeedNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface RoutesGetRoutesFeedResponseBody
 */
export interface RoutesGetRoutesFeedResponseBody {
    /**
     * Route feed response.
     * @type {Array<RouteFeedObjectResponseBody>}
     * @memberof RoutesGetRoutesFeedResponseBody
     */
    data: Array<RouteFeedObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof RoutesGetRoutesFeedResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface RoutesGetRoutesFeedServiceUnavailableErrorResponseBody
 */
export interface RoutesGetRoutesFeedServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface RoutesGetRoutesFeedTooManyRequestsErrorResponseBody
 */
export interface RoutesGetRoutesFeedTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface RoutesGetRoutesFeedUnauthorizedErrorResponseBody
 */
export interface RoutesGetRoutesFeedUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesGetRoutesFeedUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesGetRoutesFeedUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface RoutesPatchRouteBadGatewayErrorResponseBody
 */
export interface RoutesPatchRouteBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface RoutesPatchRouteBadRequestErrorResponseBody
 */
export interface RoutesPatchRouteBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface RoutesPatchRouteGatewayTimeoutErrorResponseBody
 */
export interface RoutesPatchRouteGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface RoutesPatchRouteInternalServerErrorResponseBody
 */
export interface RoutesPatchRouteInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface RoutesPatchRouteMethodNotAllowedErrorResponseBody
 */
export interface RoutesPatchRouteMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface RoutesPatchRouteNotFoundErrorResponseBody
 */
export interface RoutesPatchRouteNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface RoutesPatchRouteNotImplementedErrorResponseBody
 */
export interface RoutesPatchRouteNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface RoutesPatchRouteRequestBody
 */
export interface RoutesPatchRouteRequestBody {
    /**
     * ID of the driver
     * @type {string}
     * @memberof RoutesPatchRouteRequestBody
     */
    driverId?: string;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof RoutesPatchRouteRequestBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * Name for the route
     * @type {string}
     * @memberof RoutesPatchRouteRequestBody
     */
    name?: string;
    /**
     * Notes about the route.
     * @type {string}
     * @memberof RoutesPatchRouteRequestBody
     */
    notes?: string;
    /**
     * 
     * @type {RouteSettingsRequestBody}
     * @memberof RoutesPatchRouteRequestBody
     */
    settings?: RouteSettingsRequestBody;
    /**
     * List of stops along the route. If a valid `id` of a stop is provided, that stop will be updated. If no `id` is provided for a passed in stop, that stop will be created. If `id` value are passed in for some stops and not for others, those with `id` value specified will be retained and updated in the original route, those without `id` value specified in the body will be created, and those without `id` value specified that already existed on the route will be deleted. For each new stop, exactly one of `addressId` and `singleUseLocation` are required. Depending on the `settings` on your route, either a `scheduledArrivalTime` or `scheduledDepartureTime` must be specified for the first job, if a new first job is being added.
     * @type {Array<UpdateRoutesStopRequestObjectRequestBody>}
     * @memberof RoutesPatchRouteRequestBody
     */
    stops?: Array<UpdateRoutesStopRequestObjectRequestBody>;
    /**
     * ID of the vehicle
     * @type {string}
     * @memberof RoutesPatchRouteRequestBody
     */
    vehicleId?: string;
}
/**
 * 
 * @export
 * @interface RoutesPatchRouteResponseBody
 */
export interface RoutesPatchRouteResponseBody {
    /**
     * 
     * @type {BaseRouteResponseObjectResponseBody}
     * @memberof RoutesPatchRouteResponseBody
     */
    data?: BaseRouteResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface RoutesPatchRouteServiceUnavailableErrorResponseBody
 */
export interface RoutesPatchRouteServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface RoutesPatchRouteTooManyRequestsErrorResponseBody
 */
export interface RoutesPatchRouteTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface RoutesPatchRouteUnauthorizedErrorResponseBody
 */
export interface RoutesPatchRouteUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof RoutesPatchRouteUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof RoutesPatchRouteUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * This field is used to indicate stops along the route for which an address has not been persisted. This field is mutually exclusive with addressId.
 * @export
 * @interface RoutesSingleUseAddressObjectRequestBody
 */
export interface RoutesSingleUseAddressObjectRequestBody {
    /**
     * Address of the stop.
     * @type {string}
     * @memberof RoutesSingleUseAddressObjectRequestBody
     */
    address?: string;
    /**
     * The latitude of the location
     * @type {number}
     * @memberof RoutesSingleUseAddressObjectRequestBody
     */
    latitude: number;
    /**
     * The longitude of the location
     * @type {number}
     * @memberof RoutesSingleUseAddressObjectRequestBody
     */
    longitude: number;
}
/**
 * This field is used to indicate stops along the route for which an address has not been persisted. This field is mutually exclusive with addressId.
 * @export
 * @interface RoutesSingleUseAddressObjectResponseBody
 */
export interface RoutesSingleUseAddressObjectResponseBody {
    /**
     * Address of the stop.
     * @type {string}
     * @memberof RoutesSingleUseAddressObjectResponseBody
     */
    address?: string;
    /**
     * The latitude of the location
     * @type {number}
     * @memberof RoutesSingleUseAddressObjectResponseBody
     */
    latitude: number;
    /**
     * The longitude of the location
     * @type {number}
     * @memberof RoutesSingleUseAddressObjectResponseBody
     */
    longitude: number;
}
/**
 * 
 * @export
 * @interface RoutesStopResponseObjectResponseBody
 */
export interface RoutesStopResponseObjectResponseBody {
    /**
     * Actual arrival time, if it exists, for the route stop in RFC 3339 format.
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    actualArrivalTime?: string;
    /**
     * Actual departure time, if it exists, for the route stop in RFC 3339 format.
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    actualDepartureTime?: string;
    /**
     * 
     * @type {GoaAddressTinyResponseResponseBody}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    address?: GoaAddressTinyResponseResponseBody;
    /**
     * List of documents associated with the stop.
     * @type {Array<GoaDocumentTinyResponseResponseBody>}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    documents?: Array<GoaDocumentTinyResponseResponseBody>;
    /**
     * The time the stop became en-route, in RFC 3339 format.
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    enRouteTime?: string;
    /**
     * Estimated time of arrival, if this stop is currently en-route, in RFC 3339 format.
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    eta?: string;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * Id of the stop
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    id: string;
    /**
     * Name of the stop
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    name: string;
    /**
     * Notes for the stop
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    notes?: string;
    /**
     * Scheduled arrival time, if it exists, for the stop in RFC 3339 format.
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    scheduledArrivalTime?: string;
    /**
     * Scheduled departure time, if it exists, for the stop in RFC 3339 format.
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    scheduledDepartureTime?: string;
    /**
     * 
     * @type {RoutesSingleUseAddressObjectResponseBody}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    singleUseLocation?: RoutesSingleUseAddressObjectResponseBody;
    /**
     * Skipped time, if it exists, for the route stop in RFC 3339 format.
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    skippedTime?: string;
    /**
     * The current state of the route stop.
     * @type {string}
     * @memberof RoutesStopResponseObjectResponseBody
     */
    state: RoutesStopResponseObjectResponseBodyStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum RoutesStopResponseObjectResponseBodyStateEnum {
    Unassigned = 'unassigned',
    Scheduled = 'scheduled',
    EnRoute = 'en route',
    Skipped = 'skipped',
    Arrived = 'arrived',
    Departed = 'departed'
}

/**
 * A safety event.
 * @export
 * @interface SafetyEvent
 */
export interface SafetyEvent {
    /**
     * The most up-to-date behavior labels associated with the safety event. These labels can be updated by the Safety Report Admin.
     * @type {Array<SafetyEventBehaviorLabel>}
     * @memberof SafetyEvent
     */
    behaviorLabels?: Array<SafetyEventBehaviorLabel>;
    /**
     * 
     * @type {SafetyEventCoachingState}
     * @memberof SafetyEvent
     */
    coachingState?: SafetyEventCoachingState;
    /**
     * URL to download the forward video.
     * @type {string}
     * @memberof SafetyEvent
     */
    downloadForwardVideoUrl?: string;
    /**
     * URL to download the inward video.
     * @type {string}
     * @memberof SafetyEvent
     */
    downloadInwardVideoUrl?: string;
    /**
     * URL to download the tracked inward video.
     * @type {string}
     * @memberof SafetyEvent
     */
    downloadTrackedInwardVideoUrl?: string;
    /**
     * 
     * @type {DriverTinyResponse}
     * @memberof SafetyEvent
     */
    driver?: DriverTinyResponse;
    /**
     * The unique Samsara ID of the safety event.
     * @type {string}
     * @memberof SafetyEvent
     */
    id?: string;
    /**
     * 
     * @type {Location}
     * @memberof SafetyEvent
     */
    location?: Location;
    /**
     * The maximum acceleration value as a multiplier on the force of gravity (g).
     * @type {number}
     * @memberof SafetyEvent
     */
    maxAccelerationGForce?: number;
    /**
     * The time the safety event occurred in RFC 3339 milliseconds format.
     * @type {string}
     * @memberof SafetyEvent
     */
    time?: string;
    /**
     * 
     * @type {VehicleTinyResponse}
     * @memberof SafetyEvent
     */
    vehicle?: VehicleTinyResponse;
}
/**
 * The label and source of the label associated with the safety event.
 * @export
 * @interface SafetyEventBehaviorLabel
 */
export interface SafetyEventBehaviorLabel {
    /**
     * 
     * @type {SafetyEventBehaviorLabelType}
     * @memberof SafetyEventBehaviorLabel
     */
    label: SafetyEventBehaviorLabelType;
    /**
     * 
     * @type {SafetyEventBehaviorLabelSource}
     * @memberof SafetyEventBehaviorLabel
     */
    source: SafetyEventBehaviorLabelSource;
}
/**
 * The source of the label associated with the safety event.
 * @export
 * @enum {string}
 */
export enum SafetyEventBehaviorLabelSource {
    Automated = 'automated',
    UserGenerated = 'userGenerated'
}

/**
 * The label associated with the safety event. This list often changes, so it is recommended that clients gracefully handle any types not enumerated in this list.
 * @export
 * @enum {string}
 */
export enum SafetyEventBehaviorLabelType {
    GenericTailgating = 'genericTailgating',
    GenericDistraction = 'genericDistraction',
    DefensiveDriving = 'defensiveDriving',
    RollingStop = 'rollingStop',
    NearCollison = 'nearCollison',
    Speeding = 'speeding',
    ObstructedCamera = 'obstructedCamera',
    DidNotYield = 'didNotYield',
    NoSeatbelt = 'noSeatbelt',
    MobileUsage = 'mobileUsage',
    Drowsy = 'drowsy',
    LaneDeparture = 'laneDeparture',
    FollowingDistanceSevere = 'followingDistanceSevere',
    FollowingDistanceModerate = 'followingDistanceModerate',
    LateResponse = 'lateResponse',
    Acceleration = 'acceleration',
    Braking = 'braking',
    HarshTurn = 'harshTurn',
    Crash = 'crash',
    RolloverProtection = 'rolloverProtection',
    YawControl = 'yawControl',
    RanRedLight = 'ranRedLight',
    ForwardCollisionWarning = 'forwardCollisionWarning',
    EatingDrinking = 'eatingDrinking',
    Smoking = 'smoking',
    FollowingDistance = 'followingDistance',
    EdgeDistractedDriving = 'edgeDistractedDriving'
}

/**
 * The current coaching status of the event.
 * @export
 * @enum {string}
 */
export enum SafetyEventCoachingState {
    NeedsReview = 'needsReview',
    Coached = 'coached',
    Dismissed = 'dismissed',
    Reviewed = 'reviewed',
    Archived = 'archived',
    ManualReview = 'manualReview',
    NeedsCoaching = 'needsCoaching',
    AutoDismissed = 'autoDismissed',
    NeedsRecognition = 'needsRecognition',
    Recognized = 'recognized',
    Invalid = 'invalid'
}

/**
 * List of safety events.
 * @export
 * @interface SafetyEventsListResponse
 */
export interface SafetyEventsListResponse {
    /**
     * 
     * @type {Array<SafetyEvent>}
     * @memberof SafetyEventsListResponse
     */
    data?: Array<SafetyEvent>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof SafetyEventsListResponse
     */
    pagination?: PaginationResponse;
}
/**
 * 
 * @export
 * @interface ScannedDocumentValueObjectRequestBody
 */
export interface ScannedDocumentValueObjectRequestBody {
    /**
     * Id of the scanned document.
     * @type {string}
     * @memberof ScannedDocumentValueObjectRequestBody
     */
    id?: string;
    /**
     * Url of the scanned document.
     * @type {string}
     * @memberof ScannedDocumentValueObjectRequestBody
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface ScannedDocumentValueObjectResponseBody
 */
export interface ScannedDocumentValueObjectResponseBody {
    /**
     * Id of the scanned document.
     * @type {string}
     * @memberof ScannedDocumentValueObjectResponseBody
     */
    id?: string;
    /**
     * Url of the scanned document.
     * @type {string}
     * @memberof ScannedDocumentValueObjectResponseBody
     */
    url?: string;
}
/**
 * Information set here will be displayed in roadside inspections and in the transferred US DOT datafile.
 * @export
 * @interface SettingsComplianceResponseObjectResponseBody
 */
export interface SettingsComplianceResponseObjectResponseBody {
    /**
     * Allow Unregulated Vehicles
     * @type {boolean}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    allowUnregulatedVehiclesEnabled?: boolean;
    /**
     * Enable Canada HOS
     * @type {boolean}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    canadaHosEnabled?: boolean;
    /**
     * Carrier name of the organization
     * @type {string}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    carrierName?: string;
    /**
     * DOT Number
     * @type {number}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    dotNumber?: number;
    /**
     * Enable Driver Auto-Duty
     * @type {boolean}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    driverAutoDutyEnabled?: boolean;
    /**
     * Drivers Can Edit Certified Log
     * @type {boolean}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    editCertifiedLogsEnabled?: boolean;
    /**
     * Force Manual Location For Duty Status Changes
     * @type {boolean}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    forceManualLocationForDutyStatusChangesEnabled?: boolean;
    /**
     * Force Review of Unassigned HOS
     * @type {boolean}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    forceReviewUnassignedHosEnabled?: boolean;
    /**
     * Office Address
     * @type {string}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    mainOfficeFormattedAddress?: string;
    /**
     * Persistent Duty Status
     * @type {boolean}
     * @memberof SettingsComplianceResponseObjectResponseBody
     */
    persistentDutyStatusEnabled?: boolean;
}
/**
 * Bad Gateway
 * @export
 * @interface SettingsGetComplianceSettingsBadGatewayErrorResponseBody
 */
export interface SettingsGetComplianceSettingsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface SettingsGetComplianceSettingsBadRequestErrorResponseBody
 */
export interface SettingsGetComplianceSettingsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface SettingsGetComplianceSettingsGatewayTimeoutErrorResponseBody
 */
export interface SettingsGetComplianceSettingsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface SettingsGetComplianceSettingsInternalServerErrorResponseBody
 */
export interface SettingsGetComplianceSettingsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface SettingsGetComplianceSettingsMethodNotAllowedErrorResponseBody
 */
export interface SettingsGetComplianceSettingsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface SettingsGetComplianceSettingsNotFoundErrorResponseBody
 */
export interface SettingsGetComplianceSettingsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface SettingsGetComplianceSettingsNotImplementedErrorResponseBody
 */
export interface SettingsGetComplianceSettingsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface SettingsGetComplianceSettingsResponseBody
 */
export interface SettingsGetComplianceSettingsResponseBody {
    /**
     * 
     * @type {SettingsComplianceResponseObjectResponseBody}
     * @memberof SettingsGetComplianceSettingsResponseBody
     */
    data: SettingsComplianceResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface SettingsGetComplianceSettingsServiceUnavailableErrorResponseBody
 */
export interface SettingsGetComplianceSettingsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface SettingsGetComplianceSettingsTooManyRequestsErrorResponseBody
 */
export interface SettingsGetComplianceSettingsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface SettingsGetComplianceSettingsUnauthorizedErrorResponseBody
 */
export interface SettingsGetComplianceSettingsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetComplianceSettingsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetComplianceSettingsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface SettingsGetDriverAppSettingsBadGatewayErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface SettingsGetDriverAppSettingsBadRequestErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface SettingsGetDriverAppSettingsGatewayTimeoutErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface SettingsGetDriverAppSettingsInternalServerErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface SettingsGetDriverAppSettingsMethodNotAllowedErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface SettingsGetDriverAppSettingsNotFoundErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface SettingsGetDriverAppSettingsNotImplementedErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface SettingsGetDriverAppSettingsResponseBody
 */
export interface SettingsGetDriverAppSettingsResponseBody {
    /**
     * 
     * @type {DriverAppSettingsResponseObjectResponseBody}
     * @memberof SettingsGetDriverAppSettingsResponseBody
     */
    data: DriverAppSettingsResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface SettingsGetDriverAppSettingsServiceUnavailableErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface SettingsGetDriverAppSettingsTooManyRequestsErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface SettingsGetDriverAppSettingsUnauthorizedErrorResponseBody
 */
export interface SettingsGetDriverAppSettingsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsGetDriverAppSettingsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface SettingsPatchComplianceSettingsBadGatewayErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface SettingsPatchComplianceSettingsBadRequestErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface SettingsPatchComplianceSettingsGatewayTimeoutErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface SettingsPatchComplianceSettingsInternalServerErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface SettingsPatchComplianceSettingsMethodNotAllowedErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface SettingsPatchComplianceSettingsNotFoundErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface SettingsPatchComplianceSettingsNotImplementedErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * Information set here will be displayed in roadside inspections and in the transferred US DOT datafile. Can be set or updated through the Samsara Settings page or the API at any time. To override these fields for specific drivers, please visit Driver Settings
 * @export
 * @interface SettingsPatchComplianceSettingsRequestBody
 */
export interface SettingsPatchComplianceSettingsRequestBody {
    /**
     * Allow Unregulated Vehicles
     * @type {boolean}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    allowUnregulatedVehiclesEnabled?: boolean;
    /**
     * Enable Canada HOS
     * @type {boolean}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    canadaHosEnabled?: boolean;
    /**
     * Carrier Name / Principal Place of Business Name
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    carrierName?: string;
    /**
     * Carrier US DOT Number
     * @type {number}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    dotNumber?: number;
    /**
     * Enable Driver Auto-Duty
     * @type {boolean}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    driverAutoDutyEnabled?: boolean;
    /**
     * Drivers Can Edit Certified Log
     * @type {boolean}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    editCertifiedLogsEnabled?: boolean;
    /**
     * Force Manual Location For Duty Status Changes
     * @type {boolean}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    forceManualLocationForDutyStatusChangesEnabled?: boolean;
    /**
     * Force Review of Unassigned HOS
     * @type {boolean}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    forceReviewUnassignedHosEnabled?: boolean;
    /**
     * Main Office Address / Principal Place of Businesss Address
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    mainOfficeFormattedAddress?: string;
    /**
     * Persistent Duty Status
     * @type {boolean}
     * @memberof SettingsPatchComplianceSettingsRequestBody
     */
    persistentDutyStatusEnabled?: boolean;
}
/**
 * 
 * @export
 * @interface SettingsPatchComplianceSettingsResponseBody
 */
export interface SettingsPatchComplianceSettingsResponseBody {
    /**
     * 
     * @type {SettingsComplianceResponseObjectResponseBody}
     * @memberof SettingsPatchComplianceSettingsResponseBody
     */
    data: SettingsComplianceResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface SettingsPatchComplianceSettingsServiceUnavailableErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface SettingsPatchComplianceSettingsTooManyRequestsErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface SettingsPatchComplianceSettingsUnauthorizedErrorResponseBody
 */
export interface SettingsPatchComplianceSettingsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchComplianceSettingsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface SettingsPatchDriverAppSettingsBadGatewayErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface SettingsPatchDriverAppSettingsBadRequestErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface SettingsPatchDriverAppSettingsGatewayTimeoutErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface SettingsPatchDriverAppSettingsInternalServerErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface SettingsPatchDriverAppSettingsMethodNotAllowedErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface SettingsPatchDriverAppSettingsNotFoundErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface SettingsPatchDriverAppSettingsNotImplementedErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * The configuration settings for the Samsara Driver App. Can be set or updated through the Samsara Settings page or the API at any time.
 * @export
 * @interface SettingsPatchDriverAppSettingsRequestBody
 */
export interface SettingsPatchDriverAppSettingsRequestBody {
    /**
     * Global login user name for the fleet driver app
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsRequestBody
     */
    driverFleetId?: string;
}
/**
 * 
 * @export
 * @interface SettingsPatchDriverAppSettingsResponseBody
 */
export interface SettingsPatchDriverAppSettingsResponseBody {
    /**
     * 
     * @type {DriverAppSettingsResponseObjectResponseBody}
     * @memberof SettingsPatchDriverAppSettingsResponseBody
     */
    data: DriverAppSettingsResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface SettingsPatchDriverAppSettingsServiceUnavailableErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface SettingsPatchDriverAppSettingsTooManyRequestsErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface SettingsPatchDriverAppSettingsUnauthorizedErrorResponseBody
 */
export interface SettingsPatchDriverAppSettingsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof SettingsPatchDriverAppSettingsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * The signature field metadata.
 * @export
 * @interface SignatureFieldTypeMetaDataObjectResponseBody
 */
export interface SignatureFieldTypeMetaDataObjectResponseBody {
    /**
     * The signature field legal text.
     * @type {string}
     * @memberof SignatureFieldTypeMetaDataObjectResponseBody
     */
    legalText?: string;
}
/**
 * The value of a signature field. Only present for signature fields.
 * @export
 * @interface SignatureValueObjectRequestBody
 */
export interface SignatureValueObjectRequestBody {
    /**
     * Id of the signature field.
     * @type {string}
     * @memberof SignatureValueObjectRequestBody
     */
    id?: string;
    /**
     * Name of the signee for a signature field.
     * @type {string}
     * @memberof SignatureValueObjectRequestBody
     */
    name?: string;
    /**
     * Time the signature was captured in RFC 3339 format.
     * @type {string}
     * @memberof SignatureValueObjectRequestBody
     */
    signedAtTime?: string;
    /**
     * Url of a signature field\'s PNG signature image.
     * @type {string}
     * @memberof SignatureValueObjectRequestBody
     */
    url?: string;
}
/**
 * The value of a signature field. Only present for signature fields.
 * @export
 * @interface SignatureValueObjectResponseBody
 */
export interface SignatureValueObjectResponseBody {
    /**
     * Id of the signature field.
     * @type {string}
     * @memberof SignatureValueObjectResponseBody
     */
    id?: string;
    /**
     * Name of the signee for a signature field.
     * @type {string}
     * @memberof SignatureValueObjectResponseBody
     */
    name?: string;
    /**
     * Time the signature was captured in RFC 3339 format.
     * @type {string}
     * @memberof SignatureValueObjectResponseBody
     */
    signedAtTime?: string;
    /**
     * Url of a signature field\'s PNG signature image.
     * @type {string}
     * @memberof SignatureValueObjectResponseBody
     */
    url?: string;
}
/**
 * Error response
 * @export
 * @interface StandardErrorResponse
 */
export interface StandardErrorResponse {
    /**
     * The message of the error.
     * @type {string}
     * @memberof StandardErrorResponse
     */
    message?: string;
    /**
     * The ID of the request.
     * @type {string}
     * @memberof StandardErrorResponse
     */
    requestId?: string;
}
/**
 * A single string data point of a data input.
 * @export
 * @interface StringDataPoint
 */
export interface StringDataPoint {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof StringDataPoint
     */
    time?: string;
    /**
     * String value of the data point.
     * @type {string}
     * @memberof StringDataPoint
     */
    value?: string;
}
/**
 * Tachograph activity
 * @export
 * @interface TachographActivity
 */
export interface TachographActivity {
    /**
     * End time of state in RFC 3339 format.
     * @type {string}
     * @memberof TachographActivity
     */
    endTime?: string;
    /**
     * A flag indicating whether the activity was manually entered by the driver. If this is `true`, the state cannot be \"UNKNOWN\"
     * @type {boolean}
     * @memberof TachographActivity
     */
    isManualEntry?: boolean;
    /**
     * Start time of state in RFC 3339 format.
     * @type {string}
     * @memberof TachographActivity
     */
    startTime?: string;
    /**
     * Tachograph activity state
     * @type {string}
     * @memberof TachographActivity
     */
    state?: TachographActivityStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TachographActivityStateEnum {
    BreakRest = 'BREAK/REST',
    Work = 'WORK',
    Availability = 'AVAILABILITY',
    Driving = 'DRIVING',
    Unknown = 'UNKNOWN'
}

/**
 * 
 * @export
 * @interface TachographActivityListWrapper
 */
export interface TachographActivityListWrapper {
    /**
     * List of all driver tachograph activities in a specified time range.
     * @type {Array<TachographActivity>}
     * @memberof TachographActivityListWrapper
     */
    activity?: Array<TachographActivity>;
    /**
     * 
     * @type {DriverTinyResponse}
     * @memberof TachographActivityListWrapper
     */
    driver?: DriverTinyResponse;
}
/**
 * Tachograph driver file
 * @export
 * @interface TachographDriverFile
 */
export interface TachographDriverFile {
    /**
     * Tachograph card number associated with the file.
     * @type {string}
     * @memberof TachographDriverFile
     */
    cardNumber?: string;
    /**
     * Creation time of files in RFC 3339 format. This is either the download time from the tachograph itself (for files downloaded via Samsara VG) or upload time (for files manually uploaded via Samsara UI).
     * @type {string}
     * @memberof TachographDriverFile
     */
    createdAtTime?: string;
    /**
     * ID of the file.
     * @type {string}
     * @memberof TachographDriverFile
     */
    id?: string;
    /**
     * A temporary URL which can be used to download the file. The link can be used multiple times and expires after an hour.
     * @type {string}
     * @memberof TachographDriverFile
     */
    url?: string;
}
/**
 * 
 * @export
 * @interface TachographDriverFileListWrapper
 */
export interface TachographDriverFileListWrapper {
    /**
     * 
     * @type {DriverTinyResponse}
     * @memberof TachographDriverFileListWrapper
     */
    driver?: DriverTinyResponse;
    /**
     * List of all tachograph driver files in a specified time range.
     * @type {Array<TachographDriverFile>}
     * @memberof TachographDriverFileListWrapper
     */
    files?: Array<TachographDriverFile>;
}
/**
 * List of all driver tachograph files in a specified time range.
 * @export
 * @interface TachographDriverFilesResponse
 */
export interface TachographDriverFilesResponse {
    /**
     * 
     * @type {Array<TachographDriverFileListWrapper>}
     * @memberof TachographDriverFilesResponse
     */
    data?: Array<TachographDriverFileListWrapper>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof TachographDriverFilesResponse
     */
    pagination?: PaginationResponse;
}
/**
 * Tachograph vehicle file
 * @export
 * @interface TachographVehicleFile
 */
export interface TachographVehicleFile {
    /**
     * Creation time of files in RFC 3339 format. This is either the download time from the tachograph itself (for files downloaded via Samsara VG) or upload time (for files manually uploaded via Samsara UI).
     * @type {string}
     * @memberof TachographVehicleFile
     */
    createdAtTime?: string;
    /**
     * ID of the file.
     * @type {string}
     * @memberof TachographVehicleFile
     */
    id?: string;
    /**
     * A temporary URL which can be used to download the file. The link can be used multiple times and expires after an hour.
     * @type {string}
     * @memberof TachographVehicleFile
     */
    url?: string;
    /**
     * VIN associated with the vehicle file.
     * @type {string}
     * @memberof TachographVehicleFile
     */
    vehicleIdentificationNumber?: string;
}
/**
 * 
 * @export
 * @interface TachographVehicleFileListWrapper
 */
export interface TachographVehicleFileListWrapper {
    /**
     * List of all tachograph vehicle files in a specified time range.
     * @type {Array<TachographVehicleFile>}
     * @memberof TachographVehicleFileListWrapper
     */
    files?: Array<TachographVehicleFile>;
    /**
     * 
     * @type {VehicleTinyResponse}
     * @memberof TachographVehicleFileListWrapper
     */
    vehicle?: VehicleTinyResponse;
}
/**
 * List of all vehicle tachograph files in a specified time range.
 * @export
 * @interface TachographVehicleFilesResponse
 */
export interface TachographVehicleFilesResponse {
    /**
     * 
     * @type {Array<TachographVehicleFileListWrapper>}
     * @memberof TachographVehicleFilesResponse
     */
    data?: Array<TachographVehicleFileListWrapper>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof TachographVehicleFilesResponse
     */
    pagination?: PaginationResponse;
}
/**
 * 
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     * Unique Samsara ID of this tag.
     * @type {string}
     * @memberof Tag
     */
    id?: string;
    /**
     * Name of this tag.
     * @type {string}
     * @memberof Tag
     */
    name?: string;
    /**
     * If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
     * @type {string}
     * @memberof Tag
     */
    parentTagId?: string;
    /**
     * The addresses that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof Tag
     */
    addresses?: Array<TaggedObject>;
    /**
     * The trailers, unpowered, and powered assets that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof Tag
     */
    assets?: Array<TaggedObject>;
    /**
     * The drivers that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof Tag
     */
    drivers?: Array<TaggedObject>;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof Tag
     */
    externalIds?: object;
    /**
     * The machines that belong to thistag.
     * @type {Array<TaggedObject>}
     * @memberof Tag
     */
    machines?: Array<TaggedObject>;
    /**
     * 
     * @type {ParentTag}
     * @memberof Tag
     */
    parentTag?: ParentTag;
    /**
     * The sensors that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof Tag
     */
    sensors?: Array<TaggedObject>;
    /**
     * The vehicles that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof Tag
     */
    vehicles?: Array<TaggedObject>;
}
/**
 * 
 * @export
 * @interface TagAllOf
 */
export interface TagAllOf {
    /**
     * The addresses that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof TagAllOf
     */
    addresses?: Array<TaggedObject>;
    /**
     * The trailers, unpowered, and powered assets that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof TagAllOf
     */
    assets?: Array<TaggedObject>;
    /**
     * The drivers that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof TagAllOf
     */
    drivers?: Array<TaggedObject>;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof TagAllOf
     */
    externalIds?: object;
    /**
     * The machines that belong to thistag.
     * @type {Array<TaggedObject>}
     * @memberof TagAllOf
     */
    machines?: Array<TaggedObject>;
    /**
     * 
     * @type {ParentTag}
     * @memberof TagAllOf
     */
    parentTag?: ParentTag;
    /**
     * The sensors that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof TagAllOf
     */
    sensors?: Array<TaggedObject>;
    /**
     * The vehicles that belong to this tag.
     * @type {Array<TaggedObject>}
     * @memberof TagAllOf
     */
    vehicles?: Array<TaggedObject>;
}
/**
 * A single tag.
 * @export
 * @interface TagResponse
 */
export interface TagResponse {
    /**
     * 
     * @type {Tag}
     * @memberof TagResponse
     */
    data?: Tag;
}
/**
 * A minified tag object
 * @export
 * @interface TagTinyResponse
 */
export interface TagTinyResponse {
    /**
     * ID of the tag.
     * @type {string}
     * @memberof TagTinyResponse
     */
    id?: string;
    /**
     * Name of the tag.
     * @type {string}
     * @memberof TagTinyResponse
     */
    name?: string;
    /**
     * If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
     * @type {string}
     * @memberof TagTinyResponse
     */
    parentTagId?: string;
}
/**
 * 
 * @export
 * @interface TaggedObject
 */
export interface TaggedObject {
    /**
     * The object ID.
     * @type {string}
     * @memberof TaggedObject
     */
    id: string;
    /**
     * The object name.
     * @type {string}
     * @memberof TaggedObject
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TinyTag
 */
export interface TinyTag {
    /**
     * Unique Samsara ID of this tag.
     * @type {string}
     * @memberof TinyTag
     */
    id?: string;
    /**
     * Name of this tag.
     * @type {string}
     * @memberof TinyTag
     */
    name?: string;
    /**
     * If this tag is part a hierarchical tag tree, this is the ID of the parent tag, otherwise this will be omitted.
     * @type {string}
     * @memberof TinyTag
     */
    parentTagId?: string;
}
/**
 * A minified gateway object. This field will be omitted if the trailer does not have a gateway installed.
 * @export
 * @interface TrailerGoaGatewayTinyResponseResponseBody
 */
export interface TrailerGoaGatewayTinyResponseResponseBody {
    /**
     * The model of the gateway installed on the asset.
     * @type {string}
     * @memberof TrailerGoaGatewayTinyResponseResponseBody
     */
    model: TrailerGoaGatewayTinyResponseResponseBodyModelEnum;
    /**
     * The serial number of the gateway installed on the asset.
     * @type {string}
     * @memberof TrailerGoaGatewayTinyResponseResponseBody
     */
    serial: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TrailerGoaGatewayTinyResponseResponseBodyModelEnum {
    None = 'none',
    Ag45 = 'AG45',
    Ag41 = 'AG41',
    Ag46Eu = 'AG46EU',
    Ig41 = 'IG41',
    Vg34 = 'VG34',
    Ig15 = 'IG15',
    Em22 = 'EM22',
    Pm7 = 'PM7',
    Vg54Na = 'VG54NA',
    Oemp = 'OEMP',
    Acccrgo = 'ACCCRGO',
    Em01 = 'EM01',
    Baxter = 'Baxter',
    Igmao = 'IGMAO',
    Ekm = 'EKM',
    Dm1 = 'DM1',
    Vg54Eu = 'VG54EU',
    Ig11 = 'IG11',
    Cm12 = 'CM12',
    Ag41Eu = 'AG41EU',
    Im32 = 'IM32',
    Ag46P = 'AG46P',
    Em12 = 'EM12',
    Em21 = 'EM21',
    Cm31 = 'CM31',
    Ag46 = 'AG46',
    Ig61 = 'IG61',
    Oemv = 'OEMV',
    Trailer = 'Trailer',
    Im31 = 'IM31',
    Vg33 = 'VG33',
    Ag24 = 'AG24',
    Hm21 = 'HM21',
    Em23 = 'EM23',
    Vg34Eu = 'VG34EU',
    Ag26Eu = 'AG26EU',
    Ig20 = 'IG20',
    Hm11 = 'HM11',
    Nvr10 = 'NVR10',
    Vg34Fn = 'VG34FN',
    Ig21 = 'IG21',
    Igmai = 'IGMAI',
    Ag15 = 'AG15',
    Oem = 'OEM',
    Ag26 = 'AG26',
    Sg1 = 'SG1',
    Vs25C = 'VS25C',
    Pm20 = 'PM20',
    Accbdh = 'ACCBDH',
    Ag24Eu = 'AG24EU',
    Cmvr = 'CMVR',
    Acchmi10 = 'ACCHMI10',
    Oemr = 'OEMR',
    Vg32 = 'VG32',
    Pm10 = 'PM10',
    Vs2C = 'VS2C',
    Em02 = 'EM02',
    Em11 = 'EM11',
    Im33 = 'IM33',
    Accdm11 = 'ACCDM11',
    Cm52 = 'CM52',
    Cm11 = 'CM11',
    Gw22 = 'GW22',
    Vs25 = 'VS25',
    Cm22 = 'CM22',
    Cm32 = 'CM32',
    Pm8 = 'PM8',
    Wm11 = 'WM11',
    Ag45Eu = 'AG45EU'
}

/**
 * A trailer object with only a name.
 * @export
 * @interface TrailerNameOnlyResponse
 */
export interface TrailerNameOnlyResponse {
    /**
     * Name of the trailer.
     * @type {string}
     * @memberof TrailerNameOnlyResponse
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TrailerResponseObjectResponseBody
 */
export interface TrailerResponseObjectResponseBody {
    /**
     * Indicates if the trailer is visible on the Samsara mobile apps.
     * @type {boolean}
     * @memberof TrailerResponseObjectResponseBody
     */
    enabledForMobile?: boolean;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof TrailerResponseObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * The unique Samsara ID of the Trailer. This is automatically generated when the Trailer object is created. It cannot be changed.
     * @type {string}
     * @memberof TrailerResponseObjectResponseBody
     */
    id: string;
    /**
     * 
     * @type {TrailerGoaGatewayTinyResponseResponseBody}
     * @memberof TrailerResponseObjectResponseBody
     */
    installedGateway?: TrailerGoaGatewayTinyResponseResponseBody;
    /**
     * The license plate of the Trailer. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof TrailerResponseObjectResponseBody
     */
    licensePlate?: string;
    /**
     * The human-readable name of the Trailer. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. By default, this name is the serial number of the Samsara Asset Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof TrailerResponseObjectResponseBody
     */
    name?: string;
    /**
     * These are generic notes about the Trailer. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof TrailerResponseObjectResponseBody
     */
    notes?: string;
    /**
     * The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting) associated with the Trailer.
     * @type {Array<GoaTagTinyResponseResponseBody>}
     * @memberof TrailerResponseObjectResponseBody
     */
    tags?: Array<GoaTagTinyResponseResponseBody>;
    /**
     * The serial number of the trailer.
     * @type {string}
     * @memberof TrailerResponseObjectResponseBody
     */
    trailerSerialNumber?: string;
}
/**
 * Decorated values for the primary trailer stat datapoints.
 * @export
 * @interface TrailerStatDecorationResponseBody
 */
export interface TrailerStatDecorationResponseBody {
    /**
     * 
     * @type {TrailerStatReeferStateTypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    carrierReeferState?: TrailerStatReeferStateTypeResponseBody;
    /**
     * 
     * @type {TrailerStatGpsTypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    gps?: TrailerStatGpsTypeResponseBody;
    /**
     * 
     * @type {TrailerStatGpsOdometerMetersTypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    gpsOdometerMeters?: TrailerStatGpsOdometerMetersTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferAlarmTypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferAlarms?: TrailerStatReeferAlarmTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferAmbientAirTemperatureMilliCTypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferAmbientAirTemperatureMilliC?: TrailerStatReeferAmbientAirTemperatureMilliCTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferFuelPercentTypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferFuelPercent?: TrailerStatReeferFuelPercentTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferObdEngineSecondsTypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferObdEngineSeconds?: TrailerStatReeferObdEngineSecondsTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferReturnAirTemperatureMilliCZone1TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferReturnAirTemperatureMilliCZone1?: TrailerStatReeferReturnAirTemperatureMilliCZone1TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferReturnAirTemperatureMilliCZone2TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferReturnAirTemperatureMilliCZone2?: TrailerStatReeferReturnAirTemperatureMilliCZone2TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferReturnAirTemperatureMilliCZone3TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferReturnAirTemperatureMilliCZone3?: TrailerStatReeferReturnAirTemperatureMilliCZone3TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferRunModeTypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferRunMode?: TrailerStatReeferRunModeTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSetPointTemperatureMilliCZone1TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferSetPointTemperatureMilliCZone1?: TrailerStatReeferSetPointTemperatureMilliCZone1TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSetPointTemperatureMilliCZone2TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferSetPointTemperatureMilliCZone2?: TrailerStatReeferSetPointTemperatureMilliCZone2TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSetPointTemperatureMilliCZone3TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferSetPointTemperatureMilliCZone3?: TrailerStatReeferSetPointTemperatureMilliCZone3TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferStateZone1TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferStateZone1?: TrailerStatReeferStateZone1TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferStateZone2TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferStateZone2?: TrailerStatReeferStateZone2TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferStateZone3TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferStateZone3?: TrailerStatReeferStateZone3TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSupplyAirTemperatureMilliCZone1TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone1?: TrailerStatReeferSupplyAirTemperatureMilliCZone1TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSupplyAirTemperatureMilliCZone2TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone2?: TrailerStatReeferSupplyAirTemperatureMilliCZone2TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSupplyAirTemperatureMilliCZone3TypeResponseBody}
     * @memberof TrailerStatDecorationResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone3?: TrailerStatReeferSupplyAirTemperatureMilliCZone3TypeResponseBody;
}
/**
 * Trailer GPS odometer event.
 * @export
 * @interface TrailerStatGpsOdometerMetersTypeResponseBody
 */
export interface TrailerStatGpsOdometerMetersTypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatGpsOdometerMetersTypeResponseBody
     */
    time: string;
    /**
     * Number of meters the trailer has traveled according to the GPS calculations and the manually specified odometer reading.
     * @type {number}
     * @memberof TrailerStatGpsOdometerMetersTypeResponseBody
     */
    value: number;
}
/**
 * Trailer GPS odometer event.
 * @export
 * @interface TrailerStatGpsOdometerMetersWithDecorationsTypeResponseBody
 */
export interface TrailerStatGpsOdometerMetersWithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatGpsOdometerMetersWithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatGpsOdometerMetersWithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * Number of meters the trailer has traveled according to the GPS calculations and the manually specified odometer reading.
     * @type {number}
     * @memberof TrailerStatGpsOdometerMetersWithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * GPS location data for the trailer.
 * @export
 * @interface TrailerStatGpsTypeResponseBody
 */
export interface TrailerStatGpsTypeResponseBody {
    /**
     * Heading of the trailer in degrees.
     * @type {number}
     * @memberof TrailerStatGpsTypeResponseBody
     */
    headingDegrees?: number;
    /**
     * GPS latitude represented in degrees.
     * @type {number}
     * @memberof TrailerStatGpsTypeResponseBody
     */
    latitude: number;
    /**
     * GPS longitude represented in degrees.
     * @type {number}
     * @memberof TrailerStatGpsTypeResponseBody
     */
    longitude: number;
    /**
     * 
     * @type {ReverseGeoObjectResponseBody}
     * @memberof TrailerStatGpsTypeResponseBody
     */
    reverseGeo?: ReverseGeoObjectResponseBody;
    /**
     * GPS speed of the trailer in miles per hour.
     * @type {number}
     * @memberof TrailerStatGpsTypeResponseBody
     */
    speedMilesPerHour?: number;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatGpsTypeResponseBody
     */
    time: string;
}
/**
 * GPS location data for the trailer.
 * @export
 * @interface TrailerStatGpsWithDecorationsTypeResponseBody
 */
export interface TrailerStatGpsWithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatGpsWithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * Heading of the trailer in degrees.
     * @type {number}
     * @memberof TrailerStatGpsWithDecorationsTypeResponseBody
     */
    headingDegrees?: number;
    /**
     * GPS latitude represented in degrees.
     * @type {number}
     * @memberof TrailerStatGpsWithDecorationsTypeResponseBody
     */
    latitude: number;
    /**
     * GPS longitude represented in degrees.
     * @type {number}
     * @memberof TrailerStatGpsWithDecorationsTypeResponseBody
     */
    longitude: number;
    /**
     * 
     * @type {ReverseGeoObjectResponseBody}
     * @memberof TrailerStatGpsWithDecorationsTypeResponseBody
     */
    reverseGeo?: ReverseGeoObjectResponseBody;
    /**
     * GPS speed of the trailer in miles per hour.
     * @type {number}
     * @memberof TrailerStatGpsWithDecorationsTypeResponseBody
     */
    speedMilesPerHour?: number;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatGpsWithDecorationsTypeResponseBody
     */
    time: string;
}
/**
 * 
 * @export
 * @interface TrailerStatReeferAlarmResponseBody
 */
export interface TrailerStatReeferAlarmResponseBody {
    /**
     * The ID of the alarm.
     * @type {string}
     * @memberof TrailerStatReeferAlarmResponseBody
     */
    alarmCode: string;
    /**
     * The description of the alarm.
     * @type {string}
     * @memberof TrailerStatReeferAlarmResponseBody
     */
    description: string;
    /**
     * The recommended operator action.
     * @type {string}
     * @memberof TrailerStatReeferAlarmResponseBody
     */
    operatorAction: string;
    /**
     * The severity of the alarm. `1`: Ok to run, `2`: Check as specified, `3`: Take immediate action.
     * @type {number}
     * @memberof TrailerStatReeferAlarmResponseBody
     */
    severity: number;
}
/**
 * Alarms that have been emitted by the reefer.
 * @export
 * @interface TrailerStatReeferAlarmTypeResponseBody
 */
export interface TrailerStatReeferAlarmTypeResponseBody {
    /**
     * The alarms reported by the reefer.
     * @type {Array<TrailerStatReeferAlarmResponseBody>}
     * @memberof TrailerStatReeferAlarmTypeResponseBody
     */
    alarms: Array<TrailerStatReeferAlarmResponseBody>;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferAlarmTypeResponseBody
     */
    time: string;
}
/**
 * Alarms that have been emitted by the reefer.
 * @export
 * @interface TrailerStatReeferAlarmWithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferAlarmWithDecorationsTypeResponseBody {
    /**
     * The alarms reported by the reefer.
     * @type {Array<TrailerStatReeferAlarmResponseBody>}
     * @memberof TrailerStatReeferAlarmWithDecorationsTypeResponseBody
     */
    alarms: Array<TrailerStatReeferAlarmResponseBody>;
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferAlarmWithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferAlarmWithDecorationsTypeResponseBody
     */
    time: string;
}
/**
 * Reefer ambient air temperature reading.
 * @export
 * @interface TrailerStatReeferAmbientAirTemperatureMilliCTypeResponseBody
 */
export interface TrailerStatReeferAmbientAirTemperatureMilliCTypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferAmbientAirTemperatureMilliCTypeResponseBody
     */
    time: string;
    /**
     * The ambient air temperature reading of the reefer in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferAmbientAirTemperatureMilliCTypeResponseBody
     */
    value: number;
}
/**
 * Reefer ambient air temperature reading.
 * @export
 * @interface TrailerStatReeferAmbientAirTemperatureWithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferAmbientAirTemperatureWithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferAmbientAirTemperatureWithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferAmbientAirTemperatureWithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The ambient air temperature reading of the reefer in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferAmbientAirTemperatureWithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * The fuel percentage of the reefer.
 * @export
 * @interface TrailerStatReeferFuelPercentTypeResponseBody
 */
export interface TrailerStatReeferFuelPercentTypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferFuelPercentTypeResponseBody
     */
    time: string;
    /**
     * The fuel level in percentage points (e.g. `99`, `50`, etc).
     * @type {number}
     * @memberof TrailerStatReeferFuelPercentTypeResponseBody
     */
    value: number;
}
/**
 * The fuel percentage of the reefer.
 * @export
 * @interface TrailerStatReeferFuelPercentWithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferFuelPercentWithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferFuelPercentWithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferFuelPercentWithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The fuel level in percentage points (e.g. `99`, `50`, etc).
     * @type {number}
     * @memberof TrailerStatReeferFuelPercentWithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Reefer onboard engine seconds reading.
 * @export
 * @interface TrailerStatReeferObdEngineSecondsTypeResponseBody
 */
export interface TrailerStatReeferObdEngineSecondsTypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferObdEngineSecondsTypeResponseBody
     */
    time: string;
    /**
     * The number of seconds the reefer has been on according to the onboard diagnostics.
     * @type {number}
     * @memberof TrailerStatReeferObdEngineSecondsTypeResponseBody
     */
    value: number;
}
/**
 * Reefer onboard engine seconds reading.
 * @export
 * @interface TrailerStatReeferObdEngineSecondsWithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferObdEngineSecondsWithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferObdEngineSecondsWithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferObdEngineSecondsWithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The number of seconds the reefer has been on according to the onboard diagnostics.
     * @type {number}
     * @memberof TrailerStatReeferObdEngineSecondsWithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Return air temperature of zone 1 of the reefer. This is the temperature of the air as it enters the cooling unit.
 * @export
 * @interface TrailerStatReeferReturnAirTemperatureMilliCZone1TypeResponseBody
 */
export interface TrailerStatReeferReturnAirTemperatureMilliCZone1TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone1TypeResponseBody
     */
    time: string;
    /**
     * The return air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone1TypeResponseBody
     */
    value: number;
}
/**
 * Return air temperature of zone 1 of the reefer. This is the temperature of the air as it enters the cooling unit.
 * @export
 * @interface TrailerStatReeferReturnAirTemperatureMilliCZone1WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferReturnAirTemperatureMilliCZone1WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The return air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Return air temperature of zone 2 of the reefer. This is the temperature of the air as it enters the cooling unit.
 * @export
 * @interface TrailerStatReeferReturnAirTemperatureMilliCZone2TypeResponseBody
 */
export interface TrailerStatReeferReturnAirTemperatureMilliCZone2TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone2TypeResponseBody
     */
    time: string;
    /**
     * The return air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone2TypeResponseBody
     */
    value: number;
}
/**
 * Return air temperature of zone 2 of the reefer. This is the temperature of the air as it enters the cooling unit.
 * @export
 * @interface TrailerStatReeferReturnAirTemperatureMilliCZone2WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferReturnAirTemperatureMilliCZone2WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The return air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Return air temperature of zone 3 of the reefer. This is the temperature of the air as it enters the cooling unit.
 * @export
 * @interface TrailerStatReeferReturnAirTemperatureMilliCZone3TypeResponseBody
 */
export interface TrailerStatReeferReturnAirTemperatureMilliCZone3TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone3TypeResponseBody
     */
    time: string;
    /**
     * The return air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone3TypeResponseBody
     */
    value: number;
}
/**
 * Return air temperature of zone 3 of the reefer. This is the temperature of the air as it enters the cooling unit.
 * @export
 * @interface TrailerStatReeferReturnAirTemperatureMilliCZone3WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferReturnAirTemperatureMilliCZone3WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The return air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferReturnAirTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * The run mode of the reefer.
 * @export
 * @interface TrailerStatReeferRunModeTypeResponseBody
 */
export interface TrailerStatReeferRunModeTypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferRunModeTypeResponseBody
     */
    time: string;
    /**
     * The operational mode of the reefer.
     * @type {string}
     * @memberof TrailerStatReeferRunModeTypeResponseBody
     */
    value: string;
}
/**
 * The run mode of the reefer.
 * @export
 * @interface TrailerStatReeferRunModeWithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferRunModeWithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferRunModeWithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferRunModeWithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The operational mode of the reefer.
     * @type {string}
     * @memberof TrailerStatReeferRunModeWithDecorationsTypeResponseBody
     */
    value: string;
}
/**
 * Set point temperature of zone 1 of the reefer.
 * @export
 * @interface TrailerStatReeferSetPointTemperatureMilliCZone1TypeResponseBody
 */
export interface TrailerStatReeferSetPointTemperatureMilliCZone1TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone1TypeResponseBody
     */
    time: string;
    /**
     * The set point temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone1TypeResponseBody
     */
    value: number;
}
/**
 * Set point temperature of zone 1 of the reefer.
 * @export
 * @interface TrailerStatReeferSetPointTemperatureMilliCZone1WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferSetPointTemperatureMilliCZone1WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The set point temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Set point temperature of zone 2 of the reefer.
 * @export
 * @interface TrailerStatReeferSetPointTemperatureMilliCZone2TypeResponseBody
 */
export interface TrailerStatReeferSetPointTemperatureMilliCZone2TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone2TypeResponseBody
     */
    time: string;
    /**
     * The set point temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone2TypeResponseBody
     */
    value: number;
}
/**
 * Set point temperature of zone 2 of the reefer.
 * @export
 * @interface TrailerStatReeferSetPointTemperatureMilliCZone2WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferSetPointTemperatureMilliCZone2WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The set point temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Set point temperature of zone 3 of the reefer.
 * @export
 * @interface TrailerStatReeferSetPointTemperatureMilliCZone3TypeResponseBody
 */
export interface TrailerStatReeferSetPointTemperatureMilliCZone3TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone3TypeResponseBody
     */
    time: string;
    /**
     * The set point temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone3TypeResponseBody
     */
    value: number;
}
/**
 * Set point temperature of zone 3 of the reefer.
 * @export
 * @interface TrailerStatReeferSetPointTemperatureMilliCZone3WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferSetPointTemperatureMilliCZone3WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The set point temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSetPointTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Reefer state event.
 * @export
 * @interface TrailerStatReeferStateTypeResponseBody
 */
export interface TrailerStatReeferStateTypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferStateTypeResponseBody
     */
    time: string;
    /**
     * The overall state of the multizone carrier reefer.
     * @type {string}
     * @memberof TrailerStatReeferStateTypeResponseBody
     */
    value: string;
}
/**
 * Reefer state event.
 * @export
 * @interface TrailerStatReeferStateWithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferStateWithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferStateWithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferStateWithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The overall state of the multizone carrier reefer.
     * @type {string}
     * @memberof TrailerStatReeferStateWithDecorationsTypeResponseBody
     */
    value: string;
}
/**
 * Reefer state event.
 * @export
 * @interface TrailerStatReeferStateZone1TypeResponseBody
 */
export interface TrailerStatReeferStateZone1TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferStateZone1TypeResponseBody
     */
    time: string;
    /**
     * The state zone 1 of the reefer.
     * @type {string}
     * @memberof TrailerStatReeferStateZone1TypeResponseBody
     */
    value: string;
}
/**
 * Reefer state event.
 * @export
 * @interface TrailerStatReeferStateZone1WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferStateZone1WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferStateZone1WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferStateZone1WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The state zone 1 of the reefer.
     * @type {string}
     * @memberof TrailerStatReeferStateZone1WithDecorationsTypeResponseBody
     */
    value: string;
}
/**
 * Reefer state event.
 * @export
 * @interface TrailerStatReeferStateZone2TypeResponseBody
 */
export interface TrailerStatReeferStateZone2TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferStateZone2TypeResponseBody
     */
    time: string;
    /**
     * The state zone 2 of the reefer.
     * @type {string}
     * @memberof TrailerStatReeferStateZone2TypeResponseBody
     */
    value: string;
}
/**
 * Reefer state event.
 * @export
 * @interface TrailerStatReeferStateZone2WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferStateZone2WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferStateZone2WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferStateZone2WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The state zone 2 of the reefer.
     * @type {string}
     * @memberof TrailerStatReeferStateZone2WithDecorationsTypeResponseBody
     */
    value: string;
}
/**
 * Reefer state event.
 * @export
 * @interface TrailerStatReeferStateZone3TypeResponseBody
 */
export interface TrailerStatReeferStateZone3TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferStateZone3TypeResponseBody
     */
    time: string;
    /**
     * The state zone 3 of the reefer.
     * @type {string}
     * @memberof TrailerStatReeferStateZone3TypeResponseBody
     */
    value: string;
}
/**
 * Reefer state event.
 * @export
 * @interface TrailerStatReeferStateZone3WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferStateZone3WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferStateZone3WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferStateZone3WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The state zone 3 of the reefer.
     * @type {string}
     * @memberof TrailerStatReeferStateZone3WithDecorationsTypeResponseBody
     */
    value: string;
}
/**
 * Supply or discharge air temperature of zone 2 of the reefer. This is the temperature of the air as it leaves the cooling unit.
 * @export
 * @interface TrailerStatReeferSupplyAirTemperatureMilliCZone1TypeResponseBody
 */
export interface TrailerStatReeferSupplyAirTemperatureMilliCZone1TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone1TypeResponseBody
     */
    time: string;
    /**
     * The supply or discharge air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone1TypeResponseBody
     */
    value: number;
}
/**
 * Supply or discharge air temperature of zone 2 of the reefer. This is the temperature of the air as it leaves the cooling unit.
 * @export
 * @interface TrailerStatReeferSupplyAirTemperatureMilliCZone1WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferSupplyAirTemperatureMilliCZone1WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The supply or discharge air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone1WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Supply or discharge air temperature of zone 2 of the reefer. This is the temperature of the air as it leaves the cooling unit.
 * @export
 * @interface TrailerStatReeferSupplyAirTemperatureMilliCZone2TypeResponseBody
 */
export interface TrailerStatReeferSupplyAirTemperatureMilliCZone2TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone2TypeResponseBody
     */
    time: string;
    /**
     * The supply or discharge air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone2TypeResponseBody
     */
    value: number;
}
/**
 * Supply or discharge air temperature of zone 2 of the reefer. This is the temperature of the air as it leaves the cooling unit.
 * @export
 * @interface TrailerStatReeferSupplyAirTemperatureMilliCZone2WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferSupplyAirTemperatureMilliCZone2WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The supply or discharge air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone2WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Supply or discharge air temperature of zone 2 of the reefer. This is the temperature of the air as it leaves the cooling unit.
 * @export
 * @interface TrailerStatReeferSupplyAirTemperatureMilliCZone3TypeResponseBody
 */
export interface TrailerStatReeferSupplyAirTemperatureMilliCZone3TypeResponseBody {
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone3TypeResponseBody
     */
    time: string;
    /**
     * The supply or discharge air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone3TypeResponseBody
     */
    value: number;
}
/**
 * Supply or discharge air temperature of zone 2 of the reefer. This is the temperature of the air as it leaves the cooling unit.
 * @export
 * @interface TrailerStatReeferSupplyAirTemperatureMilliCZone3WithDecorationsTypeResponseBody
 */
export interface TrailerStatReeferSupplyAirTemperatureMilliCZone3WithDecorationsTypeResponseBody {
    /**
     * 
     * @type {TrailerStatDecorationResponseBody}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    decorations?: TrailerStatDecorationResponseBody;
    /**
     * UTC timestamp in RFC 3339 format.
     * @type {string}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    time: string;
    /**
     * The supply or discharge air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof TrailerStatReeferSupplyAirTemperatureMilliCZone3WithDecorationsTypeResponseBody
     */
    value: number;
}
/**
 * Bad Gateway
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedBadGatewayErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedBadRequestErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedGatewayTimeoutErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedInternalServerErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedMethodNotAllowedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedNotFoundErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedNotImplementedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedResponseBody {
    /**
     * List of trailers and their stats
     * @type {Array<TrailerStatsObjectResponseBody>}
     * @memberof TrailerStatsGetTrailerStatsFeedResponseBody
     */
    data: Array<TrailerStatsObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof TrailerStatsGetTrailerStatsFeedResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedServiceUnavailableErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedTooManyRequestsErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface TrailerStatsGetTrailerStatsFeedUnauthorizedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsFeedUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsFeedUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryBadGatewayErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryBadRequestErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryGatewayTimeoutErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryInternalServerErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryMethodNotAllowedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryNotFoundErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryNotImplementedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryResponseBody {
    /**
     * List of trailers and their stats
     * @type {Array<TrailerStatsObjectResponseBody>}
     * @memberof TrailerStatsGetTrailerStatsHistoryResponseBody
     */
    data: Array<TrailerStatsObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof TrailerStatsGetTrailerStatsHistoryResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryServiceUnavailableErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryTooManyRequestsErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface TrailerStatsGetTrailerStatsHistoryUnauthorizedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsHistoryUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsHistoryUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotBadGatewayErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotBadRequestErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotGatewayTimeoutErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotInternalServerErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotMethodNotAllowedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotNotFoundErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotNotImplementedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotResponseBody {
    /**
     * List of trailers and their stats
     * @type {Array<TrailerStatsSnapshotObjectResponseBody>}
     * @memberof TrailerStatsGetTrailerStatsSnapshotResponseBody
     */
    data: Array<TrailerStatsSnapshotObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof TrailerStatsGetTrailerStatsSnapshotResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotServiceUnavailableErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotTooManyRequestsErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface TrailerStatsGetTrailerStatsSnapshotUnauthorizedErrorResponseBody
 */
export interface TrailerStatsGetTrailerStatsSnapshotUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailerStatsGetTrailerStatsSnapshotUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * A trailer and its stats
 * @export
 * @interface TrailerStatsObjectResponseBody
 */
export interface TrailerStatsObjectResponseBody {
    /**
     * A list of engine state points.
     * @type {Array<TrailerStatReeferStateWithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    carrierReeferState?: Array<TrailerStatReeferStateWithDecorationsTypeResponseBody>;
    /**
     * A list of GPS points.
     * @type {Array<TrailerStatGpsWithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    gps?: Array<TrailerStatGpsWithDecorationsTypeResponseBody>;
    /**
     * A list of odometer points.
     * @type {Array<TrailerStatGpsOdometerMetersWithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    gpsOdometerMeters?: Array<TrailerStatGpsOdometerMetersWithDecorationsTypeResponseBody>;
    /**
     * ID of the trailer.
     * @type {string}
     * @memberof TrailerStatsObjectResponseBody
     */
    id: string;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof TrailerStatsObjectResponseBody
     */
    name: string;
    /**
     * A list of reefer alarm points.
     * @type {Array<TrailerStatReeferAlarmWithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferAlarms?: Array<TrailerStatReeferAlarmWithDecorationsTypeResponseBody>;
    /**
     * A list of ambient air temperature points.
     * @type {Array<TrailerStatReeferAmbientAirTemperatureWithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferAmbientAirTemperatureMilliC?: Array<TrailerStatReeferAmbientAirTemperatureWithDecorationsTypeResponseBody>;
    /**
     * A list of fuel percent points.
     * @type {Array<TrailerStatReeferFuelPercentWithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferFuelPercent?: Array<TrailerStatReeferFuelPercentWithDecorationsTypeResponseBody>;
    /**
     * A list of engine second points
     * @type {Array<TrailerStatReeferObdEngineSecondsWithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferObdEngineSeconds?: Array<TrailerStatReeferObdEngineSecondsWithDecorationsTypeResponseBody>;
    /**
     * A list of return air temperature points.
     * @type {Array<TrailerStatReeferReturnAirTemperatureMilliCZone1WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferReturnAirTemperatureMilliCZone1?: Array<TrailerStatReeferReturnAirTemperatureMilliCZone1WithDecorationsTypeResponseBody>;
    /**
     * A list of return air temperature points.
     * @type {Array<TrailerStatReeferReturnAirTemperatureMilliCZone2WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferReturnAirTemperatureMilliCZone2?: Array<TrailerStatReeferReturnAirTemperatureMilliCZone2WithDecorationsTypeResponseBody>;
    /**
     * A list of return air temperature points.
     * @type {Array<TrailerStatReeferReturnAirTemperatureMilliCZone3WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferReturnAirTemperatureMilliCZone3?: Array<TrailerStatReeferReturnAirTemperatureMilliCZone3WithDecorationsTypeResponseBody>;
    /**
     * A list of run mode points
     * @type {Array<TrailerStatReeferRunModeWithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferRunMode?: Array<TrailerStatReeferRunModeWithDecorationsTypeResponseBody>;
    /**
     * A list of set point temperature points.
     * @type {Array<TrailerStatReeferSetPointTemperatureMilliCZone1WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferSetPointTemperatureMilliCZone1?: Array<TrailerStatReeferSetPointTemperatureMilliCZone1WithDecorationsTypeResponseBody>;
    /**
     * A list of set point temperature points.
     * @type {Array<TrailerStatReeferSetPointTemperatureMilliCZone2WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferSetPointTemperatureMilliCZone2?: Array<TrailerStatReeferSetPointTemperatureMilliCZone2WithDecorationsTypeResponseBody>;
    /**
     * A list of set point temperature points.
     * @type {Array<TrailerStatReeferSetPointTemperatureMilliCZone3WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferSetPointTemperatureMilliCZone3?: Array<TrailerStatReeferSetPointTemperatureMilliCZone3WithDecorationsTypeResponseBody>;
    /**
     * A list of engine state points.
     * @type {Array<TrailerStatReeferStateZone1WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferStateZone1?: Array<TrailerStatReeferStateZone1WithDecorationsTypeResponseBody>;
    /**
     * A list of engine state points.
     * @type {Array<TrailerStatReeferStateZone2WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferStateZone2?: Array<TrailerStatReeferStateZone2WithDecorationsTypeResponseBody>;
    /**
     * A list of engine state points.
     * @type {Array<TrailerStatReeferStateZone3WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferStateZone3?: Array<TrailerStatReeferStateZone3WithDecorationsTypeResponseBody>;
    /**
     * A list of supply air temperature points.
     * @type {Array<TrailerStatReeferSupplyAirTemperatureMilliCZone1WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone1?: Array<TrailerStatReeferSupplyAirTemperatureMilliCZone1WithDecorationsTypeResponseBody>;
    /**
     * A list of supply air temperature points.
     * @type {Array<TrailerStatReeferSupplyAirTemperatureMilliCZone2WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone2?: Array<TrailerStatReeferSupplyAirTemperatureMilliCZone2WithDecorationsTypeResponseBody>;
    /**
     * A list of supply air temperature points.
     * @type {Array<TrailerStatReeferSupplyAirTemperatureMilliCZone3WithDecorationsTypeResponseBody>}
     * @memberof TrailerStatsObjectResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone3?: Array<TrailerStatReeferSupplyAirTemperatureMilliCZone3WithDecorationsTypeResponseBody>;
}
/**
 * A trailer and its stats
 * @export
 * @interface TrailerStatsSnapshotObjectResponseBody
 */
export interface TrailerStatsSnapshotObjectResponseBody {
    /**
     * 
     * @type {TrailerStatReeferStateTypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    carrierReeferState?: TrailerStatReeferStateTypeResponseBody;
    /**
     * 
     * @type {TrailerStatGpsTypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    gps?: TrailerStatGpsTypeResponseBody;
    /**
     * 
     * @type {TrailerStatGpsOdometerMetersTypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    gpsOdometerMeters?: TrailerStatGpsOdometerMetersTypeResponseBody;
    /**
     * ID of the trailer.
     * @type {string}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    id: string;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    name: string;
    /**
     * 
     * @type {TrailerStatReeferAlarmTypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferAlarms?: TrailerStatReeferAlarmTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferAmbientAirTemperatureMilliCTypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferAmbientAirTemperatureMilliC?: TrailerStatReeferAmbientAirTemperatureMilliCTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferFuelPercentTypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferFuelPercent?: TrailerStatReeferFuelPercentTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferObdEngineSecondsTypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferObdEngineSeconds?: TrailerStatReeferObdEngineSecondsTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferReturnAirTemperatureMilliCZone1TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferReturnAirTemperatureMilliCZone1?: TrailerStatReeferReturnAirTemperatureMilliCZone1TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferReturnAirTemperatureMilliCZone2TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferReturnAirTemperatureMilliCZone2?: TrailerStatReeferReturnAirTemperatureMilliCZone2TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferReturnAirTemperatureMilliCZone3TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferReturnAirTemperatureMilliCZone3?: TrailerStatReeferReturnAirTemperatureMilliCZone3TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferRunModeTypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferRunMode?: TrailerStatReeferRunModeTypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSetPointTemperatureMilliCZone1TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferSetPointTemperatureMilliCZone1?: TrailerStatReeferSetPointTemperatureMilliCZone1TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSetPointTemperatureMilliCZone2TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferSetPointTemperatureMilliCZone2?: TrailerStatReeferSetPointTemperatureMilliCZone2TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSetPointTemperatureMilliCZone3TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferSetPointTemperatureMilliCZone3?: TrailerStatReeferSetPointTemperatureMilliCZone3TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferStateZone1TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferStateZone1?: TrailerStatReeferStateZone1TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferStateZone2TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferStateZone2?: TrailerStatReeferStateZone2TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferStateZone3TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferStateZone3?: TrailerStatReeferStateZone3TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSupplyAirTemperatureMilliCZone1TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone1?: TrailerStatReeferSupplyAirTemperatureMilliCZone1TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSupplyAirTemperatureMilliCZone2TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone2?: TrailerStatReeferSupplyAirTemperatureMilliCZone2TypeResponseBody;
    /**
     * 
     * @type {TrailerStatReeferSupplyAirTemperatureMilliCZone3TypeResponseBody}
     * @memberof TrailerStatsSnapshotObjectResponseBody
     */
    reeferSupplyAirTemperatureMilliCZone3?: TrailerStatReeferSupplyAirTemperatureMilliCZone3TypeResponseBody;
}
/**
 * A minified trailer object.
 * @export
 * @interface TrailerTinyResponse
 */
export interface TrailerTinyResponse {
    /**
     * ID of the trailer.
     * @type {string}
     * @memberof TrailerTinyResponse
     */
    id?: string;
    /**
     * Name of the trailer.
     * @type {string}
     * @memberof TrailerTinyResponse
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface TrailerWithAttributesResponseObjectResponseBody
 */
export interface TrailerWithAttributesResponseObjectResponseBody {
    /**
     * List of attributes associated with the entity
     * @type {Array<GoaAttributeTinyResponseBody>}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    attributes?: Array<GoaAttributeTinyResponseBody>;
    /**
     * Indicates if the trailer is visible on the Samsara mobile apps.
     * @type {boolean}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    enabledForMobile?: boolean;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * The unique Samsara ID of the Trailer. This is automatically generated when the Trailer object is created. It cannot be changed.
     * @type {string}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    id: string;
    /**
     * 
     * @type {TrailerGoaGatewayTinyResponseResponseBody}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    installedGateway?: TrailerGoaGatewayTinyResponseResponseBody;
    /**
     * The license plate of the Trailer. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    licensePlate?: string;
    /**
     * The human-readable name of the Trailer. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. By default, this name is the serial number of the Samsara Asset Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    name?: string;
    /**
     * These are generic notes about the Trailer. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    notes?: string;
    /**
     * The list of [tags](https://kb.samsara.com/hc/en-us/articles/360026674631-Using-Tags-and-Tag-Nesting) associated with the Trailer.
     * @type {Array<GoaTagTinyResponseResponseBody>}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    tags?: Array<GoaTagTinyResponseResponseBody>;
    /**
     * The serial number of the trailer.
     * @type {string}
     * @memberof TrailerWithAttributesResponseObjectResponseBody
     */
    trailerSerialNumber?: string;
}
/**
 * Bad Gateway
 * @export
 * @interface TrailersCreateTrailerBadGatewayErrorResponseBody
 */
export interface TrailersCreateTrailerBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface TrailersCreateTrailerBadRequestErrorResponseBody
 */
export interface TrailersCreateTrailerBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface TrailersCreateTrailerGatewayTimeoutErrorResponseBody
 */
export interface TrailersCreateTrailerGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface TrailersCreateTrailerInternalServerErrorResponseBody
 */
export interface TrailersCreateTrailerInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface TrailersCreateTrailerMethodNotAllowedErrorResponseBody
 */
export interface TrailersCreateTrailerMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface TrailersCreateTrailerNotFoundErrorResponseBody
 */
export interface TrailersCreateTrailerNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface TrailersCreateTrailerNotImplementedErrorResponseBody
 */
export interface TrailersCreateTrailerNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface TrailersCreateTrailerRequestBody
 */
export interface TrailersCreateTrailerRequestBody {
    /**
     * A list of attributes to assign to the trailer.
     * @type {Array<GoaAttributeTinyRequestBody>}
     * @memberof TrailersCreateTrailerRequestBody
     */
    attributes?: Array<GoaAttributeTinyRequestBody>;
    /**
     * Indicates if the trailer is visible on the Samsara mobile apps.
     * @type {boolean}
     * @memberof TrailersCreateTrailerRequestBody
     */
    enabledForMobile?: boolean;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof TrailersCreateTrailerRequestBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * The license plate of the Trailer. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof TrailersCreateTrailerRequestBody
     */
    licensePlate?: string;
    /**
     * The human-readable name of the Trailer. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. By default, this name is the serial number of the Samsara Asset Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof TrailersCreateTrailerRequestBody
     */
    name: string;
    /**
     * These are generic notes about the Trailer. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof TrailersCreateTrailerRequestBody
     */
    notes?: string;
    /**
     * An array of IDs of tags to associate with this trailer.
     * @type {Array<string>}
     * @memberof TrailersCreateTrailerRequestBody
     */
    tagIds?: Array<string>;
    /**
     * The serial number of the trailer.
     * @type {string}
     * @memberof TrailersCreateTrailerRequestBody
     */
    trailerSerialNumber?: string;
}
/**
 * 
 * @export
 * @interface TrailersCreateTrailerResponseBody
 */
export interface TrailersCreateTrailerResponseBody {
    /**
     * 
     * @type {TrailerWithAttributesResponseObjectResponseBody}
     * @memberof TrailersCreateTrailerResponseBody
     */
    data: TrailerWithAttributesResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface TrailersCreateTrailerServiceUnavailableErrorResponseBody
 */
export interface TrailersCreateTrailerServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface TrailersCreateTrailerTooManyRequestsErrorResponseBody
 */
export interface TrailersCreateTrailerTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface TrailersCreateTrailerUnauthorizedErrorResponseBody
 */
export interface TrailersCreateTrailerUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersCreateTrailerUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersCreateTrailerUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface TrailersDeleteTrailerBadGatewayErrorResponseBody
 */
export interface TrailersDeleteTrailerBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface TrailersDeleteTrailerBadRequestErrorResponseBody
 */
export interface TrailersDeleteTrailerBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface TrailersDeleteTrailerGatewayTimeoutErrorResponseBody
 */
export interface TrailersDeleteTrailerGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface TrailersDeleteTrailerInternalServerErrorResponseBody
 */
export interface TrailersDeleteTrailerInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface TrailersDeleteTrailerMethodNotAllowedErrorResponseBody
 */
export interface TrailersDeleteTrailerMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface TrailersDeleteTrailerNotFoundErrorResponseBody
 */
export interface TrailersDeleteTrailerNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface TrailersDeleteTrailerNotImplementedErrorResponseBody
 */
export interface TrailersDeleteTrailerNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * Service unavailable
 * @export
 * @interface TrailersDeleteTrailerServiceUnavailableErrorResponseBody
 */
export interface TrailersDeleteTrailerServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface TrailersDeleteTrailerTooManyRequestsErrorResponseBody
 */
export interface TrailersDeleteTrailerTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface TrailersDeleteTrailerUnauthorizedErrorResponseBody
 */
export interface TrailersDeleteTrailerUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersDeleteTrailerUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersDeleteTrailerUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface TrailersGetTrailerBadGatewayErrorResponseBody
 */
export interface TrailersGetTrailerBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface TrailersGetTrailerBadRequestErrorResponseBody
 */
export interface TrailersGetTrailerBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface TrailersGetTrailerGatewayTimeoutErrorResponseBody
 */
export interface TrailersGetTrailerGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface TrailersGetTrailerInternalServerErrorResponseBody
 */
export interface TrailersGetTrailerInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface TrailersGetTrailerMethodNotAllowedErrorResponseBody
 */
export interface TrailersGetTrailerMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface TrailersGetTrailerNotFoundErrorResponseBody
 */
export interface TrailersGetTrailerNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface TrailersGetTrailerNotImplementedErrorResponseBody
 */
export interface TrailersGetTrailerNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface TrailersGetTrailerResponseBody
 */
export interface TrailersGetTrailerResponseBody {
    /**
     * 
     * @type {TrailerWithAttributesResponseObjectResponseBody}
     * @memberof TrailersGetTrailerResponseBody
     */
    data: TrailerWithAttributesResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface TrailersGetTrailerServiceUnavailableErrorResponseBody
 */
export interface TrailersGetTrailerServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface TrailersGetTrailerTooManyRequestsErrorResponseBody
 */
export interface TrailersGetTrailerTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface TrailersGetTrailerUnauthorizedErrorResponseBody
 */
export interface TrailersGetTrailerUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersGetTrailerUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersGetTrailerUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface TrailersListTrailersBadGatewayErrorResponseBody
 */
export interface TrailersListTrailersBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface TrailersListTrailersBadRequestErrorResponseBody
 */
export interface TrailersListTrailersBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface TrailersListTrailersGatewayTimeoutErrorResponseBody
 */
export interface TrailersListTrailersGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface TrailersListTrailersInternalServerErrorResponseBody
 */
export interface TrailersListTrailersInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface TrailersListTrailersMethodNotAllowedErrorResponseBody
 */
export interface TrailersListTrailersMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface TrailersListTrailersNotFoundErrorResponseBody
 */
export interface TrailersListTrailersNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface TrailersListTrailersNotImplementedErrorResponseBody
 */
export interface TrailersListTrailersNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface TrailersListTrailersResponseBody
 */
export interface TrailersListTrailersResponseBody {
    /**
     * List of trailer objects.
     * @type {Array<TrailerResponseObjectResponseBody>}
     * @memberof TrailersListTrailersResponseBody
     */
    data: Array<TrailerResponseObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof TrailersListTrailersResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface TrailersListTrailersServiceUnavailableErrorResponseBody
 */
export interface TrailersListTrailersServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface TrailersListTrailersTooManyRequestsErrorResponseBody
 */
export interface TrailersListTrailersTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface TrailersListTrailersUnauthorizedErrorResponseBody
 */
export interface TrailersListTrailersUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersListTrailersUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersListTrailersUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Gateway
 * @export
 * @interface TrailersUpdateTrailerBadGatewayErrorResponseBody
 */
export interface TrailersUpdateTrailerBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface TrailersUpdateTrailerBadRequestErrorResponseBody
 */
export interface TrailersUpdateTrailerBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface TrailersUpdateTrailerGatewayTimeoutErrorResponseBody
 */
export interface TrailersUpdateTrailerGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface TrailersUpdateTrailerInternalServerErrorResponseBody
 */
export interface TrailersUpdateTrailerInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface TrailersUpdateTrailerMethodNotAllowedErrorResponseBody
 */
export interface TrailersUpdateTrailerMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface TrailersUpdateTrailerNotFoundErrorResponseBody
 */
export interface TrailersUpdateTrailerNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface TrailersUpdateTrailerNotImplementedErrorResponseBody
 */
export interface TrailersUpdateTrailerNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface TrailersUpdateTrailerRequestBody
 */
export interface TrailersUpdateTrailerRequestBody {
    /**
     * A list of attributes to assign to the trailer.
     * @type {Array<GoaAttributeTinyRequestBody>}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    attributes?: Array<GoaAttributeTinyRequestBody>;
    /**
     * Indicates if the trailer is visible on the Samsara mobile apps.
     * @type {boolean}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    enabledForMobile?: boolean;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * The license plate of the Trailer. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    licensePlate?: string;
    /**
     * The human-readable name of the Trailer. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. By default, this name is the serial number of the Samsara Asset Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    name?: string;
    /**
     * These are generic notes about the Trailer. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    notes?: string;
    /**
     * When you provide a manual odometer override, Samsara will begin updating a trailer\'s odometer using GPS distance traveled since this override was set. Only applies to trailers installed with Samsara gateways.
     * @type {number}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    odometerMeters?: number;
    /**
     * An array of IDs of tags to associate with this trailer.
     * @type {Array<string>}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    tagIds?: Array<string>;
    /**
     * The serial number of the trailer.
     * @type {string}
     * @memberof TrailersUpdateTrailerRequestBody
     */
    trailerSerialNumber?: string;
}
/**
 * 
 * @export
 * @interface TrailersUpdateTrailerResponseBody
 */
export interface TrailersUpdateTrailerResponseBody {
    /**
     * 
     * @type {TrailerWithAttributesResponseObjectResponseBody}
     * @memberof TrailersUpdateTrailerResponseBody
     */
    data: TrailerWithAttributesResponseObjectResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface TrailersUpdateTrailerServiceUnavailableErrorResponseBody
 */
export interface TrailersUpdateTrailerServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface TrailersUpdateTrailerTooManyRequestsErrorResponseBody
 */
export interface TrailersUpdateTrailerTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface TrailersUpdateTrailerUnauthorizedErrorResponseBody
 */
export interface TrailersUpdateTrailerUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof TrailersUpdateTrailerUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof TrailersUpdateTrailerUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * A request body to update an Address.
 * @export
 * @interface UpdateAddressRequest
 */
export interface UpdateAddressRequest {
    /**
     * Reporting location type associated with the address (used for ELD reporting purposes).
     * @type {Array<string>}
     * @memberof UpdateAddressRequest
     */
    addressTypes?: Array<UpdateAddressRequestAddressTypesEnum>;
    /**
     * An array of Contact IDs associated with this Address.
     * @type {Array<string>}
     * @memberof UpdateAddressRequest
     */
    contactIds?: Array<string>;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateAddressRequest
     */
    externalIds?: { [key: string]: string; };
    /**
     * The full street address for this address/geofence, as it might be recognized by Google Maps.
     * @type {string}
     * @memberof UpdateAddressRequest
     */
    formattedAddress?: string;
    /**
     * 
     * @type {CreateAddressRequestGeofence}
     * @memberof UpdateAddressRequest
     */
    geofence?: CreateAddressRequestGeofence;
    /**
     * Latitude of the address. Will be geocoded from `formattedAddress` if not provided.
     * @type {number}
     * @memberof UpdateAddressRequest
     */
    latitude?: number;
    /**
     * Longitude of the address. Will be geocoded from `formattedAddress` if not provided.
     * @type {number}
     * @memberof UpdateAddressRequest
     */
    longitude?: number;
    /**
     * Name of the address.
     * @type {string}
     * @memberof UpdateAddressRequest
     */
    name?: string;
    /**
     * Notes about the address.
     * @type {string}
     * @memberof UpdateAddressRequest
     */
    notes?: string;
    /**
     * An array of IDs of tags to associate with this address.
     * @type {Array<string>}
     * @memberof UpdateAddressRequest
     */
    tagIds?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateAddressRequestAddressTypesEnum {
    Yard = 'yard',
    ShortHaul = 'shortHaul',
    WorkforceSite = 'workforceSite'
}

/**
 * A request body to update an Attribute.
 * @export
 * @interface UpdateAttributeRequest
 */
export interface UpdateAttributeRequest {
    /**
     * Denotes the data type of the attribute\'s values.
     * @type {string}
     * @memberof UpdateAttributeRequest
     */
    attributeType?: UpdateAttributeRequestAttributeTypeEnum;
    /**
     * Defines whether or not this attribute can be used on the same entity many times (with different values).
     * @type {string}
     * @memberof UpdateAttributeRequest
     */
    attributeValueQuantity?: UpdateAttributeRequestAttributeValueQuantityEnum;
    /**
     * Entities that will be applied to this attribute
     * @type {Array<CreateAttributeRequestEntities>}
     * @memberof UpdateAttributeRequest
     */
    entities?: Array<CreateAttributeRequestEntities>;
    /**
     * Denotes the type of entity, driver or asset.
     * @type {string}
     * @memberof UpdateAttributeRequest
     */
    entityType: UpdateAttributeRequestEntityTypeEnum;
    /**
     * Name
     * @type {string}
     * @memberof UpdateAttributeRequest
     */
    name?: string;
    /**
     * Number values that can be associated with this attribute
     * @type {Array<number>}
     * @memberof UpdateAttributeRequest
     */
    numberValues?: Array<number>;
    /**
     * String values that can be associated with this attribute
     * @type {Array<string>}
     * @memberof UpdateAttributeRequest
     */
    stringValues?: Array<string>;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateAttributeRequestAttributeTypeEnum {
    String = 'string',
    Number = 'number'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateAttributeRequestAttributeValueQuantityEnum {
    Single = 'single',
    Multi = 'multi'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateAttributeRequestEntityTypeEnum {
    Driver = 'driver',
    Asset = 'asset'
}

/**
 * Information for adding a notification contact for alerts.
 * @export
 * @interface UpdateContactRequest
 */
export interface UpdateContactRequest {
    /**
     * Email address of the contact.
     * @type {string}
     * @memberof UpdateContactRequest
     */
    email?: string;
    /**
     * First name of the contact.
     * @type {string}
     * @memberof UpdateContactRequest
     */
    firstName?: string;
    /**
     * Last name of the contact.
     * @type {string}
     * @memberof UpdateContactRequest
     */
    lastName?: string;
    /**
     * Phone number of the contact.
     * @type {string}
     * @memberof UpdateContactRequest
     */
    phone?: string;
}
/**
 * Driver that should be updated.
 * @export
 * @interface UpdateDriverRequest
 */
export interface UpdateDriverRequest {
    /**
     * 
     * @type {Array<CreateDriverRequestAttributes>}
     * @memberof UpdateDriverRequest
     */
    attributes?: Array<CreateDriverRequestAttributes>;
    /**
     * 
     * @type {CreateDriverRequestCarrierSettings}
     * @memberof UpdateDriverRequest
     */
    carrierSettings?: CreateDriverRequestCarrierSettings;
    /**
     * The ID Card Code on the back of the physical card assigned to the driver.  Contact Samsara if you would like to enable this feature.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    currentIdCardCode?: string;
    /**
     * The date and time this driver is considered to be deactivated in RFC 3339 format.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    deactivatedAtTime?: string;
    /**
     * A value indicating whether the driver is active or deactivated.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    driverActivationStatus?: UpdateDriverRequestDriverActivationStatusEnum;
    /**
     * Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     * @type {boolean}
     * @memberof UpdateDriverRequest
     */
    eldAdverseWeatherExemptionEnabled?: boolean;
    /**
     * Flag indicating this driver may use Big Day exemption in ELD logs.
     * @type {boolean}
     * @memberof UpdateDriverRequest
     */
    eldBigDayExemptionEnabled?: boolean;
    /**
     * `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
     * @type {number}
     * @memberof UpdateDriverRequest
     */
    eldDayStartHour?: number;
    /**
     * Flag indicating this driver is exempt from the Electronic Logging Mandate.
     * @type {boolean}
     * @memberof UpdateDriverRequest
     */
    eldExempt?: boolean;
    /**
     * Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    eldExemptReason?: string;
    /**
     * Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     * @type {boolean}
     * @memberof UpdateDriverRequest
     */
    eldPcEnabled?: boolean;
    /**
     * Flag indicating this driver may select the Yard Move duty status in ELD logs.
     * @type {boolean}
     * @memberof UpdateDriverRequest
     */
    eldYmEnabled?: boolean;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateDriverRequest
     */
    externalIds?: { [key: string]: string; };
    /**
     * Driver\'s state issued license number. The combination of this number and `licenseState` must be unique.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    licenseNumber?: string;
    /**
     * Abbreviation of US state, Canadian province, or US territory that issued driver\'s license.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    licenseState?: string;
    /**
     * Locale override (uncommon). These are specified by ISO 3166-2 country codes for supported locales.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    locale?: UpdateDriverRequestLocaleEnum;
    /**
     * Driver\'s name.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    name?: string;
    /**
     * Notes about the driver.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    notes?: string;
    /**
     * Password that the driver can use to login to the Samsara driver app.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    password?: string;
    /**
     * Phone number of the driver.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    phone?: string;
    /**
     * ID of vehicle that the driver is permanently assigned to. (uncommon).
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    staticAssignedVehicleId?: string;
    /**
     * Driver\'s assigned tachograph card number (Europe specific)
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    tachographCardNumber?: string;
    /**
     * IDs of tags the driver is associated with.
     * @type {Array<string>}
     * @memberof UpdateDriverRequest
     */
    tagIds?: Array<string>;
    /**
     * Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs. Driver timezones use [IANA timezone database](https://www.iana.org/time-zones) keys (e.g. `America/Los_Angeles`, `America/New_York`, `Europe/London`, etc.). You can find a mapping of common timezone formats to IANA timezone keys [here](https://unicode.org/cldr/charts/latest/supplemental/zone_tzid.html).
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    timezone?: string;
    /**
     * Driver\'s login username into the driver app. The username may not contain spaces or the \'@\' symbol. The username must be unique.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    username?: string;
    /**
     * Tag ID which determines which vehicles a driver will see when selecting vehicles.
     * @type {string}
     * @memberof UpdateDriverRequest
     */
    vehicleGroupTagId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateDriverRequestDriverActivationStatusEnum {
    Active = 'active',
    Deactivated = 'deactivated'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateDriverRequestLocaleEnum {
    Us = 'us',
    At = 'at',
    Be = 'be',
    Ca = 'ca',
    Gb = 'gb',
    Fr = 'fr',
    De = 'de',
    Ie = 'ie',
    It = 'it',
    Lu = 'lu',
    Mx = 'mx',
    Nl = 'nl',
    Es = 'es',
    Ch = 'ch',
    Pr = 'pr'
}

/**
 * Information about resolving a DVIR.
 * @export
 * @interface UpdateDvirRequest
 */
export interface UpdateDvirRequest {
    /**
     * The user who is resolving the dvir.
     * @type {string}
     * @memberof UpdateDvirRequest
     */
    authorId: string;
    /**
     * Resolves the DVIR. Must be `true`.
     * @type {boolean}
     * @memberof UpdateDvirRequest
     */
    isResolved: boolean;
    /**
     * The mechanics notes on the DVIR.
     * @type {string}
     * @memberof UpdateDvirRequest
     */
    mechanicNotes?: string;
    /**
     * Time when user signed this DVIR. Defaults to now. UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof UpdateDvirRequest
     */
    signedAtTime?: string;
}
/**
 * 
 * @export
 * @interface UpdateRoutesStopRequestObjectRequestBody
 */
export interface UpdateRoutesStopRequestObjectRequestBody {
    /**
     * ID of the address. An address [externalId](https://developers.samsara.com/docs/external-ids#using-external-ids) can also be used interchangeably here.
     * @type {string}
     * @memberof UpdateRoutesStopRequestObjectRequestBody
     */
    addressId?: string;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof UpdateRoutesStopRequestObjectRequestBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the stop
     * @type {string}
     * @memberof UpdateRoutesStopRequestObjectRequestBody
     */
    id?: string;
    /**
     * Name of the stop
     * @type {string}
     * @memberof UpdateRoutesStopRequestObjectRequestBody
     */
    name?: string;
    /**
     * Notes for the stop
     * @type {string}
     * @memberof UpdateRoutesStopRequestObjectRequestBody
     */
    notes?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoutesStopRequestObjectRequestBody
     */
    scheduledArrivalTime?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateRoutesStopRequestObjectRequestBody
     */
    scheduledDepartureTime?: string;
    /**
     * 
     * @type {RoutesSingleUseAddressObjectRequestBody}
     * @memberof UpdateRoutesStopRequestObjectRequestBody
     */
    singleUseLocation?: RoutesSingleUseAddressObjectRequestBody;
}
/**
 * The user update arguments
 * @export
 * @interface UpdateUserRequest
 */
export interface UpdateUserRequest {
    /**
     * The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.
     * @type {string}
     * @memberof UpdateUserRequest
     */
    authType?: UpdateUserRequestAuthTypeEnum;
    /**
     * The first and last name of the user.
     * @type {string}
     * @memberof UpdateUserRequest
     */
    name?: string;
    /**
     * The list of roles that applies to this user. A user may have \"organizational\" roles, which apply to the user at the organizational level, and \"tag-specific\" roles, which apply to the user for a given tag.
     * @type {Array<CreateUserRequestRoles>}
     * @memberof UpdateUserRequest
     */
    roles?: Array<CreateUserRequestRoles>;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateUserRequestAuthTypeEnum {
    Default = 'default',
    Saml = 'saml'
}

/**
 * All the editable portions of the vehicle object.
 * @export
 * @interface UpdateVehicleRequest
 */
export interface UpdateVehicleRequest {
    /**
     * 
     * @type {Array<AttributeTiny>}
     * @memberof UpdateVehicleRequest
     */
    attributes?: Array<AttributeTiny>;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType1?: UpdateVehicleRequestAuxInputType1Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType10?: UpdateVehicleRequestAuxInputType10Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType2?: UpdateVehicleRequestAuxInputType2Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType3?: UpdateVehicleRequestAuxInputType3Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType4?: UpdateVehicleRequestAuxInputType4Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType5?: UpdateVehicleRequestAuxInputType5Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType6?: UpdateVehicleRequestAuxInputType6Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType7?: UpdateVehicleRequestAuxInputType7Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType8?: UpdateVehicleRequestAuxInputType8Enum;
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    auxInputType9?: UpdateVehicleRequestAuxInputType9Enum;
    /**
     * A manual override for the vehicle\'s engine hours. You may only override a vehicle\'s engine hours if it cannot be read from on-board diagnostics. When you provide a manual engine hours override, Samsara will begin updating a vehicle\'s engine hours based on when the Samsara Vehicle Gateway is recieving power or not.
     * @type {number}
     * @memberof UpdateVehicleRequest
     */
    engineHours?: number;
    /**
     * The <a href=\"/docs/external-ids\" target=\"_blank\">external IDs</a> for the given object.
     * @type {{ [key: string]: string; }}
     * @memberof UpdateVehicleRequest
     */
    externalIds?: { [key: string]: string; };
    /**
     * The serial number of the gateway.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    gatewaySerial?: string;
    /**
     * The harsh acceleration setting type. This setting influences the acceleration sensitivity from which a <a href=\"https://kb.samsara.com/hc/en-us/articles/360043051792-Safety-Event-Overview\" target=\"_blank\">harsh event</a> is triggered. **By default**, this setting is inferred by the Samsara Vehicle Gateway from the engine computer, but it may be set or updated through the Samsara Dashboard or the API at any time. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    harshAccelerationSettingType?: UpdateVehicleRequestHarshAccelerationSettingTypeEnum;
    /**
     * The license plate of the Vehicle. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    licensePlate?: string;
    /**
     * The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    name?: string;
    /**
     * These are generic notes about the Vehicle. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    notes?: string;
    /**
     * A manual override for the vehicle\'s odometer. You may only override a vehicle\'s odometer if it cannot be read from on-board diagnostics. When you provide a manual odometer override, Samsara will begin updating a vehicle\'s odometer using GPS distance traveled since this override was set. See <a href=\"https://kb.samsara.com/hc/en-us/articles/115005273667\" target=\"_blank\">here</a> for more details.
     * @type {number}
     * @memberof UpdateVehicleRequest
     */
    odometerMeters?: number;
    /**
     * ID for the static assigned driver of the vehicle. Setting the value to 0 will unassign the current driver.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    staticAssignedDriverId?: string;
    /**
     * An array of IDs of tags to associate with this vehicle.
     * @type {Array<string>}
     * @memberof UpdateVehicleRequest
     */
    tagIds?: Array<string>;
    /**
     * The VIN of the Vehicle. Most of the time, this will be automatically read from the engine computer by the Samsara Vehicle Gateway. It will be empty if it cannot be read. It can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof UpdateVehicleRequest
     */
    vin?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType1Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType10Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType2Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType3Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType4Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType5Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType6Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType7Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType8Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestAuxInputType9Enum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}
/**
    * @export
    * @enum {string}
    */
export enum UpdateVehicleRequestHarshAccelerationSettingTypeEnum {
    PassengerCar = 'passengerCar',
    LightTruck = 'lightTruck',
    HeavyDuty = 'heavyDuty',
    Off = 'off',
    Automatic = 'automatic'
}

/**
 * A user object.
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {UserAuthType}
     * @memberof User
     */
    authType: UserAuthType;
    /**
     * The email address of this user.
     * @type {string}
     * @memberof User
     */
    email: string;
    /**
     * ID of the user.
     * @type {string}
     * @memberof User
     */
    id: string;
    /**
     * The first and last name of the user.
     * @type {string}
     * @memberof User
     */
    name: string;
    /**
     * The list of roles that applies to this user. A user may have \"organizational\" roles, which apply to the user at the organizational level, and \"tag-specific\" roles, which apply to the user for a given tag.
     * @type {Array<UserRoleAssignment>}
     * @memberof User
     */
    roles: Array<UserRoleAssignment>;
}
/**
 * The authentication type the user uses to authenticate. To use SAML this organization must have a configured SAML integration.
 * @export
 * @enum {string}
 */
export enum UserAuthType {
    Default = 'default',
    Saml = 'saml'
}

/**
 * A single user.
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {User}
     * @memberof UserResponse
     */
    data?: User;
}
/**
 * A user role object.
 * @export
 * @interface UserRole
 */
export interface UserRole {
    /**
     * The unique ID for the role.
     * @type {string}
     * @memberof UserRole
     */
    id?: string;
    /**
     * The name of the role.
     * @type {string}
     * @memberof UserRole
     */
    name?: string;
}
/**
 * A role that applies to a user. If the role has a `tag`, then the role applies for that tag. If there is no `tag`, then the role applies at the organizational level. A user may have many tag-specific roles, but may only have one organizational level role. If the organizational level role has higher privileges than a tag-specific role, then the organizational role privileges will take precedence.
 * @export
 * @interface UserRoleAssignment
 */
export interface UserRoleAssignment {
    /**
     * 
     * @type {UserRole}
     * @memberof UserRoleAssignment
     */
    role?: UserRole;
    /**
     * 
     * @type {TagTinyResponse}
     * @memberof UserRoleAssignment
     */
    tag?: TagTinyResponse;
}
/**
 * A role that applies to a user. If the role has a `tagId`, then the role applies for that tag. If there is no `tagId`, then the role applies at the organizational level. A user may have many tag-specific roles, but may only have one organizational role. If the organizational level role has higher privileges than a tag-specific role, then the organizational role privileges will take precedence.
 * @export
 * @interface UserRoleAssignmentRequest
 */
export interface UserRoleAssignmentRequest {
    /**
     * The unique ID for the role.
     * @type {string}
     * @memberof UserRoleAssignmentRequest
     */
    roleId: string;
    /**
     * ID of the tag this role applies to.
     * @type {string}
     * @memberof UserRoleAssignmentRequest
     */
    tagId?: string;
}
/**
 * A minified user object.
 * @export
 * @interface UserTinyResponse
 */
export interface UserTinyResponse {
    /**
     * ID of the user.
     * @type {string}
     * @memberof UserTinyResponse
     */
    id?: string;
    /**
     * Name of the user.
     * @type {string}
     * @memberof UserTinyResponse
     */
    name?: string;
}
/**
 * Basic information of an asset
 * @export
 * @interface V1Asset
 */
export interface V1Asset {
    /**
     * Serial number of the host asset
     * @type {string}
     * @memberof V1Asset
     */
    assetSerialNumber?: string;
    /**
     * 
     * @type {V1AssetCable}
     * @memberof V1Asset
     */
    cable?: V1AssetCable;
    /**
     * Engine hours
     * @type {number}
     * @memberof V1Asset
     */
    engineHours?: number;
    /**
     * Asset ID
     * @type {number}
     * @memberof V1Asset
     */
    id: number;
    /**
     * Asset name
     * @type {string}
     * @memberof V1Asset
     */
    name?: string;
    /**
     * The ID of the Vehicle associated to the Asset (if present)
     * @type {number}
     * @memberof V1Asset
     */
    vehicleId?: number;
}
/**
 * The cable connected to the asset
 * @export
 * @interface V1AssetCable
 */
export interface V1AssetCable {
    /**
     * Asset type
     * @type {string}
     * @memberof V1AssetCable
     */
    assetType?: string;
}
/**
 * Current location of an asset
 * @export
 * @interface V1AssetCurrentLocation
 */
export interface V1AssetCurrentLocation {
    /**
     * The latitude of the location in degrees.
     * @type {number}
     * @memberof V1AssetCurrentLocation
     */
    latitude?: number;
    /**
     * The best effort (street,city,state) for the latitude and longitude.
     * @type {string}
     * @memberof V1AssetCurrentLocation
     */
    location?: string;
    /**
     * The longitude of the location in degrees.
     * @type {number}
     * @memberof V1AssetCurrentLocation
     */
    longitude?: number;
    /**
     * The speed calculated from GPS that the asset was traveling at in miles per hour.
     * @type {number}
     * @memberof V1AssetCurrentLocation
     */
    speedMilesPerHour?: number;
    /**
     * Time in Unix milliseconds since epoch when the asset was at the location.
     * @type {number}
     * @memberof V1AssetCurrentLocation
     */
    timeMs?: number;
}
/**
 * Basic information of an asset
 * @export
 * @interface V1AssetCurrentLocationsResponse
 */
export interface V1AssetCurrentLocationsResponse {
    /**
     * Asset serial number
     * @type {string}
     * @memberof V1AssetCurrentLocationsResponse
     */
    assetSerialNumber?: string;
    /**
     * 
     * @type {V1AssetCable}
     * @memberof V1AssetCurrentLocationsResponse
     */
    cable?: V1AssetCable;
    /**
     * Engine hours
     * @type {number}
     * @memberof V1AssetCurrentLocationsResponse
     */
    engineHours?: number;
    /**
     * Asset ID
     * @type {number}
     * @memberof V1AssetCurrentLocationsResponse
     */
    id: number;
    /**
     * Current location of an asset
     * @type {Array<V1AssetCurrentLocation>}
     * @memberof V1AssetCurrentLocationsResponse
     */
    location?: Array<V1AssetCurrentLocation>;
    /**
     * Asset name
     * @type {string}
     * @memberof V1AssetCurrentLocationsResponse
     */
    name?: string;
}
/**
 * Reefer-specific asset details
 * @export
 * @interface V1AssetReeferResponse
 */
export interface V1AssetReeferResponse {
    /**
     * Asset type
     * @type {string}
     * @memberof V1AssetReeferResponse
     */
    assetType?: string;
    /**
     * Asset ID
     * @type {number}
     * @memberof V1AssetReeferResponse
     */
    id?: number;
    /**
     * Asset name
     * @type {string}
     * @memberof V1AssetReeferResponse
     */
    name?: string;
    /**
     * 
     * @type {V1AssetReeferResponseReeferStats}
     * @memberof V1AssetReeferResponse
     */
    reeferStats?: V1AssetReeferResponseReeferStats;
}
/**
 * 
 * @export
 * @interface V1AssetReeferResponseReeferStats
 */
export interface V1AssetReeferResponseReeferStats {
    /**
     * Reefer alarms
     * @type {Array<V1AssetReeferResponseReeferStatsAlarms1>}
     * @memberof V1AssetReeferResponseReeferStats
     */
    alarms?: Array<V1AssetReeferResponseReeferStatsAlarms1>;
    /**
     * Engine hours of the reefer
     * @type {Array<V1AssetReeferResponseReeferStatsEngineHours>}
     * @memberof V1AssetReeferResponseReeferStats
     */
    engineHours?: Array<V1AssetReeferResponseReeferStatsEngineHours>;
    /**
     * Fuel percentage of the reefer
     * @type {Array<V1AssetReeferResponseReeferStatsFuelPercentage>}
     * @memberof V1AssetReeferResponseReeferStats
     */
    fuelPercentage?: Array<V1AssetReeferResponseReeferStatsFuelPercentage>;
    /**
     * Power status of the reefer
     * @type {Array<V1AssetReeferResponseReeferStatsPowerStatus>}
     * @memberof V1AssetReeferResponseReeferStats
     */
    powerStatus?: Array<V1AssetReeferResponseReeferStatsPowerStatus>;
    /**
     * Return air temperature of the reefer
     * @type {Array<V1AssetReeferResponseReeferStatsReturnAirTemp>}
     * @memberof V1AssetReeferResponseReeferStats
     */
    returnAirTemp?: Array<V1AssetReeferResponseReeferStatsReturnAirTemp>;
    /**
     * Set point temperature of the reefer
     * @type {Array<V1AssetReeferResponseReeferStatsSetPoint>}
     * @memberof V1AssetReeferResponseReeferStats
     */
    setPoint?: Array<V1AssetReeferResponseReeferStatsSetPoint>;
}
/**
 * 
 * @export
 * @interface V1AssetReeferResponseReeferStatsAlarms
 */
export interface V1AssetReeferResponseReeferStatsAlarms {
    /**
     * ID of the alarm
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsAlarms
     */
    alarmCode?: number;
    /**
     * Description of the alarm
     * @type {string}
     * @memberof V1AssetReeferResponseReeferStatsAlarms
     */
    description?: string;
    /**
     * Recommended operator action
     * @type {string}
     * @memberof V1AssetReeferResponseReeferStatsAlarms
     */
    operatorAction?: string;
    /**
     * Severity of the alarm: 1: OK to run, 2: Check as specified, 3: Take immediate action
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsAlarms
     */
    severity?: number;
}
/**
 * 
 * @export
 * @interface V1AssetReeferResponseReeferStatsAlarms1
 */
export interface V1AssetReeferResponseReeferStatsAlarms1 {
    /**
     * 
     * @type {Array<V1AssetReeferResponseReeferStatsAlarms>}
     * @memberof V1AssetReeferResponseReeferStatsAlarms1
     */
    alarms?: Array<V1AssetReeferResponseReeferStatsAlarms>;
    /**
     * Timestamp when the alarms were reported, in Unix milliseconds since epoch
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsAlarms1
     */
    changedAtMs?: number;
}
/**
 * 
 * @export
 * @interface V1AssetReeferResponseReeferStatsEngineHours
 */
export interface V1AssetReeferResponseReeferStatsEngineHours {
    /**
     * Timestamp in Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsEngineHours
     */
    changedAtMs?: number;
    /**
     * Engine hours of the reefer.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsEngineHours
     */
    engineHours?: number;
}
/**
 * 
 * @export
 * @interface V1AssetReeferResponseReeferStatsFuelPercentage
 */
export interface V1AssetReeferResponseReeferStatsFuelPercentage {
    /**
     * Timestamp in Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsFuelPercentage
     */
    changedAtMs?: number;
    /**
     * Fuel percentage of the reefer.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsFuelPercentage
     */
    fuelPercentage?: number;
}
/**
 * 
 * @export
 * @interface V1AssetReeferResponseReeferStatsPowerStatus
 */
export interface V1AssetReeferResponseReeferStatsPowerStatus {
    /**
     * Timestamp in Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsPowerStatus
     */
    changedAtMs?: number;
    /**
     * Power status of the reefer.
     * @type {string}
     * @memberof V1AssetReeferResponseReeferStatsPowerStatus
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface V1AssetReeferResponseReeferStatsReturnAirTemp
 */
export interface V1AssetReeferResponseReeferStatsReturnAirTemp {
    /**
     * Timestamp in Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsReturnAirTemp
     */
    changedAtMs?: number;
    /**
     * Return air temperature in millidegree Celsius.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsReturnAirTemp
     */
    tempInMilliC?: number;
}
/**
 * 
 * @export
 * @interface V1AssetReeferResponseReeferStatsSetPoint
 */
export interface V1AssetReeferResponseReeferStatsSetPoint {
    /**
     * Timestamp in Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsSetPoint
     */
    changedAtMs?: number;
    /**
     * Set point temperature in millidegree Celsius.
     * @type {number}
     * @memberof V1AssetReeferResponseReeferStatsSetPoint
     */
    tempInMilliC?: number;
}
/**
 * Reefer-specific details
 * @export
 * @interface V1AssetsReefer
 */
export interface V1AssetsReefer {
    /**
     * Asset type
     * @type {string}
     * @memberof V1AssetsReefer
     */
    assetType?: string;
    /**
     * Asset ID
     * @type {number}
     * @memberof V1AssetsReefer
     */
    id?: number;
    /**
     * Asset name
     * @type {string}
     * @memberof V1AssetsReefer
     */
    name?: string;
    /**
     * 
     * @type {V1AssetsReeferReeferStats}
     * @memberof V1AssetsReefer
     */
    reeferStats?: V1AssetsReeferReeferStats;
}
/**
 * Contains all the state changes of the reefer for the included stat types. Each state change is recorded independently, so the number of records in each array may differ depending on when that stat changed state. Stat types with a continuous value (such as temperature) will be recorded at different rates depending on the reefer, but generally readings have a frequency on the order of seconds.
 * @export
 * @interface V1AssetsReeferReeferStats
 */
export interface V1AssetsReeferReeferStats {
    /**
     * Ambient temperature of the reefer. This is the temperature of the air around the Samsara Asset Gateway.
     * @type {Array<V1AssetsReeferReeferStatsAmbientAirTemperature>}
     * @memberof V1AssetsReeferReeferStats
     */
    ambientAirTemperature?: Array<V1AssetsReeferReeferStatsAmbientAirTemperature>;
    /**
     * Discharge air temperature of the reefer. This is the temperature of the air as it leaves the cooling unit.
     * @type {Array<V1AssetsReeferReeferStatsDischargeAirTemperature>}
     * @memberof V1AssetsReeferReeferStats
     */
    dischargeAirTemperature?: Array<V1AssetsReeferReeferStatsDischargeAirTemperature>;
    /**
     * Engine hours of the reefer
     * @type {Array<V1AssetReeferResponseReeferStatsEngineHours>}
     * @memberof V1AssetsReeferReeferStats
     */
    engineHours?: Array<V1AssetReeferResponseReeferStatsEngineHours>;
    /**
     * Fuel percentage of the reefer
     * @type {Array<V1AssetReeferResponseReeferStatsFuelPercentage>}
     * @memberof V1AssetsReeferReeferStats
     */
    fuelPercentage?: Array<V1AssetReeferResponseReeferStatsFuelPercentage>;
    /**
     * Power status of the reefer
     * @type {Array<V1AssetsReeferReeferStatsPowerStatus>}
     * @memberof V1AssetsReeferReeferStats
     */
    powerStatus?: Array<V1AssetsReeferReeferStatsPowerStatus>;
    /**
     * Reefer alarms
     * @type {Array<V1AssetReeferResponseReeferStatsAlarms1>}
     * @memberof V1AssetsReeferReeferStats
     */
    reeferAlarms?: Array<V1AssetReeferResponseReeferStatsAlarms1>;
    /**
     * Return air temperature of the reefer. This is the temperature read by the reefer module (Carrier, Thermo King) that shows the temperature of the air as it enters the system.
     * @type {Array<V1AssetReeferResponseReeferStatsReturnAirTemp>}
     * @memberof V1AssetsReeferReeferStats
     */
    returnAirTemperature?: Array<V1AssetReeferResponseReeferStatsReturnAirTemp>;
    /**
     * Set point temperature of the reefer
     * @type {Array<V1AssetReeferResponseReeferStatsSetPoint>}
     * @memberof V1AssetsReeferReeferStats
     */
    setPoint?: Array<V1AssetReeferResponseReeferStatsSetPoint>;
}
/**
 * 
 * @export
 * @interface V1AssetsReeferReeferStatsAmbientAirTemperature
 */
export interface V1AssetsReeferReeferStatsAmbientAirTemperature {
    /**
     * Timestamp in Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1AssetsReeferReeferStatsAmbientAirTemperature
     */
    changedAtMs?: number;
    /**
     * Ambient temperature in millidegree Celsius.
     * @type {number}
     * @memberof V1AssetsReeferReeferStatsAmbientAirTemperature
     */
    tempInMilliC?: number;
}
/**
 * 
 * @export
 * @interface V1AssetsReeferReeferStatsDischargeAirTemperature
 */
export interface V1AssetsReeferReeferStatsDischargeAirTemperature {
    /**
     * Timestamp in Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1AssetsReeferReeferStatsDischargeAirTemperature
     */
    changedAtMs?: number;
    /**
     * Discharge temperature in millidegree Celsius.
     * @type {number}
     * @memberof V1AssetsReeferReeferStatsDischargeAirTemperature
     */
    tempInMilliC?: number;
}
/**
 * 
 * @export
 * @interface V1AssetsReeferReeferStatsPowerStatus
 */
export interface V1AssetsReeferReeferStatsPowerStatus {
    /**
     * Timestamp in Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1AssetsReeferReeferStatsPowerStatus
     */
    changedAtMs?: number;
    /**
     * Power status of the reefer.
     * @type {string}
     * @memberof V1AssetsReeferReeferStatsPowerStatus
     */
    status?: V1AssetsReeferReeferStatsPowerStatusStatusEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum V1AssetsReeferReeferStatsPowerStatusStatusEnum {
    Off = 'Off',
    Active = 'Active',
    ActiveStartStop = 'Active (Start/Stop)',
    ActiveContinuous = 'Active (Continuous)'
}

/**
 * Contains the current cargo status of a sensor.
 * @export
 * @interface V1CargoResponse
 */
export interface V1CargoResponse {
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1CargoResponse
     */
    groupId?: number;
    /**
     * 
     * @type {Array<V1CargoResponseSensors>}
     * @memberof V1CargoResponse
     */
    sensors?: Array<V1CargoResponseSensors>;
}
/**
 * 
 * @export
 * @interface V1CargoResponseSensors
 */
export interface V1CargoResponseSensors {
    /**
     * Flag indicating whether the current cargo is empty or loaded.
     * @type {boolean}
     * @memberof V1CargoResponseSensors
     */
    cargoEmpty?: boolean;
    /**
     * The timestamp of reported cargo status, specified in RFC 3339 time.
     * @type {string}
     * @memberof V1CargoResponseSensors
     */
    cargoStatusTime?: string;
    /**
     * ID of the sensor.
     * @type {number}
     * @memberof V1CargoResponseSensors
     */
    id?: number;
    /**
     * Name of the sensor.
     * @type {string}
     * @memberof V1CargoResponseSensors
     */
    name?: string;
    /**
     * ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1CargoResponseSensors
     */
    trailerId?: number;
    /**
     * ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1CargoResponseSensors
     */
    vehicleId?: number;
}
/**
 * 
 * @export
 * @interface V1DataInputHistoryResponse
 */
export interface V1DataInputHistoryResponse {
    /**
     * The ID of this data input
     * @type {number}
     * @memberof V1DataInputHistoryResponse
     */
    id?: number;
    /**
     * Name of this data input
     * @type {string}
     * @memberof V1DataInputHistoryResponse
     */
    name: string;
    /**
     * Data points from this data input
     * @type {Array<V1DataInputHistoryResponsePoints>}
     * @memberof V1DataInputHistoryResponse
     */
    points?: Array<V1DataInputHistoryResponsePoints>;
}
/**
 * 
 * @export
 * @interface V1DataInputHistoryResponsePoints
 */
export interface V1DataInputHistoryResponsePoints {
    /**
     * 
     * @type {number}
     * @memberof V1DataInputHistoryResponsePoints
     */
    timeMs?: number;
    /**
     * 
     * @type {number}
     * @memberof V1DataInputHistoryResponsePoints
     */
    value?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchJob
 */
export interface V1DispatchJob {
    /**
     * The time at which the driver arrived at the job destination.
     * @type {number}
     * @memberof V1DispatchJob
     */
    arrived_at_ms?: number;
    /**
     * The time at which the job was marked complete (e.g. started driving to the next destination).
     * @type {number}
     * @memberof V1DispatchJob
     */
    completed_at_ms?: number;
    /**
     * ID of the route that this job belongs to.
     * @type {number}
     * @memberof V1DispatchJob
     */
    dispatch_route_id: number;
    /**
     * Document submissions associated with this job.
     * @type {Array<V1DispatchJobDocumentInfo>}
     * @memberof V1DispatchJob
     */
    documents?: Array<V1DispatchJobDocumentInfo>;
    /**
     * ID of the driver assigned to the dispatch job.
     * @type {number}
     * @memberof V1DispatchJob
     */
    driver_id?: number;
    /**
     * The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
     * @type {number}
     * @memberof V1DispatchJob
     */
    en_route_at_ms?: number;
    /**
     * The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.
     * @type {number}
     * @memberof V1DispatchJob
     */
    estimated_arrival_ms?: number;
    /**
     * Fleet viewer url of the dispatch job.
     * @type {string}
     * @memberof V1DispatchJob
     */
    fleet_viewer_url?: string;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DispatchJob
     */
    group_id?: number;
    /**
     * ID of the Samsara dispatch job.
     * @type {number}
     * @memberof V1DispatchJob
     */
    id: number;
    /**
     * 
     * @type {V1JobStatus}
     * @memberof V1DispatchJob
     */
    job_state: V1JobStatus;
    /**
     * The time at which the job was marked skipped.
     * @type {number}
     * @memberof V1DispatchJob
     */
    skipped_at_ms?: number;
    /**
     * ID of the vehicle used for the dispatch job.
     * @type {number}
     * @memberof V1DispatchJob
     */
    vehicle_id?: number;
    /**
     * The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
     * @type {string}
     * @memberof V1DispatchJob
     */
    destination_address?: string;
    /**
     * ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address and latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
     * @type {number}
     * @memberof V1DispatchJob
     */
    destination_address_id?: number;
    /**
     * Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
     * @type {number}
     * @memberof V1DispatchJob
     */
    destination_lat?: number;
    /**
     * Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
     * @type {number}
     * @memberof V1DispatchJob
     */
    destination_lng?: number;
    /**
     * The name of the job destination. If provided, it will take precedence over the name of the address book entry.
     * @type {string}
     * @memberof V1DispatchJob
     */
    destination_name?: string;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof V1DispatchJob
     */
    external_ids?: object;
    /**
     * Notes regarding the details of this job, maximum of 2000 characters; newline characters (\'\\n\')can be used for formatting.
     * @type {string}
     * @memberof V1DispatchJob
     */
    notes?: string;
    /**
     * The time at which the assigned driver is scheduled to arrive at the job destination.
     * @type {number}
     * @memberof V1DispatchJob
     */
    scheduled_arrival_time_ms: number;
    /**
     * The time at which the assigned driver is scheduled to depart from the job destination.
     * @type {number}
     * @memberof V1DispatchJob
     */
    scheduled_departure_time_ms?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchJobAllOf
 */
export interface V1DispatchJobAllOf {
    /**
     * The time at which the driver arrived at the job destination.
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    arrived_at_ms?: number;
    /**
     * The time at which the job was marked complete (e.g. started driving to the next destination).
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    completed_at_ms?: number;
    /**
     * ID of the route that this job belongs to.
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    dispatch_route_id: number;
    /**
     * Document submissions associated with this job.
     * @type {Array<V1DispatchJobDocumentInfo>}
     * @memberof V1DispatchJobAllOf
     */
    documents?: Array<V1DispatchJobDocumentInfo>;
    /**
     * ID of the driver assigned to the dispatch job.
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    driver_id?: number;
    /**
     * The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    en_route_at_ms?: number;
    /**
     * The time at which the assigned driver is estimated to arrive at the job destination. Only valid for en-route jobs.
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    estimated_arrival_ms?: number;
    /**
     * Fleet viewer url of the dispatch job.
     * @type {string}
     * @memberof V1DispatchJobAllOf
     */
    fleet_viewer_url?: string;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    group_id?: number;
    /**
     * ID of the Samsara dispatch job.
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    id: number;
    /**
     * 
     * @type {V1JobStatus}
     * @memberof V1DispatchJobAllOf
     */
    job_state: V1JobStatus;
    /**
     * The time at which the job was marked skipped.
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    skipped_at_ms?: number;
    /**
     * ID of the vehicle used for the dispatch job.
     * @type {number}
     * @memberof V1DispatchJobAllOf
     */
    vehicle_id?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchJobCreate
 */
export interface V1DispatchJobCreate {
    /**
     * The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
     * @type {string}
     * @memberof V1DispatchJobCreate
     */
    destination_address?: string;
    /**
     * ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address and latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
     * @type {number}
     * @memberof V1DispatchJobCreate
     */
    destination_address_id?: number;
    /**
     * Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
     * @type {number}
     * @memberof V1DispatchJobCreate
     */
    destination_lat?: number;
    /**
     * Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
     * @type {number}
     * @memberof V1DispatchJobCreate
     */
    destination_lng?: number;
    /**
     * The name of the job destination. If provided, it will take precedence over the name of the address book entry.
     * @type {string}
     * @memberof V1DispatchJobCreate
     */
    destination_name?: string;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof V1DispatchJobCreate
     */
    external_ids?: object;
    /**
     * Notes regarding the details of this job, maximum of 2000 characters; newline characters (\'\\n\')can be used for formatting.
     * @type {string}
     * @memberof V1DispatchJobCreate
     */
    notes?: string;
    /**
     * The time at which the assigned driver is scheduled to arrive at the job destination.
     * @type {number}
     * @memberof V1DispatchJobCreate
     */
    scheduled_arrival_time_ms: number;
    /**
     * The time at which the assigned driver is scheduled to depart from the job destination.
     * @type {number}
     * @memberof V1DispatchJobCreate
     */
    scheduled_departure_time_ms?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchJobDocumentInfo
 */
export interface V1DispatchJobDocumentInfo {
    /**
     * ID of driver that submitted the document.
     * @type {number}
     * @memberof V1DispatchJobDocumentInfo
     */
    driverId: number;
    /**
     * ID of document. This can be used to query for the document\'s info via the /v1/fleet/drivers/{driver_id}/documents/{document_id} endpoint
     * @type {string}
     * @memberof V1DispatchJobDocumentInfo
     */
    id: string;
}
/**
 * 
 * @export
 * @interface V1DispatchJobWithoutETA
 */
export interface V1DispatchJobWithoutETA {
    /**
     * The time at which the driver arrived at the job destination.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    arrived_at_ms?: number;
    /**
     * The time at which the job was marked complete (e.g. started driving to the next destination).
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    completed_at_ms?: number;
    /**
     * ID of the route that this job belongs to.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    dispatch_route_id: number;
    /**
     * Document submissions associated with this job.
     * @type {Array<V1DispatchJobDocumentInfo>}
     * @memberof V1DispatchJobWithoutETA
     */
    documents?: Array<V1DispatchJobDocumentInfo>;
    /**
     * ID of the driver assigned to the dispatch job.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    driver_id?: number;
    /**
     * The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    en_route_at_ms?: number;
    /**
     * Fleet viewer url of the dispatch job.
     * @type {string}
     * @memberof V1DispatchJobWithoutETA
     */
    fleet_viewer_url?: string;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    group_id?: number;
    /**
     * ID of the Samsara dispatch job.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    id: number;
    /**
     * 
     * @type {V1JobStatus}
     * @memberof V1DispatchJobWithoutETA
     */
    job_state: V1JobStatus;
    /**
     * The time at which the job was marked skipped.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    skipped_at_ms?: number;
    /**
     * ID of the vehicle used for the dispatch job.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    vehicle_id?: number;
    /**
     * The address of the job destination, as it would be recognized if provided to maps.google.com. Optional if a valid destination address ID is provided.
     * @type {string}
     * @memberof V1DispatchJobWithoutETA
     */
    destination_address?: string;
    /**
     * ID of the job destination associated with an address book entry. Optional if valid values are provided for destination address and latitude/longitude. If a valid destination address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the destination name is not provided.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    destination_address_id?: number;
    /**
     * Latitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    destination_lat?: number;
    /**
     * Longitude of the destination in decimal degrees. Optional if a valid destination address ID is provided.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    destination_lng?: number;
    /**
     * The name of the job destination. If provided, it will take precedence over the name of the address book entry.
     * @type {string}
     * @memberof V1DispatchJobWithoutETA
     */
    destination_name?: string;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof V1DispatchJobWithoutETA
     */
    external_ids?: object;
    /**
     * Notes regarding the details of this job, maximum of 2000 characters; newline characters (\'\\n\')can be used for formatting.
     * @type {string}
     * @memberof V1DispatchJobWithoutETA
     */
    notes?: string;
    /**
     * The time at which the assigned driver is scheduled to arrive at the job destination.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    scheduled_arrival_time_ms: number;
    /**
     * The time at which the assigned driver is scheduled to depart from the job destination.
     * @type {number}
     * @memberof V1DispatchJobWithoutETA
     */
    scheduled_departure_time_ms?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchJobWithoutETAAllOf
 */
export interface V1DispatchJobWithoutETAAllOf {
    /**
     * The time at which the driver arrived at the job destination.
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    arrived_at_ms?: number;
    /**
     * The time at which the job was marked complete (e.g. started driving to the next destination).
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    completed_at_ms?: number;
    /**
     * ID of the route that this job belongs to.
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    dispatch_route_id: number;
    /**
     * Document submissions associated with this job.
     * @type {Array<V1DispatchJobDocumentInfo>}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    documents?: Array<V1DispatchJobDocumentInfo>;
    /**
     * ID of the driver assigned to the dispatch job.
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    driver_id?: number;
    /**
     * The time at which the assigned driver started fulfilling the job (e.g. started driving to the destination).
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    en_route_at_ms?: number;
    /**
     * Fleet viewer url of the dispatch job.
     * @type {string}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    fleet_viewer_url?: string;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    group_id?: number;
    /**
     * ID of the Samsara dispatch job.
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    id: number;
    /**
     * 
     * @type {V1JobStatus}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    job_state: V1JobStatus;
    /**
     * The time at which the job was marked skipped.
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    skipped_at_ms?: number;
    /**
     * ID of the vehicle used for the dispatch job.
     * @type {number}
     * @memberof V1DispatchJobWithoutETAAllOf
     */
    vehicle_id?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchRoute
 */
export interface V1DispatchRoute {
    /**
     * The dispatch jobs associated with this route.
     * @type {Array<V1DispatchJob>}
     * @memberof V1DispatchRoute
     */
    dispatch_jobs?: Array<V1DispatchJob>;
    /**
     * ID of the Samsara dispatch route.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    id?: number;
    /**
     * The time in Unix epoch milliseconds that the route actually ended.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    actual_end_ms?: number;
    /**
     * The time in Unix epoch milliseconds that the route actually started.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    actual_start_ms?: number;
    /**
     * When set to true (default), this causes the Route to complete on arrival at the final stop. When set to false, the last stop will capture arrival and departure separately as with other stops.
     * @type {boolean}
     * @memberof V1DispatchRoute
     */
    complete_last_stop_on_arrival?: boolean;
    /**
     * ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    driver_id?: number;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof V1DispatchRoute
     */
    externalIds?: object;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    group_id?: number;
    /**
     * Descriptive name of this route.
     * @type {string}
     * @memberof V1DispatchRoute
     */
    name?: string;
    /**
     * Notes regarding the details of this route; maximum of 2000 characters; newline characters (\'\\n\')can be used for formatting.
     * @type {string}
     * @memberof V1DispatchRoute
     */
    notes?: string;
    /**
     * Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    odometer_end_meters?: number;
    /**
     * Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    odometer_start_meters?: number;
    /**
     * The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    scheduled_end_ms?: number;
    /**
     * The distance expected to be traveled for this route in meters.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    scheduled_meters?: number;
    /**
     * The time in Unix epoch milliseconds that the route is scheduled to start.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    scheduled_start_ms?: number;
    /**
     * The address of the route\'s starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
     * @type {string}
     * @memberof V1DispatchRoute
     */
    start_location_address?: string;
    /**
     * ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    start_location_address_id?: number;
    /**
     * Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    start_location_lat?: number;
    /**
     * Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    start_location_lng?: number;
    /**
     * The name of the route\'s starting location. If provided, it will take precedence over the name of the address book entry.
     * @type {string}
     * @memberof V1DispatchRoute
     */
    start_location_name?: string;
    /**
     * ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    trailer_id?: number;
    /**
     * ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
     * @type {number}
     * @memberof V1DispatchRoute
     */
    vehicle_id?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchRouteAllOf
 */
export interface V1DispatchRouteAllOf {
    /**
     * The dispatch jobs associated with this route.
     * @type {Array<V1DispatchJob>}
     * @memberof V1DispatchRouteAllOf
     */
    dispatch_jobs?: Array<V1DispatchJob>;
    /**
     * ID of the Samsara dispatch route.
     * @type {number}
     * @memberof V1DispatchRouteAllOf
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchRouteBase
 */
export interface V1DispatchRouteBase {
    /**
     * The time in Unix epoch milliseconds that the route actually ended.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    actual_end_ms?: number;
    /**
     * The time in Unix epoch milliseconds that the route actually started.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    actual_start_ms?: number;
    /**
     * When set to true (default), this causes the Route to complete on arrival at the final stop. When set to false, the last stop will capture arrival and departure separately as with other stops.
     * @type {boolean}
     * @memberof V1DispatchRouteBase
     */
    complete_last_stop_on_arrival?: boolean;
    /**
     * ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    driver_id?: number;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof V1DispatchRouteBase
     */
    externalIds?: object;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    group_id?: number;
    /**
     * Descriptive name of this route.
     * @type {string}
     * @memberof V1DispatchRouteBase
     */
    name?: string;
    /**
     * Notes regarding the details of this route; maximum of 2000 characters; newline characters (\'\\n\')can be used for formatting.
     * @type {string}
     * @memberof V1DispatchRouteBase
     */
    notes?: string;
    /**
     * Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    odometer_end_meters?: number;
    /**
     * Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    odometer_start_meters?: number;
    /**
     * The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    scheduled_end_ms?: number;
    /**
     * The distance expected to be traveled for this route in meters.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    scheduled_meters?: number;
    /**
     * The time in Unix epoch milliseconds that the route is scheduled to start.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    scheduled_start_ms?: number;
    /**
     * The address of the route\'s starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
     * @type {string}
     * @memberof V1DispatchRouteBase
     */
    start_location_address?: string;
    /**
     * ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    start_location_address_id?: number;
    /**
     * Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    start_location_lat?: number;
    /**
     * Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    start_location_lng?: number;
    /**
     * The name of the route\'s starting location. If provided, it will take precedence over the name of the address book entry.
     * @type {string}
     * @memberof V1DispatchRouteBase
     */
    start_location_name?: string;
    /**
     * ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    trailer_id?: number;
    /**
     * ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
     * @type {number}
     * @memberof V1DispatchRouteBase
     */
    vehicle_id?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchRouteHistoricalEntry
 */
export interface V1DispatchRouteHistoricalEntry {
    /**
     * Timestamp that the route was updated, represented as Unix milliseconds since epoch.
     * @type {number}
     * @memberof V1DispatchRouteHistoricalEntry
     */
    changed_at_ms?: number;
    /**
     * 
     * @type {V1DispatchRoute}
     * @memberof V1DispatchRouteHistoricalEntry
     */
    route?: V1DispatchRoute;
}
/**
 * 
 * @export
 * @interface V1DispatchRouteHistory
 */
export interface V1DispatchRouteHistory {
    /**
     * History of the route\'s state changes.
     * @type {Array<V1DispatchRouteHistoricalEntry>}
     * @memberof V1DispatchRouteHistory
     */
    history?: Array<V1DispatchRouteHistoricalEntry>;
}
/**
 * 
 * @export
 * @interface V1DispatchRouteWithoutETA
 */
export interface V1DispatchRouteWithoutETA {
    /**
     * The dispatch jobs associated with this route.
     * @type {Array<V1DispatchJobWithoutETA>}
     * @memberof V1DispatchRouteWithoutETA
     */
    dispatch_jobs?: Array<V1DispatchJobWithoutETA>;
    /**
     * ID of the Samsara dispatch route.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    id?: number;
    /**
     * The time in Unix epoch milliseconds that the route actually ended.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    actual_end_ms?: number;
    /**
     * The time in Unix epoch milliseconds that the route actually started.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    actual_start_ms?: number;
    /**
     * When set to true (default), this causes the Route to complete on arrival at the final stop. When set to false, the last stop will capture arrival and departure separately as with other stops.
     * @type {boolean}
     * @memberof V1DispatchRouteWithoutETA
     */
    complete_last_stop_on_arrival?: boolean;
    /**
     * ID of the driver assigned to the dispatch route. Note that driver_id and vehicle_id are mutually exclusive. If neither is specified, then the route is unassigned.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    driver_id?: number;
    /**
     * The [external IDs](https://developers.samsara.com/docs/external-ids) for the given object.
     * @type {object}
     * @memberof V1DispatchRouteWithoutETA
     */
    externalIds?: object;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    group_id?: number;
    /**
     * Descriptive name of this route.
     * @type {string}
     * @memberof V1DispatchRouteWithoutETA
     */
    name?: string;
    /**
     * Notes regarding the details of this route; maximum of 2000 characters; newline characters (\'\\n\')can be used for formatting.
     * @type {string}
     * @memberof V1DispatchRouteWithoutETA
     */
    notes?: string;
    /**
     * Odometer reading at the end of the route. Will not be returned if Route is not completed or if Odometer information is not available for the relevant vehicle.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    odometer_end_meters?: number;
    /**
     * Odometer reading at the start of the route. Will not be returned if Route has not started or if Odometer information is not available for the relevant vehicle.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    odometer_start_meters?: number;
    /**
     * The time in Unix epoch milliseconds that the last job in the route is scheduled to end.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    scheduled_end_ms?: number;
    /**
     * The distance expected to be traveled for this route in meters.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    scheduled_meters?: number;
    /**
     * The time in Unix epoch milliseconds that the route is scheduled to start.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    scheduled_start_ms?: number;
    /**
     * The address of the route\'s starting location, as it would be recognized if provided to maps.google.com. Optional if a valid start location address ID is provided.
     * @type {string}
     * @memberof V1DispatchRouteWithoutETA
     */
    start_location_address?: string;
    /**
     * ID of the start location associated with an address book entry. Optional if valid values are provided for start location address and latitude/longitude. If a valid start location address ID is provided, address/latitude/longitude will be used from the address book entry. Name of the address book entry will only be used if the start location name is not provided.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    start_location_address_id?: number;
    /**
     * Latitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    start_location_lat?: number;
    /**
     * Longitude of the start location in decimal degrees. Optional if a valid start location address ID is provided.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    start_location_lng?: number;
    /**
     * The name of the route\'s starting location. If provided, it will take precedence over the name of the address book entry.
     * @type {string}
     * @memberof V1DispatchRouteWithoutETA
     */
    start_location_name?: string;
    /**
     * ID of the trailer assigned to the dispatch route. Note that trailers can only be assigned to routes that have a Vehicle or Driver assigned to them.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    trailer_id?: number;
    /**
     * ID of the vehicle assigned to the dispatch route. Note that vehicle_id and driver_id are mutually exclusive. If neither is specified, then the route is unassigned.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETA
     */
    vehicle_id?: number;
}
/**
 * 
 * @export
 * @interface V1DispatchRouteWithoutETAAllOf
 */
export interface V1DispatchRouteWithoutETAAllOf {
    /**
     * The dispatch jobs associated with this route.
     * @type {Array<V1DispatchJobWithoutETA>}
     * @memberof V1DispatchRouteWithoutETAAllOf
     */
    dispatch_jobs?: Array<V1DispatchJobWithoutETA>;
    /**
     * ID of the Samsara dispatch route.
     * @type {number}
     * @memberof V1DispatchRouteWithoutETAAllOf
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface V1Document
 */
export interface V1Document {
    /**
     * An array of objects that describe a set of fields conditionally shown by a multiple choice value.
     * @type {Array<object>}
     * @memberof V1Document
     */
    conditionalFieldSections?: Array<object>;
    /**
     * Name of the document type.
     * @type {string}
     * @memberof V1Document
     */
    documentType: string;
    /**
     * The time in Unix epoch milliseconds that the document was created in the driver app.
     * @type {number}
     * @memberof V1Document
     */
    driverCreatedAtMs: number;
    /**
     * ID of the driver for whom the document is submitted.
     * @type {number}
     * @memberof V1Document
     */
    driverId: number;
    /**
     * An array of field objects associated with a document.
     * @type {Array<object>}
     * @memberof V1Document
     */
    fields: Array<object>;
    /**
     * ID of the document.
     * @type {string}
     * @memberof V1Document
     */
    id: string;
    /**
     * Organization ID that the document belongs to.
     * @type {number}
     * @memberof V1Document
     */
    orgId: number;
    /**
     * The time in Unix epoch milliseconds that the document was received by the server.
     * @type {number}
     * @memberof V1Document
     */
    serverCreatedAtMs: number;
    /**
     * The time in Unix epoch milliseconds that the document was updated on the server.
     * @type {number}
     * @memberof V1Document
     */
    serverUpdatedAtMs: number;
    /**
     * ID of the vehicle the driver was signed into when the document was submitted. Will be `null` if the document `state` is `Required`.
     * @type {number}
     * @memberof V1Document
     */
    vehicleId: number;
    /**
     * ID of the Samsara dispatch job for which the document is submitted.
     * @type {number}
     * @memberof V1Document
     */
    dispatchJobId: number;
    /**
     * Custom name of the document. If no custom name is given to the document, the admin dashboard and driver app will display the template name as the default document name.
     * @type {string}
     * @memberof V1Document
     */
    name?: string;
    /**
     * Notes submitted with this document.
     * @type {string}
     * @memberof V1Document
     */
    notes: string;
    /**
     * The condition of the document created for the driver. Can be either `Required` or `Submitted`. If no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. `Submitted` documents have been submitted by the driver in the Driver App. `Archived` documents have been archived by the admin in the cloud dashboard.
     * @type {string}
     * @memberof V1Document
     */
    state?: V1DocumentStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum V1DocumentStateEnum {
    Required = 'Required',
    Submitted = 'Submitted',
    Archived = 'Archived'
}

/**
 * 
 * @export
 * @interface V1DocumentAllOf
 */
export interface V1DocumentAllOf {
    /**
     * An array of objects that describe a set of fields conditionally shown by a multiple choice value.
     * @type {Array<object>}
     * @memberof V1DocumentAllOf
     */
    conditionalFieldSections?: Array<object>;
    /**
     * Name of the document type.
     * @type {string}
     * @memberof V1DocumentAllOf
     */
    documentType: string;
    /**
     * The time in Unix epoch milliseconds that the document was created in the driver app.
     * @type {number}
     * @memberof V1DocumentAllOf
     */
    driverCreatedAtMs: number;
    /**
     * ID of the driver for whom the document is submitted.
     * @type {number}
     * @memberof V1DocumentAllOf
     */
    driverId: number;
    /**
     * An array of field objects associated with a document.
     * @type {Array<object>}
     * @memberof V1DocumentAllOf
     */
    fields: Array<object>;
    /**
     * ID of the document.
     * @type {string}
     * @memberof V1DocumentAllOf
     */
    id: string;
    /**
     * Organization ID that the document belongs to.
     * @type {number}
     * @memberof V1DocumentAllOf
     */
    orgId: number;
    /**
     * The time in Unix epoch milliseconds that the document was received by the server.
     * @type {number}
     * @memberof V1DocumentAllOf
     */
    serverCreatedAtMs: number;
    /**
     * The time in Unix epoch milliseconds that the document was updated on the server.
     * @type {number}
     * @memberof V1DocumentAllOf
     */
    serverUpdatedAtMs: number;
    /**
     * ID of the vehicle the driver was signed into when the document was submitted. Will be `null` if the document `state` is `Required`.
     * @type {number}
     * @memberof V1DocumentAllOf
     */
    vehicleId: number;
}
/**
 * 
 * @export
 * @interface V1DocumentBase
 */
export interface V1DocumentBase {
    /**
     * ID of the Samsara dispatch job for which the document is submitted.
     * @type {number}
     * @memberof V1DocumentBase
     */
    dispatchJobId: number;
    /**
     * Custom name of the document. If no custom name is given to the document, the admin dashboard and driver app will display the template name as the default document name.
     * @type {string}
     * @memberof V1DocumentBase
     */
    name?: string;
    /**
     * Notes submitted with this document.
     * @type {string}
     * @memberof V1DocumentBase
     */
    notes: string;
    /**
     * The condition of the document created for the driver. Can be either `Required` or `Submitted`. If no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. `Submitted` documents have been submitted by the driver in the Driver App. `Archived` documents have been archived by the admin in the cloud dashboard.
     * @type {string}
     * @memberof V1DocumentBase
     */
    state?: V1DocumentBaseStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum V1DocumentBaseStateEnum {
    Required = 'Required',
    Submitted = 'Submitted',
    Archived = 'Archived'
}

/**
 * 
 * @export
 * @interface V1DocumentCreate
 */
export interface V1DocumentCreate {
    /**
     * Universally unique identifier for the document type that this document is being created for.
     * @type {string}
     * @memberof V1DocumentCreate
     */
    documentTypeUuid: string;
    /**
     * List of fields for the document. The fields must be listed in the order that that they appear in the document type. Values of fields can be set to null or omitted if the document state is set to \"Required\".
     * @type {Array<object>}
     * @memberof V1DocumentCreate
     */
    fields: Array<object>;
    /**
     * ID of the Samsara dispatch job for which the document is submitted.
     * @type {number}
     * @memberof V1DocumentCreate
     */
    dispatchJobId?: number;
    /**
     * Custom name of the document. If no custom name is given to the document, the admin dashboard and driver app will display the template name as the default document name.
     * @type {string}
     * @memberof V1DocumentCreate
     */
    name?: string;
    /**
     * Notes submitted with this document.
     * @type {string}
     * @memberof V1DocumentCreate
     */
    notes?: string;
    /**
     * The condition of the document created for the driver. Can be either `Required` or `Submitted`. If no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. `Submitted` documents will show up as submitted by the driver through the driver app.
     * @type {string}
     * @memberof V1DocumentCreate
     */
    state?: V1DocumentCreateStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum V1DocumentCreateStateEnum {
    Required = 'Required',
    Submitted = 'Submitted'
}

/**
 * Arguments to create a document.
 * @export
 * @interface V1DocumentCreateAllOf
 */
export interface V1DocumentCreateAllOf {
    /**
     * Universally unique identifier for the document type that this document is being created for.
     * @type {string}
     * @memberof V1DocumentCreateAllOf
     */
    documentTypeUuid: string;
    /**
     * List of fields for the document. The fields must be listed in the order that that they appear in the document type. Values of fields can be set to null or omitted if the document state is set to \"Required\".
     * @type {Array<object>}
     * @memberof V1DocumentCreateAllOf
     */
    fields: Array<object>;
}
/**
 * 
 * @export
 * @interface V1DocumentCreateBase
 */
export interface V1DocumentCreateBase {
    /**
     * ID of the Samsara dispatch job for which the document is submitted.
     * @type {number}
     * @memberof V1DocumentCreateBase
     */
    dispatchJobId?: number;
    /**
     * Custom name of the document. If no custom name is given to the document, the admin dashboard and driver app will display the template name as the default document name.
     * @type {string}
     * @memberof V1DocumentCreateBase
     */
    name?: string;
    /**
     * Notes submitted with this document.
     * @type {string}
     * @memberof V1DocumentCreateBase
     */
    notes?: string;
    /**
     * The condition of the document created for the driver. Can be either `Required` or `Submitted`. If no value is specified, `state` defaults to `Required`. `Required` documents are pre-populated documents for the Driver to fill out in the Driver App and have not yet been submitted. `Submitted` documents will show up as submitted by the driver through the driver app.
     * @type {string}
     * @memberof V1DocumentCreateBase
     */
    state?: V1DocumentCreateBaseStateEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum V1DocumentCreateBaseStateEnum {
    Required = 'Required',
    Submitted = 'Submitted'
}

/**
 * 
 * @export
 * @interface V1DocumentFieldType
 */
export interface V1DocumentFieldType {
    /**
     * Name of this field type.
     * @type {string}
     * @memberof V1DocumentFieldType
     */
    label: string;
    /**
     * 
     * @type {V1DocumentFieldTypeMultipleChoiceValueTypeMetadata}
     * @memberof V1DocumentFieldType
     */
    multipleChoiceValueTypeMetadata?: V1DocumentFieldTypeMultipleChoiceValueTypeMetadata;
    /**
     * 
     * @type {V1DocumentFieldTypeNumberValueTypeMetadata}
     * @memberof V1DocumentFieldType
     */
    numberValueTypeMetadata?: V1DocumentFieldTypeNumberValueTypeMetadata;
    /**
     * 
     * @type {V1DocumentFieldTypeSignatureValueTypeMetadata}
     * @memberof V1DocumentFieldType
     */
    signatureValueTypeMetadata?: V1DocumentFieldTypeSignatureValueTypeMetadata;
    /**
     * The type of value this field can have. Valid values: `ValueType_Number`, `ValueType_String`, `ValueType_Photo`, `ValueType_MultipleChoice`, `ValueType_Signature`, `ValueType_DateTime`.
     * @type {string}
     * @memberof V1DocumentFieldType
     */
    valueType: string;
}
/**
 * Metadata about the multiple choice field. Only present for value type `ValueType_MultipleChoice`
 * @export
 * @interface V1DocumentFieldTypeMultipleChoiceValueTypeMetadata
 */
export interface V1DocumentFieldTypeMultipleChoiceValueTypeMetadata {
    /**
     * Array of the multiple choice option labels for the field
     * @type {Array<V1DocumentFieldTypeMultipleChoiceValueTypeMetadataMultipleChoiceOptionLabels>}
     * @memberof V1DocumentFieldTypeMultipleChoiceValueTypeMetadata
     */
    multipleChoiceOptionLabels?: Array<V1DocumentFieldTypeMultipleChoiceValueTypeMetadataMultipleChoiceOptionLabels>;
}
/**
 * 
 * @export
 * @interface V1DocumentFieldTypeMultipleChoiceValueTypeMetadataMultipleChoiceOptionLabels
 */
export interface V1DocumentFieldTypeMultipleChoiceValueTypeMetadataMultipleChoiceOptionLabels {
    /**
     * 
     * @type {string}
     * @memberof V1DocumentFieldTypeMultipleChoiceValueTypeMetadataMultipleChoiceOptionLabels
     */
    label?: string;
}
/**
 * Metadata about the number field. Only present for value type `ValueType_Number`
 * @export
 * @interface V1DocumentFieldTypeNumberValueTypeMetadata
 */
export interface V1DocumentFieldTypeNumberValueTypeMetadata {
    /**
     * The number of decimal places allowed for this number field
     * @type {number}
     * @memberof V1DocumentFieldTypeNumberValueTypeMetadata
     */
    numDecimalPlaces?: number;
}
/**
 * Metadata about the signature field. Only present for value type `ValueType_Signature`
 * @export
 * @interface V1DocumentFieldTypeSignatureValueTypeMetadata
 */
export interface V1DocumentFieldTypeSignatureValueTypeMetadata {
    /**
     * Legal text displayed alongside signature
     * @type {string}
     * @memberof V1DocumentFieldTypeSignatureValueTypeMetadata
     */
    legalText?: string;
}
/**
 * 
 * @export
 * @interface V1DocumentType
 */
export interface V1DocumentType {
    /**
     * The fields associated with this document type.
     * @type {Array<V1DocumentFieldType>}
     * @memberof V1DocumentType
     */
    fieldTypes: Array<V1DocumentFieldType>;
    /**
     * Name of the document type.
     * @type {string}
     * @memberof V1DocumentType
     */
    name?: string;
    /**
     * ID for the organization this document belongs to.
     * @type {number}
     * @memberof V1DocumentType
     */
    orgId: number;
    /**
     * Universally unique identifier for the document type. Can be passed in as the `documentTypeUuid` when creating a document for this document type.
     * @type {string}
     * @memberof V1DocumentType
     */
    uuid: string;
}
/**
 * List of documents.
 * @export
 * @interface V1Documents
 */
export interface V1Documents {
    /**
     * List of documents.
     * @type {Array<V1Document>}
     * @memberof V1Documents
     */
    driverDocuments?: Array<V1Document>;
}
/**
 * Contains the current door status of a sensor.
 * @export
 * @interface V1DoorResponse
 */
export interface V1DoorResponse {
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1DoorResponse
     */
    groupId?: number;
    /**
     * 
     * @type {Array<V1DoorResponseSensors>}
     * @memberof V1DoorResponse
     */
    sensors?: Array<V1DoorResponseSensors>;
}
/**
 * 
 * @export
 * @interface V1DoorResponseSensors
 */
export interface V1DoorResponseSensors {
    /**
     * Flag indicating whether the current door is closed or open.
     * @type {boolean}
     * @memberof V1DoorResponseSensors
     */
    doorClosed?: boolean;
    /**
     * The timestamp of reported door status, specified in RFC 3339 time.
     * @type {string}
     * @memberof V1DoorResponseSensors
     */
    doorStatusTime?: string;
    /**
     * ID of the sensor.
     * @type {number}
     * @memberof V1DoorResponseSensors
     */
    id?: number;
    /**
     * Name of the sensor.
     * @type {string}
     * @memberof V1DoorResponseSensors
     */
    name?: string;
    /**
     * ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1DoorResponseSensors
     */
    trailerId?: number;
    /**
     * ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1DoorResponseSensors
     */
    vehicleId?: number;
}
/**
 * 
 * @export
 * @interface V1DriverDailyLogResponse
 */
export interface V1DriverDailyLogResponse {
    /**
     * 
     * @type {Array<V1DriverDailyLogResponseDays>}
     * @memberof V1DriverDailyLogResponse
     */
    days?: Array<V1DriverDailyLogResponseDays>;
}
/**
 * 
 * @export
 * @interface V1DriverDailyLogResponseDays
 */
export interface V1DriverDailyLogResponseDays {
    /**
     * Hours spent on duty or driving, rounded to two decimal places.
     * @type {number}
     * @memberof V1DriverDailyLogResponseDays
     */
    activeHours?: number;
    /**
     * Milliseconds spent on duty or driving.
     * @type {number}
     * @memberof V1DriverDailyLogResponseDays
     */
    activeMs?: number;
    /**
     * Whether this HOS day chart was certified by the driver.
     * @type {boolean}
     * @memberof V1DriverDailyLogResponseDays
     */
    certified?: boolean;
    /**
     * Unix epoch time (in ms) of time when this chart was certified. If this chart is uncertified, 0.
     * @type {number}
     * @memberof V1DriverDailyLogResponseDays
     */
    certifiedAtMs?: number;
    /**
     * Distance driven in miles, rounded to two decimal places.
     * @type {number}
     * @memberof V1DriverDailyLogResponseDays
     */
    distanceMiles?: number;
    /**
     * End of the HOS day, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof V1DriverDailyLogResponseDays
     */
    endMs?: number;
    /**
     * List of customer shipping document IDs associated with the driver for the day.
     * @type {Array<string>}
     * @memberof V1DriverDailyLogResponseDays
     */
    shippingDocIds?: Array<string>;
    /**
     * Start of the HOS day, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof V1DriverDailyLogResponseDays
     */
    startMs?: number;
    /**
     * List of trailer ID\'s associated with the driver for the day.
     * @type {Array<string>}
     * @memberof V1DriverDailyLogResponseDays
     */
    trailerIds?: Array<string>;
    /**
     * List of vehicle ID\'s associated with the driver for the day.
     * @type {object}
     * @memberof V1DriverDailyLogResponseDays
     */
    vehicleIds?: object;
}
/**
 * Safety score details for a driver
 * @export
 * @interface V1DriverSafetyScoreResponse
 */
export interface V1DriverSafetyScoreResponse {
    /**
     * Crash event count
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    crashCount?: number;
    /**
     * Driver ID
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    driverId?: number;
    /**
     * Harsh acceleration event count
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    harshAccelCount?: number;
    /**
     * Harsh braking event count
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    harshBrakingCount?: number;
    /**
     * 
     * @type {Array<V1SafetyReportHarshEvent>}
     * @memberof V1DriverSafetyScoreResponse
     */
    harshEvents?: Array<V1SafetyReportHarshEvent>;
    /**
     * Harsh turning event count
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    harshTurningCount?: number;
    /**
     * Safety Score
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    safetyScore?: number;
    /**
     * Safety Score Rank
     * @type {string}
     * @memberof V1DriverSafetyScoreResponse
     */
    safetyScoreRank?: string;
    /**
     * Amount of time driven over the speed limit in milliseconds
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    timeOverSpeedLimitMs?: number;
    /**
     * Total distance driven in meters
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    totalDistanceDrivenMeters?: number;
    /**
     * Total harsh event count
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    totalHarshEventCount?: number;
    /**
     * Amount of time driven in milliseconds
     * @type {number}
     * @memberof V1DriverSafetyScoreResponse
     */
    totalTimeDrivenMs?: number;
}
/**
 * 
 * @export
 * @interface V1DvirBase
 */
export interface V1DvirBase {
    /**
     * 
     * @type {V1DvirBaseAuthorSignature}
     * @memberof V1DvirBase
     */
    authorSignature?: V1DvirBaseAuthorSignature;
    /**
     * Signifies if the defects on the vehicle corrected after the DVIR is done.
     * @type {boolean}
     * @memberof V1DvirBase
     */
    defectsCorrected?: boolean;
    /**
     * Signifies if the defects on this vehicle can be ignored.
     * @type {boolean}
     * @memberof V1DvirBase
     */
    defectsNeedNotBeCorrected?: boolean;
    /**
     * The id of this DVIR record.
     * @type {number}
     * @memberof V1DvirBase
     */
    id?: number;
    /**
     * Inspection type of the DVIR.
     * @type {string}
     * @memberof V1DvirBase
     */
    inspectionType?: string;
    /**
     * The mechanics notes on the DVIR.
     * @type {string}
     * @memberof V1DvirBase
     */
    mechanicNotes?: string;
    /**
     * 
     * @type {V1DvirBaseMechanicOrAgentSignature}
     * @memberof V1DvirBase
     */
    mechanicOrAgentSignature?: V1DvirBaseMechanicOrAgentSignature;
    /**
     * 
     * @type {V1DvirBaseNextDriverSignature}
     * @memberof V1DvirBase
     */
    nextDriverSignature?: V1DvirBaseNextDriverSignature;
    /**
     * The odometer reading in miles for the vehicle when the DVIR was done.
     * @type {number}
     * @memberof V1DvirBase
     */
    odometerMiles?: number;
    /**
     * Timestamp when driver began filling out this DVIR, in UNIX milliseconds.
     * @type {number}
     * @memberof V1DvirBase
     */
    startedAtMs?: number;
    /**
     * Timestamp of when this DVIR was signed & completed, in UNIX milliseconds.
     * @type {number}
     * @memberof V1DvirBase
     */
    timeMs?: number;
    /**
     * Defects registered for the trailer which was part of the DVIR.
     * @type {Array<V1DvirDefectBase>}
     * @memberof V1DvirBase
     */
    trailerDefects?: Array<V1DvirDefectBase>;
    /**
     * The id of the trailer which was part of the DVIR.
     * @type {number}
     * @memberof V1DvirBase
     */
    trailerId?: number;
    /**
     * The name of the trailer which was part of the DVIR.
     * @type {string}
     * @memberof V1DvirBase
     */
    trailerName?: string;
    /**
     * 
     * @type {V1DvirBaseVehicle}
     * @memberof V1DvirBase
     */
    vehicle?: V1DvirBaseVehicle;
    /**
     * The condition of vechile on which DVIR was done.
     * @type {string}
     * @memberof V1DvirBase
     */
    vehicleCondition?: string;
    /**
     * Defects registered for the vehicle which was part of the DVIR.
     * @type {Array<V1DvirDefectBase>}
     * @memberof V1DvirBase
     */
    vehicleDefects?: Array<V1DvirDefectBase>;
}
/**
 * The authors signature for the DVIR.
 * @export
 * @interface V1DvirBaseAuthorSignature
 */
export interface V1DvirBaseAuthorSignature {
    /**
     * ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
     * @type {number}
     * @memberof V1DvirBaseAuthorSignature
     */
    driverId?: number;
    /**
     * Email of the  driver|mechanic who signed the DVIR.
     * @type {string}
     * @memberof V1DvirBaseAuthorSignature
     */
    email?: string;
    /**
     * ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
     * @type {number}
     * @memberof V1DvirBaseAuthorSignature
     */
    mechanicUserId?: number;
    /**
     * The name of the driver or mechanic who signed the DVIR.
     * @type {string}
     * @memberof V1DvirBaseAuthorSignature
     */
    name?: string;
    /**
     * The time in millis when the DVIR was signed
     * @type {number}
     * @memberof V1DvirBaseAuthorSignature
     */
    signedAt?: number;
    /**
     * Type corresponds to whether the signature corresponds to driver|mechanic.
     * @type {string}
     * @memberof V1DvirBaseAuthorSignature
     */
    type?: string;
    /**
     * Username of the  driver|mechanic who signed the DVIR.
     * @type {string}
     * @memberof V1DvirBaseAuthorSignature
     */
    username?: string;
}
/**
 * The mechanic\'s or agent\'s signature for the DVIR.
 * @export
 * @interface V1DvirBaseMechanicOrAgentSignature
 */
export interface V1DvirBaseMechanicOrAgentSignature {
    /**
     * ID of the driver who signed the DVIR. Will not be returned if mechanicUserId is returned.
     * @type {number}
     * @memberof V1DvirBaseMechanicOrAgentSignature
     */
    driverId?: number;
    /**
     * Email of the  agent|mechanic who signed the DVIR.
     * @type {string}
     * @memberof V1DvirBaseMechanicOrAgentSignature
     */
    email?: string;
    /**
     * ID of the mechanic who signed the DVIR. Will not be returned if driverId is returned.
     * @type {number}
     * @memberof V1DvirBaseMechanicOrAgentSignature
     */
    mechanicUserId?: number;
    /**
     * The name of the agent or mechanic who signed the DVIR.
     * @type {string}
     * @memberof V1DvirBaseMechanicOrAgentSignature
     */
    name?: string;
    /**
     * The time in millis when the DVIR was signed
     * @type {number}
     * @memberof V1DvirBaseMechanicOrAgentSignature
     */
    signedAt?: number;
    /**
     * Type corresponds to whether the signature corresponds to driver|mechanic.
     * @type {string}
     * @memberof V1DvirBaseMechanicOrAgentSignature
     */
    type?: string;
    /**
     * Username of the  agent|mechanic who signed the DVIR.
     * @type {string}
     * @memberof V1DvirBaseMechanicOrAgentSignature
     */
    username?: string;
}
/**
 * The next driver signature for the DVIR.
 * @export
 * @interface V1DvirBaseNextDriverSignature
 */
export interface V1DvirBaseNextDriverSignature {
    /**
     * ID of the driver who signed the DVIR
     * @type {number}
     * @memberof V1DvirBaseNextDriverSignature
     */
    driverId?: number;
    /**
     * Email of the  driver who signed the next DVIR on this vehicle.
     * @type {string}
     * @memberof V1DvirBaseNextDriverSignature
     */
    email?: string;
    /**
     * The name of the driver who signed the next DVIR on this vehicle.
     * @type {string}
     * @memberof V1DvirBaseNextDriverSignature
     */
    name?: string;
    /**
     * The time in millis when the next driver signed the DVIR on this vehicle.
     * @type {number}
     * @memberof V1DvirBaseNextDriverSignature
     */
    signedAt?: number;
    /**
     * Type corresponds to driver.
     * @type {string}
     * @memberof V1DvirBaseNextDriverSignature
     */
    type?: string;
    /**
     * Username of the  driver who signed the next DVIR on this vehicle.
     * @type {string}
     * @memberof V1DvirBaseNextDriverSignature
     */
    username?: string;
}
/**
 * The vehicle on which DVIR was done.
 * @export
 * @interface V1DvirBaseVehicle
 */
export interface V1DvirBaseVehicle {
    /**
     * The vehicle id on which DVIR was done.
     * @type {number}
     * @memberof V1DvirBaseVehicle
     */
    id?: number;
    /**
     * The vehicle on which DVIR was done.
     * @type {string}
     * @memberof V1DvirBaseVehicle
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface V1DvirDefectBase
 */
export interface V1DvirDefectBase {
    /**
     * The comment describing the type of DVIR defect.
     * @type {string}
     * @memberof V1DvirDefectBase
     */
    comment?: string;
    /**
     * The type of DVIR defect. Possible values: [`AIR_COMPRESSOR`, `AIR_CONDITIONER`, `AIR_LINES`, `BATTERY`, `BELTS_HOSES`, `BRAKE_ACCESSORIES`, `BRAKE_CHECK`, `BRAKE_CONNECTIONS`, `BRAKES`, `CLUTCH`, `COUPLING_DEVICES`, `DEFROSTER_HEATER`, `DOORS`, `DRIVE_LINE`, `EMERGENCY_DOOR_AND_BUZZER`, `ENGINE`, `ENTRANCE_STEPS`, `EXHAUST`, `FIFTH_WHEEL`, `FIRST_AID_KIT`, `FLUID_LEVELS`, `FRAME_ASSEMBLY`, `FRONT_AXLE`, `FUEL_TANKS`, `HORN`, `INTERIOR_AND_FLOOR`, `LANDING_GEAR`, `LIGHTS`, `MIRRORS`, `MUFFLER`, `OIL_PRESSURE`, `OTHER`, `RADIATOR`, `REAR_END`, `REFLECTORS`, `ROOF`, `SAFETY_EQUIPMENT`, `STARTER`, `STEERING`, `STOP_ARM_CONTROL`, `STOP_ARM`, `SUSPENSION`, `TIRE_CHAINS`, `TIRES`, `TRANSMISSION`, `TRIP_RECORDER`, `WHEELS_RIMS`, `WINDOWS`, `WINDSHIELD_WIPERS`, `UNSET`]
     * @type {string}
     * @memberof V1DvirDefectBase
     */
    defectType?: string;
    /**
     * The id of this defect.
     * @type {number}
     * @memberof V1DvirDefectBase
     */
    id?: number;
    /**
     * Signifies if this defect is resolved.
     * @type {boolean}
     * @memberof V1DvirDefectBase
     */
    resolved?: boolean;
    /**
     * Timestamp when this defect was resolved, in UNIX milliseconds.  Will not be returned if the defect is unresolved.
     * @type {number}
     * @memberof V1DvirDefectBase
     */
    resolvedAt?: number;
    /**
     * ID of the driver who resolved this defect. Will not be returned if the defect is unresolved or resolvedByMechanicId is returned.
     * @type {number}
     * @memberof V1DvirDefectBase
     */
    resolvedByDriverId?: number;
    /**
     * ID of the mechanic who resolved this defect. Will not be returned if the defect is unresolved or resolvedByDriverId is returned.
     * @type {number}
     * @memberof V1DvirDefectBase
     */
    resolvedByMechanicId?: number;
}
/**
 * 
 * @export
 * @interface V1DvirListResponse
 */
export interface V1DvirListResponse {
    /**
     * 
     * @type {Array<V1DvirBase>}
     * @memberof V1DvirListResponse
     */
    dvirs?: Array<V1DvirBase>;
}
/**
 * Contains the location and speed of a vehicle at a particular time
 * @export
 * @interface V1FleetVehicleLocation
 */
export interface V1FleetVehicleLocation {
    /**
     * The latitude of the location in degrees.
     * @type {number}
     * @memberof V1FleetVehicleLocation
     */
    latitude?: number;
    /**
     * The best effort (street,city,state) for the latitude and longitude.
     * @type {string}
     * @memberof V1FleetVehicleLocation
     */
    location?: string;
    /**
     * The longitude of the location in degrees.
     * @type {number}
     * @memberof V1FleetVehicleLocation
     */
    longitude?: number;
    /**
     * The speed calculated from GPS that the asset was traveling at in miles per hour.
     * @type {number}
     * @memberof V1FleetVehicleLocation
     */
    speedMilesPerHour?: number;
    /**
     * Time in Unix milliseconds since epoch when the asset was at the location.
     * @type {number}
     * @memberof V1FleetVehicleLocation
     */
    timeMs?: number;
}
/**
 * 
 * @export
 * @interface V1HosAuthenticationLogsResponse
 */
export interface V1HosAuthenticationLogsResponse {
    /**
     * 
     * @type {Array<V1HosAuthenticationLogsResponseAuthenticationLogs>}
     * @memberof V1HosAuthenticationLogsResponse
     */
    authenticationLogs?: Array<V1HosAuthenticationLogsResponseAuthenticationLogs>;
}
/**
 * 
 * @export
 * @interface V1HosAuthenticationLogsResponseAuthenticationLogs
 */
export interface V1HosAuthenticationLogsResponseAuthenticationLogs {
    /**
     * The log type - one of \'signin\' or \'signout\'
     * @type {string}
     * @memberof V1HosAuthenticationLogsResponseAuthenticationLogs
     */
    actionType?: string;
    /**
     * DEPRECATED: THIS FIELD MAY NOT BE POPULATED
     * @type {string}
     * @memberof V1HosAuthenticationLogsResponseAuthenticationLogs
     */
    address?: string;
    /**
     * DEPRECATED: THIS FIELD MAY NOT BE POPULATED
     * @type {string}
     * @memberof V1HosAuthenticationLogsResponseAuthenticationLogs
     */
    addressName?: string;
    /**
     * DEPRECATED: THIS FIELD MAY NOT BE POPULATED
     * @type {string}
     * @memberof V1HosAuthenticationLogsResponseAuthenticationLogs
     */
    city?: string;
    /**
     * The time at which the event was recorded in UNIX milliseconds.
     * @type {number}
     * @memberof V1HosAuthenticationLogsResponseAuthenticationLogs
     */
    happenedAtMs?: number;
    /**
     * DEPRECATED: THIS FIELD MAY NOT BE POPULATED
     * @type {string}
     * @memberof V1HosAuthenticationLogsResponseAuthenticationLogs
     */
    state?: string;
}
/**
 * 
 * @export
 * @interface V1HosLogsResponse
 */
export interface V1HosLogsResponse {
    /**
     * 
     * @type {Array<V1HosLogsResponseLogs>}
     * @memberof V1HosLogsResponse
     */
    logs?: Array<V1HosLogsResponseLogs>;
}
/**
 * 
 * @export
 * @interface V1HosLogsResponseLogs
 */
export interface V1HosLogsResponseLogs {
    /**
     * 
     * @type {Array<number>}
     * @memberof V1HosLogsResponseLogs
     */
    codriverIds?: Array<number>;
    /**
     * ID of the driver.
     * @type {number}
     * @memberof V1HosLogsResponseLogs
     */
    driverId?: number;
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1HosLogsResponseLogs
     */
    groupId?: number;
    /**
     * The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
     * @type {string}
     * @memberof V1HosLogsResponseLogs
     */
    hosStatusType?: string;
    /**
     * City in which the log was recorded.
     * @type {string}
     * @memberof V1HosLogsResponseLogs
     */
    locCity?: string;
    /**
     * Latitude at which the log was recorded.
     * @type {number}
     * @memberof V1HosLogsResponseLogs
     */
    locLat?: number;
    /**
     * Longitude at which the log was recorded.
     * @type {number}
     * @memberof V1HosLogsResponseLogs
     */
    locLng?: number;
    /**
     * Name of location at which the log was recorded.
     * @type {string}
     * @memberof V1HosLogsResponseLogs
     */
    locName?: string;
    /**
     * State in which the log was recorded.
     * @type {string}
     * @memberof V1HosLogsResponseLogs
     */
    locState?: string;
    /**
     * The time at which the log/HOS status started in UNIX milliseconds.
     * @type {number}
     * @memberof V1HosLogsResponseLogs
     */
    logStartMs?: number;
    /**
     * Remark associated with the log entry.
     * @type {string}
     * @memberof V1HosLogsResponseLogs
     */
    remark?: string;
    /**
     * ID of the vehicle.
     * @type {number}
     * @memberof V1HosLogsResponseLogs
     */
    vehicleId?: number;
}
/**
 * Contains the current humidity of a sensor.
 * @export
 * @interface V1HumidityResponse
 */
export interface V1HumidityResponse {
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1HumidityResponse
     */
    groupId?: number;
    /**
     * 
     * @type {Array<V1HumidityResponseSensors>}
     * @memberof V1HumidityResponse
     */
    sensors?: Array<V1HumidityResponseSensors>;
}
/**
 * 
 * @export
 * @interface V1HumidityResponseSensors
 */
export interface V1HumidityResponseSensors {
    /**
     * Currently reported relative humidity in percent, from 0-100.
     * @type {number}
     * @memberof V1HumidityResponseSensors
     */
    humidity?: number;
    /**
     * The timestamp of reported relative humidity, specified in RFC 3339 time.
     * @type {string}
     * @memberof V1HumidityResponseSensors
     */
    humidityTime?: string;
    /**
     * ID of the sensor.
     * @type {number}
     * @memberof V1HumidityResponseSensors
     */
    id?: number;
    /**
     * Name of the sensor.
     * @type {string}
     * @memberof V1HumidityResponseSensors
     */
    name?: string;
    /**
     * ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1HumidityResponseSensors
     */
    trailerId?: number;
    /**
     * ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1HumidityResponseSensors
     */
    vehicleId?: number;
}
/**
 * The state of the dispatch job.
 * @export
 * @enum {string}
 */
export enum V1JobStatus {
    Unassigned = 'JobState_Unassigned',
    Scheduled = 'JobState_Scheduled',
    EnRoute = 'JobState_EnRoute',
    Arrived = 'JobState_Arrived',
    Completed = 'JobState_Completed',
    Skipped = 'JobState_Skipped'
}

/**
 * Contains information about a machine.
 * @export
 * @interface V1Machine
 */
export interface V1Machine {
    /**
     * ID of the machine.
     * @type {number}
     * @memberof V1Machine
     */
    id: number;
    /**
     * Name of the machine.
     * @type {string}
     * @memberof V1Machine
     */
    name?: string;
    /**
     * Notes about the machine
     * @type {string}
     * @memberof V1Machine
     */
    notes?: string;
}
/**
 * Contains the results for a machine history request
 * @export
 * @interface V1MachineHistoryResponse
 */
export interface V1MachineHistoryResponse {
    /**
     * 
     * @type {Array<V1MachineHistoryResponseMachines>}
     * @memberof V1MachineHistoryResponse
     */
    machines?: Array<V1MachineHistoryResponseMachines>;
}
/**
 * 
 * @export
 * @interface V1MachineHistoryResponseMachines
 */
export interface V1MachineHistoryResponseMachines {
    /**
     * Machine ID
     * @type {number}
     * @memberof V1MachineHistoryResponseMachines
     */
    id?: number;
    /**
     * Machine name
     * @type {string}
     * @memberof V1MachineHistoryResponseMachines
     */
    name?: string;
    /**
     * List of vibration datapoints, with timestamp and vibration measurement for x/y/z axis in mm/s
     * @type {Array<V1MachineHistoryResponseVibrations>}
     * @memberof V1MachineHistoryResponseMachines
     */
    vibrations?: Array<V1MachineHistoryResponseVibrations>;
}
/**
 * 
 * @export
 * @interface V1MachineHistoryResponseVibrations
 */
export interface V1MachineHistoryResponseVibrations {
    /**
     * 
     * @type {number}
     * @memberof V1MachineHistoryResponseVibrations
     */
    X?: number;
    /**
     * 
     * @type {number}
     * @memberof V1MachineHistoryResponseVibrations
     */
    Y?: number;
    /**
     * 
     * @type {number}
     * @memberof V1MachineHistoryResponseVibrations
     */
    Z?: number;
    /**
     * 
     * @type {number}
     * @memberof V1MachineHistoryResponseVibrations
     */
    time?: number;
}
/**
 * 
 * @export
 * @interface V1Message
 */
export interface V1Message {
    /**
     * ID of the driver for whom the message is sent to or sent by.
     * @type {number}
     * @memberof V1Message
     */
    driverId: number;
    /**
     * The text sent in the message.
     * @type {string}
     * @memberof V1Message
     */
    text: string;
}
/**
 * 
 * @export
 * @interface V1MessageResponse
 */
export interface V1MessageResponse {
    /**
     * ID of the driver for whom the message is sent to or sent by.
     * @type {number}
     * @memberof V1MessageResponse
     */
    driverId: number;
    /**
     * True if the message was read by the recipient.
     * @type {boolean}
     * @memberof V1MessageResponse
     */
    isRead: boolean;
    /**
     * 
     * @type {V1MessageSender}
     * @memberof V1MessageResponse
     */
    sender: V1MessageSender;
    /**
     * The time in Unix epoch milliseconds that the message is sent to the recipient.
     * @type {number}
     * @memberof V1MessageResponse
     */
    sentAtMs: number;
    /**
     * The text sent in the message.
     * @type {string}
     * @memberof V1MessageResponse
     */
    text: string;
}
/**
 * 
 * @export
 * @interface V1MessageSender
 */
export interface V1MessageSender {
    /**
     * Name of user that is sending the message.
     * @type {string}
     * @memberof V1MessageSender
     */
    name: string;
    /**
     * Type of user that is sending the message. It will be either dispatch or driver.
     * @type {string}
     * @memberof V1MessageSender
     */
    type: string;
}
/**
 * 
 * @export
 * @interface V1Pagination
 */
export interface V1Pagination {
    /**
     * Cursor identifier representing the last element in the response. This value should be used in conjunction with a subsequent request\'s \'startingAfter\' query parameter.
     * @type {string}
     * @memberof V1Pagination
     */
    endCursor: string;
    /**
     * True if there are more pages of results after this response.
     * @type {boolean}
     * @memberof V1Pagination
     */
    hasNextPage: boolean;
    /**
     * True if there are more pages of results before this response.
     * @type {boolean}
     * @memberof V1Pagination
     */
    hasPrevPage: boolean;
    /**
     * Cursor identifier representing the first element in the response. This value should be used in conjunction with a subsequent request\'s \'ending_before\' query parameter.
     * @type {string}
     * @memberof V1Pagination
     */
    startCursor: string;
}
/**
 * List of harsh events
 * @export
 * @interface V1SafetyReportHarshEvent
 */
export interface V1SafetyReportHarshEvent {
    /**
     * Type of the harsh event
     * @type {string}
     * @memberof V1SafetyReportHarshEvent
     */
    harshEventType?: string;
    /**
     * Timestamp that the harsh event occurred in Unix milliseconds since epoch
     * @type {number}
     * @memberof V1SafetyReportHarshEvent
     */
    timestampMs?: number;
    /**
     * Vehicle associated with the harsh event
     * @type {number}
     * @memberof V1SafetyReportHarshEvent
     */
    vehicleId?: number;
}
/**
 * Contains information about a sensor.
 * @export
 * @interface V1Sensor
 */
export interface V1Sensor {
    /**
     * ID of the sensor.
     * @type {number}
     * @memberof V1Sensor
     */
    id: number;
    /**
     * MAC address of the sensor.
     * @type {string}
     * @memberof V1Sensor
     */
    macAddress?: string;
    /**
     * Name of the sensor.
     * @type {string}
     * @memberof V1Sensor
     */
    name?: string;
}
/**
 * Contains the results for a sensor history request. Each result contains a timestamp and datapoint for each requested (sensor, field) pair.
 * @export
 * @interface V1SensorHistoryResponse
 */
export interface V1SensorHistoryResponse {
    /**
     * 
     * @type {Array<V1SensorHistoryResponseResults>}
     * @memberof V1SensorHistoryResponse
     */
    results?: Array<V1SensorHistoryResponseResults>;
}
/**
 * 
 * @export
 * @interface V1SensorHistoryResponseResults
 */
export interface V1SensorHistoryResponseResults {
    /**
     * List of datapoints, one for each requested (sensor, field) pair.
     * @type {Array<number>}
     * @memberof V1SensorHistoryResponseResults
     */
    series?: Array<number>;
    /**
     * Timestamp in UNIX milliseconds.
     * @type {number}
     * @memberof V1SensorHistoryResponseResults
     */
    timeMs?: number;
}
/**
 * V1Sensor ID and field to query.
 * @export
 * @interface V1SensorsHistorySeries
 */
export interface V1SensorsHistorySeries {
    /**
     * Field to query.
     * @type {string}
     * @memberof V1SensorsHistorySeries
     */
    field: V1SensorsHistorySeriesFieldEnum;
    /**
     * V1Sensor ID to query.
     * @type {number}
     * @memberof V1SensorsHistorySeries
     */
    widgetId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum V1SensorsHistorySeriesFieldEnum {
    AmbientTemperature = 'ambientTemperature',
    CargoPercent = 'cargoPercent',
    CurrentLoop1Raw = 'currentLoop1Raw',
    CurrentLoop1Mapped = 'currentLoop1Mapped',
    CurrentLoop2Raw = 'currentLoop2Raw',
    CurrentLoop2Mapped = 'currentLoop2Mapped',
    DoorClosed = 'doorClosed',
    Humidity = 'humidity',
    PmPowerTotal = 'pmPowerTotal',
    PmPhase1Power = 'pmPhase1Power',
    PmPhase2Power = 'pmPhase2Power',
    PmPhase3Power = 'pmPhase3Power',
    PmPhase1PowerFactor = 'pmPhase1PowerFactor',
    PmPhase2PowerFactor = 'pmPhase2PowerFactor',
    PmPhase3PowerFactor = 'pmPhase3PowerFactor',
    ProbeTemperature = 'probeTemperature'
}

/**
 * Contains the current temperatures of a sensor.
 * @export
 * @interface V1TemperatureResponse
 */
export interface V1TemperatureResponse {
    /**
     * Deprecated.
     * @type {number}
     * @memberof V1TemperatureResponse
     */
    groupId?: number;
    /**
     * 
     * @type {Array<V1TemperatureResponseSensors>}
     * @memberof V1TemperatureResponse
     */
    sensors?: Array<V1TemperatureResponseSensors>;
}
/**
 * 
 * @export
 * @interface V1TemperatureResponseSensors
 */
export interface V1TemperatureResponseSensors {
    /**
     * Currently reported ambient temperature in millidegrees celsius.
     * @type {number}
     * @memberof V1TemperatureResponseSensors
     */
    ambientTemperature?: number;
    /**
     * The timestamp of reported ambient temperature, specified in RFC 3339 time.
     * @type {string}
     * @memberof V1TemperatureResponseSensors
     */
    ambientTemperatureTime?: string;
    /**
     * ID of the sensor.
     * @type {number}
     * @memberof V1TemperatureResponseSensors
     */
    id?: number;
    /**
     * Name of the sensor.
     * @type {string}
     * @memberof V1TemperatureResponseSensors
     */
    name?: string;
    /**
     * Currently reported probe temperature in millidegrees celsius. If no probe is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1TemperatureResponseSensors
     */
    probeTemperature?: number;
    /**
     * The timestamp of reported probe temperature, specified in RFC 3339 time.
     * @type {string}
     * @memberof V1TemperatureResponseSensors
     */
    probeTemperatureTime?: string;
    /**
     * ID of the trailer associated with the sensor for the data point. If no trailer is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1TemperatureResponseSensors
     */
    trailerId?: number;
    /**
     * ID of the vehicle associated with the sensor for the data point. If no vehicle is connected, this parameter will not be reported.
     * @type {number}
     * @memberof V1TemperatureResponseSensors
     */
    vehicleId?: number;
}
/**
 * 
 * @export
 * @interface V1TrailerAssignmentResponse
 */
export interface V1TrailerAssignmentResponse {
    /**
     * The ID of the driver associated with this trailer.
     * @type {number}
     * @memberof V1TrailerAssignmentResponse
     */
    driverId?: number;
    /**
     * The time at which the driver ended the assignment. If the assignment is current, this value will be omitted.
     * @type {number}
     * @memberof V1TrailerAssignmentResponse
     */
    endMs?: number;
    /**
     * The time at which the driver started the assignment
     * @type {number}
     * @memberof V1TrailerAssignmentResponse
     */
    startMs?: number;
}
/**
 * 
 * @export
 * @interface V1TrailerAssignmentsResponse
 */
export interface V1TrailerAssignmentsResponse {
    /**
     * ID of the trailer
     * @type {number}
     * @memberof V1TrailerAssignmentsResponse
     */
    id: number;
    /**
     * Assignment trailer name (given when creating trailer via the trailer portal)
     * @type {string}
     * @memberof V1TrailerAssignmentsResponse
     */
    name: string;
    /**
     * 
     * @type {Array<V1TrailerAssignmentResponse>}
     * @memberof V1TrailerAssignmentsResponse
     */
    trailerAssignments?: Array<V1TrailerAssignmentResponse>;
}
/**
 * 
 * @export
 * @interface V1TrailerAssignmentsResponseAllOf
 */
export interface V1TrailerAssignmentsResponseAllOf {
    /**
     * 
     * @type {Array<V1TrailerAssignmentResponse>}
     * @memberof V1TrailerAssignmentsResponseAllOf
     */
    trailerAssignments?: Array<V1TrailerAssignmentResponse>;
}
/**
 * 
 * @export
 * @interface V1TrailerBase
 */
export interface V1TrailerBase {
    /**
     * ID of the trailer
     * @type {number}
     * @memberof V1TrailerBase
     */
    id: number;
    /**
     * Assignment trailer name (given when creating trailer via the trailer portal)
     * @type {string}
     * @memberof V1TrailerBase
     */
    name: string;
}
/**
 * Contains the trips for the vehicle in the requested timeframe. A trip is represented as an object that contains startMs, startLocation, startAddress, startCoordinates, endMs, endLocation, endAddress and endCoordinates. Ongoing trips will be returned with 9223372036854775807 as their endMs.
 * @export
 * @interface V1TripResponse
 */
export interface V1TripResponse {
    /**
     * 
     * @type {Array<V1TripResponseTrips>}
     * @memberof V1TripResponse
     */
    trips?: Array<V1TripResponseTrips>;
}
/**
 * Text representation of nearest identifiable location to the end (latitude, longitude) coordinates.
 * @export
 * @interface V1TripResponseEndAddress
 */
export interface V1TripResponseEndAddress {
    /**
     * The formatted address
     * @type {string}
     * @memberof V1TripResponseEndAddress
     */
    address?: string;
    /**
     * The ID of the address
     * @type {number}
     * @memberof V1TripResponseEndAddress
     */
    id?: number;
    /**
     * The name of the address
     * @type {string}
     * @memberof V1TripResponseEndAddress
     */
    name?: string;
}
/**
 * End (latitude, longitude) in decimal degrees.
 * @export
 * @interface V1TripResponseEndCoordinates
 */
export interface V1TripResponseEndCoordinates {
    /**
     * 
     * @type {number}
     * @memberof V1TripResponseEndCoordinates
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof V1TripResponseEndCoordinates
     */
    longitude?: number;
}
/**
 * Text representation of nearest identifiable location to the start (latitude, longitude) coordinates.
 * @export
 * @interface V1TripResponseStartAddress
 */
export interface V1TripResponseStartAddress {
    /**
     * The formatted address
     * @type {string}
     * @memberof V1TripResponseStartAddress
     */
    address?: string;
    /**
     * The ID of the address
     * @type {number}
     * @memberof V1TripResponseStartAddress
     */
    id?: number;
    /**
     * The name of the address
     * @type {string}
     * @memberof V1TripResponseStartAddress
     */
    name?: string;
}
/**
 * Start (latitude, longitude) in decimal degrees.
 * @export
 * @interface V1TripResponseStartCoordinates
 */
export interface V1TripResponseStartCoordinates {
    /**
     * 
     * @type {number}
     * @memberof V1TripResponseStartCoordinates
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof V1TripResponseStartCoordinates
     */
    longitude?: number;
}
/**
 * 
 * @export
 * @interface V1TripResponseTrips
 */
export interface V1TripResponseTrips {
    /**
     * List of associated asset IDs
     * @type {Array<number>}
     * @memberof V1TripResponseTrips
     */
    assetIds?: Array<number>;
    /**
     * List of codriver IDs
     * @type {Array<number>}
     * @memberof V1TripResponseTrips
     */
    codriverIds?: Array<number>;
    /**
     * Length of the trip in meters. This value is calculated from the GPS data collected by the Samsara Vehicle Gateway.
     * @type {number}
     * @memberof V1TripResponseTrips
     */
    distanceMeters?: number;
    /**
     * ID of the driver.
     * @type {number}
     * @memberof V1TripResponseTrips
     */
    driverId?: number;
    /**
     * 
     * @type {V1TripResponseEndAddress}
     * @memberof V1TripResponseTrips
     */
    endAddress?: V1TripResponseEndAddress;
    /**
     * 
     * @type {V1TripResponseEndCoordinates}
     * @memberof V1TripResponseTrips
     */
    endCoordinates?: V1TripResponseEndCoordinates;
    /**
     * Geocoded street address of start (latitude, longitude) coordinates.
     * @type {string}
     * @memberof V1TripResponseTrips
     */
    endLocation?: string;
    /**
     * End of the trip in UNIX milliseconds. Ongoing trips are indicated by an endMs value of 9223372036854775807.
     * @type {number}
     * @memberof V1TripResponseTrips
     */
    endMs?: number;
    /**
     * Odometer reading (in meters) at the end of the trip. This is read from the vehicle\'s on-board diagnostics. If Samsara cannot read the vehicle\'s odometer values from on-board diagnostics, this value will be 0.
     * @type {number}
     * @memberof V1TripResponseTrips
     */
    endOdometer?: number;
    /**
     * Amount in milliliters of fuel consumed on this trip.
     * @type {number}
     * @memberof V1TripResponseTrips
     */
    fuelConsumedMl?: number;
    /**
     * 
     * @type {V1TripResponseStartAddress}
     * @memberof V1TripResponseTrips
     */
    startAddress?: V1TripResponseStartAddress;
    /**
     * 
     * @type {V1TripResponseStartCoordinates}
     * @memberof V1TripResponseTrips
     */
    startCoordinates?: V1TripResponseStartCoordinates;
    /**
     * Geocoded street address of start (latitude, longitude) coordinates.
     * @type {string}
     * @memberof V1TripResponseTrips
     */
    startLocation?: string;
    /**
     * Beginning of the trip in UNIX milliseconds.
     * @type {number}
     * @memberof V1TripResponseTrips
     */
    startMs?: number;
    /**
     * Odometer reading (in meters) at the beginning of the trip. This is read from the vehicle\'s on-board diagnostics. If Samsara cannot read the vehicle\'s odometer values from on-board diagnostics, this value will be 0.
     * @type {number}
     * @memberof V1TripResponseTrips
     */
    startOdometer?: number;
    /**
     * Length in meters trip spent on toll roads.
     * @type {number}
     * @memberof V1TripResponseTrips
     */
    tollMeters?: number;
}
/**
 * Harsh event details for a vehicle
 * @export
 * @interface V1VehicleHarshEventResponse
 */
export interface V1VehicleHarshEventResponse {
    /**
     * URL for downloading the forward facing video
     * @type {string}
     * @memberof V1VehicleHarshEventResponse
     */
    downloadForwardVideoUrl?: string;
    /**
     * URL for downloading the inward facing video
     * @type {string}
     * @memberof V1VehicleHarshEventResponse
     */
    downloadInwardVideoUrl?: string;
    /**
     * URL for downloading the tracked inward facing video
     * @type {string}
     * @memberof V1VehicleHarshEventResponse
     */
    downloadTrackedInwardVideoUrl?: string;
    /**
     * Type of the harsh event. One of: [Crash, Harsh Acceleration, Harsh Braking, Harsh Turn, ROP Engine, ROP Brake, YC Engine, YC Brake, Harsh Event]
     * @type {string}
     * @memberof V1VehicleHarshEventResponse
     */
    harshEventType: string;
    /**
     * URL of the associated incident report page
     * @type {string}
     * @memberof V1VehicleHarshEventResponse
     */
    incidentReportUrl: string;
    /**
     * Whether the driver was deemed distracted during this harsh event
     * @type {boolean}
     * @memberof V1VehicleHarshEventResponse
     */
    isDistracted?: boolean;
    /**
     * 
     * @type {V1VehicleHarshEventResponseLocation}
     * @memberof V1VehicleHarshEventResponse
     */
    location?: V1VehicleHarshEventResponseLocation;
}
/**
 * 
 * @export
 * @interface V1VehicleHarshEventResponseLocation
 */
export interface V1VehicleHarshEventResponseLocation {
    /**
     * Address of location where the harsh event occurred
     * @type {string}
     * @memberof V1VehicleHarshEventResponseLocation
     */
    address?: string;
    /**
     * Latitude of location where the harsh event occurred
     * @type {number}
     * @memberof V1VehicleHarshEventResponseLocation
     */
    latitude?: number;
    /**
     * Longitude of location where the harsh event occurred
     * @type {number}
     * @memberof V1VehicleHarshEventResponseLocation
     */
    longitude?: number;
}
/**
 * Contains the location, in latitude and longitude, of a vehicle.
 * @export
 * @interface V1VehicleLocation
 */
export interface V1VehicleLocation {
    /**
     * The ID of the driver currently assigned to this vehicle.
     * @type {number}
     * @memberof V1VehicleLocation
     */
    driverId?: number;
    /**
     * Heading in degrees.
     * @type {number}
     * @memberof V1VehicleLocation
     */
    heading?: number;
    /**
     * ID of the vehicle.
     * @type {number}
     * @memberof V1VehicleLocation
     */
    id: number;
    /**
     * Latitude in decimal degrees.
     * @type {number}
     * @memberof V1VehicleLocation
     */
    latitude?: number;
    /**
     * Text representation of nearest identifiable location to (latitude, longitude) coordinates.
     * @type {string}
     * @memberof V1VehicleLocation
     */
    location?: string;
    /**
     * Longitude in decimal degrees.
     * @type {number}
     * @memberof V1VehicleLocation
     */
    longitude?: number;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof V1VehicleLocation
     */
    name?: string;
    /**
     * The number of meters reported by the odometer.
     * @type {number}
     * @memberof V1VehicleLocation
     */
    odometerMeters?: number;
    /**
     * The source of data for odometerMeters. Will be either GPS or OBD
     * @type {string}
     * @memberof V1VehicleLocation
     */
    odometerType?: V1VehicleLocationOdometerTypeEnum;
    /**
     * Whether or not a trip is currently in progress for this vehicle. More information available via /fleet/trips endpoint.
     * @type {boolean}
     * @memberof V1VehicleLocation
     */
    onTrip?: boolean;
    /**
     * A list of currently active route IDs that the vehicle is in.
     * @type {Array<number>}
     * @memberof V1VehicleLocation
     */
    routeIds?: Array<number>;
    /**
     * Speed in miles per hour.
     * @type {number}
     * @memberof V1VehicleLocation
     */
    speed?: number;
    /**
     * The time the reported location was logged, reported as a UNIX timestamp in milliseconds.
     * @type {number}
     * @memberof V1VehicleLocation
     */
    time?: number;
    /**
     * Vehicle Identification Number (VIN) of the vehicle.
     * @type {string}
     * @memberof V1VehicleLocation
     */
    vin?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum V1VehicleLocationOdometerTypeEnum {
    Gps = 'GPS',
    Obd = 'OBD'
}

/**
 * Contains any J1939/Passenger engine light warnings and engine faults.
 * @export
 * @interface V1VehicleMaintenance
 */
export interface V1VehicleMaintenance {
    /**
     * ID of the vehicle.
     * @type {number}
     * @memberof V1VehicleMaintenance
     */
    id: number;
    /**
     * 
     * @type {V1VehicleMaintenanceJ1939}
     * @memberof V1VehicleMaintenance
     */
    j1939?: V1VehicleMaintenanceJ1939;
    /**
     * 
     * @type {V1VehicleMaintenancePassenger}
     * @memberof V1VehicleMaintenance
     */
    passenger?: V1VehicleMaintenancePassenger;
}
/**
 * J1939 based data. Null if no data is available.
 * @export
 * @interface V1VehicleMaintenanceJ1939
 */
export interface V1VehicleMaintenanceJ1939 {
    /**
     * 
     * @type {V1VehicleMaintenanceJ1939CheckEngineLight}
     * @memberof V1VehicleMaintenanceJ1939
     */
    checkEngineLight?: V1VehicleMaintenanceJ1939CheckEngineLight;
    /**
     * J1939 DTCs.
     * @type {Array<V1VehicleMaintenanceJ1939DiagnosticTroubleCodes>}
     * @memberof V1VehicleMaintenanceJ1939
     */
    diagnosticTroubleCodes?: Array<V1VehicleMaintenanceJ1939DiagnosticTroubleCodes>;
}
/**
 * J1939 check engine lights.
 * @export
 * @interface V1VehicleMaintenanceJ1939CheckEngineLight
 */
export interface V1VehicleMaintenanceJ1939CheckEngineLight {
    /**
     * 
     * @type {boolean}
     * @memberof V1VehicleMaintenanceJ1939CheckEngineLight
     */
    emissionsIsOn?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1VehicleMaintenanceJ1939CheckEngineLight
     */
    protectIsOn?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1VehicleMaintenanceJ1939CheckEngineLight
     */
    stopIsOn?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof V1VehicleMaintenanceJ1939CheckEngineLight
     */
    warningIsOn?: boolean;
}
/**
 * 
 * @export
 * @interface V1VehicleMaintenanceJ1939DiagnosticTroubleCodes
 */
export interface V1VehicleMaintenanceJ1939DiagnosticTroubleCodes {
    /**
     * 
     * @type {number}
     * @memberof V1VehicleMaintenanceJ1939DiagnosticTroubleCodes
     */
    fmiId: number;
    /**
     * 
     * @type {string}
     * @memberof V1VehicleMaintenanceJ1939DiagnosticTroubleCodes
     */
    fmiText: string;
    /**
     * 
     * @type {number}
     * @memberof V1VehicleMaintenanceJ1939DiagnosticTroubleCodes
     */
    occurrenceCount: number;
    /**
     * 
     * @type {string}
     * @memberof V1VehicleMaintenanceJ1939DiagnosticTroubleCodes
     */
    spnDescription: string;
    /**
     * 
     * @type {number}
     * @memberof V1VehicleMaintenanceJ1939DiagnosticTroubleCodes
     */
    spnId: number;
    /**
     * 
     * @type {number}
     * @memberof V1VehicleMaintenanceJ1939DiagnosticTroubleCodes
     */
    txId: number;
}
/**
 * Passenger vehicle data. Null if no data is available.
 * @export
 * @interface V1VehicleMaintenancePassenger
 */
export interface V1VehicleMaintenancePassenger {
    /**
     * 
     * @type {V1VehicleMaintenancePassengerCheckEngineLight}
     * @memberof V1VehicleMaintenancePassenger
     */
    checkEngineLight?: V1VehicleMaintenancePassengerCheckEngineLight;
    /**
     * Passenger vehicle DTCs.
     * @type {Array<V1VehicleMaintenancePassengerDiagnosticTroubleCodes>}
     * @memberof V1VehicleMaintenancePassenger
     */
    diagnosticTroubleCodes?: Array<V1VehicleMaintenancePassengerDiagnosticTroubleCodes>;
}
/**
 * Passenger vehicle check engine light.
 * @export
 * @interface V1VehicleMaintenancePassengerCheckEngineLight
 */
export interface V1VehicleMaintenancePassengerCheckEngineLight {
    /**
     * 
     * @type {boolean}
     * @memberof V1VehicleMaintenancePassengerCheckEngineLight
     */
    isOn?: boolean;
}
/**
 * 
 * @export
 * @interface V1VehicleMaintenancePassengerDiagnosticTroubleCodes
 */
export interface V1VehicleMaintenancePassengerDiagnosticTroubleCodes {
    /**
     * 
     * @type {string}
     * @memberof V1VehicleMaintenancePassengerDiagnosticTroubleCodes
     */
    dtcDescription: string;
    /**
     * 
     * @type {number}
     * @memberof V1VehicleMaintenancePassengerDiagnosticTroubleCodes
     */
    dtcId: number;
    /**
     * 
     * @type {string}
     * @memberof V1VehicleMaintenancePassengerDiagnosticTroubleCodes
     */
    dtcShortCode: string;
}
/**
 * Safety score details for a vehicle
 * @export
 * @interface V1VehicleSafetyScoreResponse
 */
export interface V1VehicleSafetyScoreResponse {
    /**
     * Crash event count
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    crashCount?: number;
    /**
     * Harsh acceleration event count
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    harshAccelCount?: number;
    /**
     * Harsh braking event count
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    harshBrakingCount?: number;
    /**
     * 
     * @type {Array<V1SafetyReportHarshEvent>}
     * @memberof V1VehicleSafetyScoreResponse
     */
    harshEvents?: Array<V1SafetyReportHarshEvent>;
    /**
     * Harsh turning event count
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    harshTurningCount?: number;
    /**
     * Safety Score
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    safetyScore?: number;
    /**
     * Safety Score Rank
     * @type {string}
     * @memberof V1VehicleSafetyScoreResponse
     */
    safetyScoreRank?: string;
    /**
     * Amount of time driven over the speed limit in milliseconds
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    timeOverSpeedLimitMs?: number;
    /**
     * Total distance driven in meters
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    totalDistanceDrivenMeters?: number;
    /**
     * Total harsh event count
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    totalHarshEventCount?: number;
    /**
     * Amount of time driven in milliseconds
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    totalTimeDrivenMs?: number;
    /**
     * Vehicle ID
     * @type {number}
     * @memberof V1VehicleSafetyScoreResponse
     */
    vehicleId?: number;
}
/**
 * 
 * @export
 * @interface V1VisionRunByCameraResponse
 */
export interface V1VisionRunByCameraResponse {
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponse
     */
    cameraId?: number;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponse
     */
    endedAtMs?: number;
    /**
     * 
     * @type {Array<V1VisionRunByCameraResponseInspectionResults>}
     * @memberof V1VisionRunByCameraResponse
     */
    inspectionResults?: Array<V1VisionRunByCameraResponseInspectionResults>;
    /**
     * 
     * @type {boolean}
     * @memberof V1VisionRunByCameraResponse
     */
    isOngoing?: boolean;
    /**
     * 
     * @type {V1VisionRunByCameraResponseProgram}
     * @memberof V1VisionRunByCameraResponse
     */
    program?: V1VisionRunByCameraResponseProgram;
    /**
     * 
     * @type {V1VisionRunByCameraResponseRunSummary}
     * @memberof V1VisionRunByCameraResponse
     */
    runSummary?: V1VisionRunByCameraResponseRunSummary;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponse
     */
    startedAtMs?: number;
}
/**
 * 
 * @export
 * @interface V1VisionRunByCameraResponseInspectionResults
 */
export interface V1VisionRunByCameraResponseInspectionResults {
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponseInspectionResults
     */
    captureAtMs?: number;
    /**
     * 
     * @type {string}
     * @memberof V1VisionRunByCameraResponseInspectionResults
     */
    result?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof V1VisionRunByCameraResponseInspectionResults
     */
    stepResults?: Array<object>;
}
/**
 * 
 * @export
 * @interface V1VisionRunByCameraResponseProgram
 */
export interface V1VisionRunByCameraResponseProgram {
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponseProgram
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof V1VisionRunByCameraResponseProgram
     */
    name?: string;
}
/**
 * 
 * @export
 * @interface V1VisionRunByCameraResponseRunSummary
 */
export interface V1VisionRunByCameraResponseRunSummary {
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponseRunSummary
     */
    itemsPerMinute?: number;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponseRunSummary
     */
    noReadCount?: number;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponseRunSummary
     */
    rejectCount?: number;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunByCameraResponseRunSummary
     */
    successCount?: number;
}
/**
 * 
 * @export
 * @interface V1VisionRunsByCameraAndProgramResponse
 */
export interface V1VisionRunsByCameraAndProgramResponse {
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunsByCameraAndProgramResponse
     */
    deviceId?: number;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunsByCameraAndProgramResponse
     */
    endedAtMs?: number;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunsByCameraAndProgramResponse
     */
    programId?: number;
    /**
     * 
     * @type {V1VisionRunByCameraResponseRunSummary}
     * @memberof V1VisionRunsByCameraAndProgramResponse
     */
    reportMetadata?: V1VisionRunByCameraResponseRunSummary;
    /**
     * 
     * @type {Array<V1VisionRunByCameraResponseInspectionResults>}
     * @memberof V1VisionRunsByCameraAndProgramResponse
     */
    results?: Array<V1VisionRunByCameraResponseInspectionResults>;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunsByCameraAndProgramResponse
     */
    startedAtMs?: number;
}
/**
 * 
 * @export
 * @interface V1VisionRunsResponse
 */
export interface V1VisionRunsResponse {
    /**
     * 
     * @type {Array<V1VisionRunsResponseVisionRuns>}
     * @memberof V1VisionRunsResponse
     */
    visionRuns?: Array<V1VisionRunsResponseVisionRuns>;
}
/**
 * The response includes 4 additional fields that are now deprecated
 * @export
 * @interface V1VisionRunsResponseReportMetadata
 */
export interface V1VisionRunsResponseReportMetadata {
    /**
     * Returns average scanned items per minute. Should be used instead of scanRate.
     * @type {number}
     * @memberof V1VisionRunsResponseReportMetadata
     */
    itemsPerMinute?: number;
    /**
     * Returns no read count for the run. Should be used instead of noReadScansCount
     * @type {number}
     * @memberof V1VisionRunsResponseReportMetadata
     */
    noReadCount?: number;
    /**
     * Returns reject count for the run. Should be used instead of failedScansCount
     * @type {number}
     * @memberof V1VisionRunsResponseReportMetadata
     */
    rejectCount?: number;
    /**
     * Returns success count for the run. Should be used instead of successfulScansCount
     * @type {number}
     * @memberof V1VisionRunsResponseReportMetadata
     */
    successCount?: number;
}
/**
 * 
 * @export
 * @interface V1VisionRunsResponseVisionRuns
 */
export interface V1VisionRunsResponseVisionRuns {
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunsResponseVisionRuns
     */
    deviceId?: number;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunsResponseVisionRuns
     */
    endedAtMs?: number;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunsResponseVisionRuns
     */
    programId?: number;
    /**
     * 
     * @type {V1VisionRunsResponseReportMetadata}
     * @memberof V1VisionRunsResponseVisionRuns
     */
    reportMetadata?: V1VisionRunsResponseReportMetadata;
    /**
     * 
     * @type {number}
     * @memberof V1VisionRunsResponseVisionRuns
     */
    startedAtMs?: number;
}
/**
 * The vehicle object.
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * [beta] A minified attribute
     * @type {Array<AttributeTiny>}
     * @memberof Vehicle
     */
    attributes?: Array<AttributeTiny>;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType1?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType10?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType2?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType3?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType4?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType5?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType6?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType7?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType8?: VehicleAuxInputType;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof Vehicle
     */
    auxInputType9?: VehicleAuxInputType;
    /**
     * The serial number of the camera installed in the vehicle
     * @type {string}
     * @memberof Vehicle
     */
    cameraSerial?: string;
    /**
     * The <a href=\"/docs/external-ids\" target=\"_blank\">external IDs</a> for the given object.
     * @type {object}
     * @memberof Vehicle
     */
    externalIds?: object;
    /**
     * 
     * @type {GatewayTiny}
     * @memberof Vehicle
     */
    gateway?: GatewayTiny;
    /**
     * 
     * @type {VehicleHarshAccelerationSettingType}
     * @memberof Vehicle
     */
    harshAccelerationSettingType?: VehicleHarshAccelerationSettingType;
    /**
     * The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
     * @type {string}
     * @memberof Vehicle
     */
    id: string;
    /**
     * The license plate of the Vehicle. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof Vehicle
     */
    licensePlate?: string;
    /**
     * The Vehicle’s manufacturing make. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.
     * @type {string}
     * @memberof Vehicle
     */
    make?: string;
    /**
     * The Vehicle’s manufacturing model. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.
     * @type {string}
     * @memberof Vehicle
     */
    model?: string;
    /**
     * The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof Vehicle
     */
    name?: string;
    /**
     * These are generic notes about the Vehicle. Empty by default. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof Vehicle
     */
    notes?: string;
    /**
     * The serial number of the gateway installed in the vehicle.
     * @type {string}
     * @memberof Vehicle
     */
    serial?: string;
    /**
     * 
     * @type {DriverTinyResponse}
     * @memberof Vehicle
     */
    staticAssignedDriver?: DriverTinyResponse;
    /**
     * The list of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043275091-Creating-and-Using-Tags\" target=\"_blank\">tags</a> associated with the Vehicle. **By default**: empty. Can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {Array<TagTinyResponse>}
     * @memberof Vehicle
     */
    tags?: Array<TagTinyResponse>;
    /**
     * The VIN of the Vehicle. Most of the time, this will be automatically read from the engine computer by the Samsara Vehicle Gateway. It will be empty if it cannot be read. It can be set or updated through the Samsara Dashboard or the API at any time.
     * @type {string}
     * @memberof Vehicle
     */
    vin?: string;
    /**
     * The Vehicle’s manufacturing model. Automatically read from the engine computer if available. Empty if not available. Cannot be manually set.
     * @type {string}
     * @memberof Vehicle
     */
    year?: string;
}
/**
 * 
 * @export
 * @interface VehicleAssignmentObjectResponseBody
 */
export interface VehicleAssignmentObjectResponseBody {
    /**
     * Assignment type of the driver-vehicle assignment, indicating the provenance of the assignment. The only type of assignment supported right now is `driverApp` assignments. This list could change, so it is recommended that clients gracefully handle any types not enumerated in this list.
     * @type {string}
     * @memberof VehicleAssignmentObjectResponseBody
     */
    assignmentType: VehicleAssignmentObjectResponseBodyAssignmentTypeEnum;
    /**
     *  An end time in RFC 3339 format. Omitted if not applicable. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof VehicleAssignmentObjectResponseBody
     */
    endTime?: string;
    /**
     * Boolean indicating whether the driver is a passenger.
     * @type {boolean}
     * @memberof VehicleAssignmentObjectResponseBody
     */
    isPassenger: boolean;
    /**
     *  A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof VehicleAssignmentObjectResponseBody
     */
    startTime: string;
    /**
     * 
     * @type {GoaVehicleTinyResponseResponseBody}
     * @memberof VehicleAssignmentObjectResponseBody
     */
    vehicle: GoaVehicleTinyResponseResponseBody;
}

/**
    * @export
    * @enum {string}
    */
export enum VehicleAssignmentObjectResponseBodyAssignmentTypeEnum {
    DriverApp = 'driverApp'
}

/**
 * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
 * @export
 * @enum {string}
 */
export enum VehicleAuxInputType {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}

/**
 * 
 * @export
 * @interface VehicleCameraMediaObjectResponseBody
 */
export interface VehicleCameraMediaObjectResponseBody {
    /**
     * List of camera objects.
     * @type {Array<CameraObjectResponseBody>}
     * @memberof VehicleCameraMediaObjectResponseBody
     */
    cameras?: Array<CameraObjectResponseBody>;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof VehicleCameraMediaObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the vehicle.
     * @type {string}
     * @memberof VehicleCameraMediaObjectResponseBody
     */
    id?: string;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof VehicleCameraMediaObjectResponseBody
     */
    name?: string;
}
/**
 * The harsh acceleration setting type. This setting influences the acceleration sensitivity from which a <a href=\"https://kb.samsara.com/hc/en-us/articles/360043051792-Safety-Event-Overview\" target=\"_blank\">harsh event</a> is triggered. **By default**, this setting is inferred by the Samsara Vehicle Gateway from the engine computer, but it may be set or updated through the Samsara Dashboard or the API at any time. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.
 * @export
 * @enum {string}
 */
export enum VehicleHarshAccelerationSettingType {
    PassengerCar = 'passengerCar',
    LightTruck = 'lightTruck',
    HeavyDuty = 'heavyDuty',
    Off = 'off',
    Automatic = 'automatic'
}

/**
 * Vehicle location event.
 * @export
 * @interface VehicleLocation
 */
export interface VehicleLocation {
    /**
     * Heading of the vehicle in degrees.
     * @type {number}
     * @memberof VehicleLocation
     */
    heading?: number;
    /**
     * GPS latitude represented in degrees
     * @type {number}
     * @memberof VehicleLocation
     */
    latitude: number;
    /**
     * GPS longitude represented in degrees
     * @type {number}
     * @memberof VehicleLocation
     */
    longitude: number;
    /**
     * 
     * @type {VehicleLocationReverseGeo}
     * @memberof VehicleLocation
     */
    reverseGeo?: VehicleLocationReverseGeo;
    /**
     * GPS speed of the vehicle in miles per hour. See `isEcuSpeed` to determine speed data source.
     * @type {number}
     * @memberof VehicleLocation
     */
    speed?: number;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleLocation
     */
    time: string;
}
/**
 * Address that the location is in.
 * @export
 * @interface VehicleLocationAddress
 */
export interface VehicleLocationAddress {
    /**
     * Id of the address.
     * @type {string}
     * @memberof VehicleLocationAddress
     */
    id?: string;
    /**
     * Name of address.
     * @type {string}
     * @memberof VehicleLocationAddress
     */
    name?: string;
}
/**
 * Reverse geocoded information.
 * @export
 * @interface VehicleLocationReverseGeo
 */
export interface VehicleLocationReverseGeo {
    /**
     * Formatted address of the reverse geocoding data.
     * @type {string}
     * @memberof VehicleLocationReverseGeo
     */
    formattedLocation?: string;
}
/**
 * List of vehicle location events and pagination info.
 * @export
 * @interface VehicleLocationsListResponse
 */
export interface VehicleLocationsListResponse {
    /**
     * A list of vehicles and an array of location events for each vehicle.
     * @type {Array<VehicleLocationsListResponseData>}
     * @memberof VehicleLocationsListResponse
     */
    data: Array<VehicleLocationsListResponseData>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof VehicleLocationsListResponse
     */
    pagination: PaginationResponse;
}
/**
 * A vehicle and its list of location events.
 * @export
 * @interface VehicleLocationsListResponseData
 */
export interface VehicleLocationsListResponseData {
    /**
     * The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
     * @type {string}
     * @memberof VehicleLocationsListResponseData
     */
    id: string;
    /**
     * A list of location events for the given vehicle.
     * @type {Array<VehicleLocation>}
     * @memberof VehicleLocationsListResponseData
     */
    locations: Array<VehicleLocation>;
    /**
     * The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof VehicleLocationsListResponseData
     */
    name: string;
}
/**
 * Most recent vehicle locations and pagination info.
 * @export
 * @interface VehicleLocationsResponse
 */
export interface VehicleLocationsResponse {
    /**
     * List of the most recent locations for the specified vehicles.
     * @type {Array<VehicleLocationsResponseData>}
     * @memberof VehicleLocationsResponse
     */
    data: Array<VehicleLocationsResponseData>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof VehicleLocationsResponse
     */
    pagination: PaginationResponse;
}
/**
 * A vehicle and its most recent location.
 * @export
 * @interface VehicleLocationsResponseData
 */
export interface VehicleLocationsResponseData {
    /**
     * The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
     * @type {string}
     * @memberof VehicleLocationsResponseData
     */
    id: string;
    /**
     * 
     * @type {VehicleLocation}
     * @memberof VehicleLocationsResponseData
     */
    location: VehicleLocation;
    /**
     * The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof VehicleLocationsResponseData
     */
    name: string;
}
/**
 * A single vehicle.
 * @export
 * @interface VehicleResponse
 */
export interface VehicleResponse {
    /**
     * 
     * @type {Vehicle}
     * @memberof VehicleResponse
     */
    data: Vehicle;
}
/**
 * A vehicle object
 * @export
 * @interface VehicleResponseResponseBody
 */
export interface VehicleResponseResponseBody {
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof VehicleResponseResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the vehicle
     * @type {string}
     * @memberof VehicleResponseResponseBody
     */
    id?: string;
    /**
     * The license plate of the vehicle.
     * @type {string}
     * @memberof VehicleResponseResponseBody
     */
    licensePlate?: string;
    /**
     * Name of the vehicle
     * @type {string}
     * @memberof VehicleResponseResponseBody
     */
    name?: string;
    /**
     * The VIN of the vehicle.
     * @type {string}
     * @memberof VehicleResponseResponseBody
     */
    vehicleVin?: string;
}
/**
 * Vehicle ambient air temperature reading.
 * @export
 * @interface VehicleStatsAmbientAirTempMilliC
 */
export interface VehicleStatsAmbientAirTempMilliC {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsAmbientAirTempMilliC
     */
    time: string;
    /**
     * The ambient air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsAmbientAirTempMilliC
     */
    value: number;
}
/**
 * Vehicle ambient air temperature reading.
 * @export
 * @interface VehicleStatsAmbientAirTempMilliCWithDecoration
 */
export interface VehicleStatsAmbientAirTempMilliCWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsAmbientAirTempMilliCWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsAmbientAirTempMilliCWithDecoration
     */
    time: string;
    /**
     * The ambient air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsAmbientAirTempMilliCWithDecoration
     */
    value: number;
}
/**
 * Data for auxiliary digio equipment.
 * @export
 * @interface VehicleStatsAuxInput
 */
export interface VehicleStatsAuxInput {
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof VehicleStatsAuxInput
     */
    name?: VehicleAuxInputType;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsAuxInput
     */
    time?: string;
    /**
     * Boolean indicating the state of the auxiliary equipment.
     * @type {boolean}
     * @memberof VehicleStatsAuxInput
     */
    value?: boolean;
}
/**
 * 
 * @export
 * @interface VehicleStatsAuxInputDecoration
 */
export interface VehicleStatsAuxInputDecoration {
    /**
     * The type of <a href=\"https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\" target=\"_blank\">auxiliary input</a> configured for this Vehicle. Once configured, these inputs will generate dynamic, time-series data that will be available to view in the Samsara Dashboard. **By default**: empty. This can be set or updated through the Samsara Dashboard or the API at any time. Inputs 3-10 are only available on gateways with an attached aux expander.
     * @type {string}
     * @memberof VehicleStatsAuxInputDecoration
     */
    name: VehicleStatsAuxInputDecorationNameEnum;
    /**
     * Boolean indicating the state of the auxiliary equipment.
     * @type {boolean}
     * @memberof VehicleStatsAuxInputDecoration
     */
    value: boolean;
}

/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsAuxInputDecorationNameEnum {
    None = 'none',
    EmergencyLights = 'emergencyLights',
    EmergencyAlarm = 'emergencyAlarm',
    StopPaddle = 'stopPaddle',
    PowerTakeOff = 'powerTakeOff',
    Plow = 'plow',
    Sweeper = 'sweeper',
    Salter = 'salter',
    Reefer = 'reefer',
    Door = 'door',
    Boom = 'boom',
    AuxiliaryEngine = 'auxiliaryEngine',
    Generator = 'generator',
    EightWayLights = 'eightWayLights'
}

/**
 * Data for auxiliary digio equipment.
 * @export
 * @interface VehicleStatsAuxInputWithDecoration
 */
export interface VehicleStatsAuxInputWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsAuxInputWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * 
     * @type {VehicleAuxInputType}
     * @memberof VehicleStatsAuxInputWithDecoration
     */
    name?: VehicleAuxInputType;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsAuxInputWithDecoration
     */
    time?: string;
    /**
     * Boolean indicating the state of the auxiliary equipment.
     * @type {boolean}
     * @memberof VehicleStatsAuxInputWithDecoration
     */
    value?: boolean;
}
/**
 * Vehicle barometric pressure reading.
 * @export
 * @interface VehicleStatsBarometricPressurePa
 */
export interface VehicleStatsBarometricPressurePa {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsBarometricPressurePa
     */
    time: string;
    /**
     * The barometric pressure reading in pascals.
     * @type {number}
     * @memberof VehicleStatsBarometricPressurePa
     */
    value: number;
}
/**
 * Vehicle barometric pressure reading.
 * @export
 * @interface VehicleStatsBarometricPressurePaWithDecoration
 */
export interface VehicleStatsBarometricPressurePaWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsBarometricPressurePaWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsBarometricPressurePaWithDecoration
     */
    time: string;
    /**
     * The barometric pressure reading in pascals.
     * @type {number}
     * @memberof VehicleStatsBarometricPressurePaWithDecoration
     */
    value: number;
}
/**
 * Vehicle battery voltage reading.
 * @export
 * @interface VehicleStatsBatteryVoltage
 */
export interface VehicleStatsBatteryVoltage {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsBatteryVoltage
     */
    time: string;
    /**
     * The battery voltage in millivolts.
     * @type {number}
     * @memberof VehicleStatsBatteryVoltage
     */
    value: number;
}
/**
 * Vehicle battery voltage reading.
 * @export
 * @interface VehicleStatsBatteryVoltageWithDecoration
 */
export interface VehicleStatsBatteryVoltageWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsBatteryVoltageWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsBatteryVoltageWithDecoration
     */
    time: string;
    /**
     * The battery voltage in millivolts.
     * @type {number}
     * @memberof VehicleStatsBatteryVoltageWithDecoration
     */
    value: number;
}
/**
 * Decorated values for the primary vehicle stat datapoints.
 * @export
 * @interface VehicleStatsDecorations
 */
export interface VehicleStatsDecorations {
    /**
     * 
     * @type {VehicleStatsDecorationsAmbientAirTemperatureMilliC}
     * @memberof VehicleStatsDecorations
     */
    ambientAirTemperatureMilliC?: VehicleStatsDecorationsAmbientAirTemperatureMilliC;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput1?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput10?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput2?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput3?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput4?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput5?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput6?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput7?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput8?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsAuxInputDecoration}
     * @memberof VehicleStatsDecorations
     */
    auxInput9?: VehicleStatsAuxInputDecoration;
    /**
     * 
     * @type {VehicleStatsDecorationsBarometricPressurePa}
     * @memberof VehicleStatsDecorations
     */
    barometricPressurePa?: VehicleStatsDecorationsBarometricPressurePa;
    /**
     * 
     * @type {VehicleStatsDecorationsBatteryMilliVolts}
     * @memberof VehicleStatsDecorations
     */
    batteryMilliVolts?: VehicleStatsDecorationsBatteryMilliVolts;
    /**
     * 
     * @type {VehicleStatsDecorationsDefLevelMilliPercent}
     * @memberof VehicleStatsDecorations
     */
    defLevelMilliPercent?: VehicleStatsDecorationsDefLevelMilliPercent;
    /**
     * 
     * @type {VehicleStatsDecorationsEcuSpeedMph}
     * @memberof VehicleStatsDecorations
     */
    ecuSpeedMph?: VehicleStatsDecorationsEcuSpeedMph;
    /**
     * 
     * @type {VehicleStatsDecorationsEngineCoolantTemperatureMilliC}
     * @memberof VehicleStatsDecorations
     */
    engineCoolantTemperatureMilliC?: VehicleStatsDecorationsEngineCoolantTemperatureMilliC;
    /**
     * 
     * @type {VehicleStatsEngineImmobilizer}
     * @memberof VehicleStatsDecorations
     */
    engineImmobilizer?: VehicleStatsEngineImmobilizer;
    /**
     * 
     * @type {VehicleStatsDecorationsEngineLoadPercent}
     * @memberof VehicleStatsDecorations
     */
    engineLoadPercent?: VehicleStatsDecorationsEngineLoadPercent;
    /**
     * 
     * @type {VehicleStatsDecorationsEngineOilPressureKPa}
     * @memberof VehicleStatsDecorations
     */
    engineOilPressureKPa?: VehicleStatsDecorationsEngineOilPressureKPa;
    /**
     * 
     * @type {VehicleStatsDecorationsEngineRpm}
     * @memberof VehicleStatsDecorations
     */
    engineRpm?: VehicleStatsDecorationsEngineRpm;
    /**
     * 
     * @type {VehicleStatsDecorationsEngineStates}
     * @memberof VehicleStatsDecorations
     */
    engineStates?: VehicleStatsDecorationsEngineStates;
    /**
     * 
     * @type {VehicleStatsFaultCodesValue}
     * @memberof VehicleStatsDecorations
     */
    faultCodes?: VehicleStatsFaultCodesValue;
    /**
     * 
     * @type {VehicleStatsDecorationsFuelPercents}
     * @memberof VehicleStatsDecorations
     */
    fuelPercents?: VehicleStatsDecorationsFuelPercents;
    /**
     * 
     * @type {VehicleStatsDecorationsGps}
     * @memberof VehicleStatsDecorations
     */
    gps?: VehicleStatsDecorationsGps;
    /**
     * 
     * @type {VehicleStatsDecorationsGpsDistanceMeters}
     * @memberof VehicleStatsDecorations
     */
    gpsDistanceMeters?: VehicleStatsDecorationsGpsDistanceMeters;
    /**
     * 
     * @type {VehicleStatsDecorationsGpsOdometerMeters}
     * @memberof VehicleStatsDecorations
     */
    gpsOdometerMeters?: VehicleStatsDecorationsGpsOdometerMeters;
    /**
     * 
     * @type {VehicleStatsDecorationsIntakeManifoldTemperatureMilliC}
     * @memberof VehicleStatsDecorations
     */
    intakeManifoldTemperatureMilliC?: VehicleStatsDecorationsIntakeManifoldTemperatureMilliC;
    /**
     * 
     * @type {VehicleStatsDecorationsObdEngineSeconds}
     * @memberof VehicleStatsDecorations
     */
    obdEngineSeconds?: VehicleStatsDecorationsObdEngineSeconds;
    /**
     * 
     * @type {VehicleStatsDecorationsObdOdometerMeters}
     * @memberof VehicleStatsDecorations
     */
    obdOdometerMeters?: VehicleStatsDecorationsObdOdometerMeters;
    /**
     * 
     * @type {VehicleStatsTirePressures}
     * @memberof VehicleStatsDecorations
     */
    tirePressure?: VehicleStatsTirePressures;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsAmbientAirTemperatureMilliC
 */
export interface VehicleStatsDecorationsAmbientAirTemperatureMilliC {
    /**
     * The ambient air temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsDecorationsAmbientAirTemperatureMilliC
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsBarometricPressurePa
 */
export interface VehicleStatsDecorationsBarometricPressurePa {
    /**
     * The barometric pressure reading in pascals.
     * @type {number}
     * @memberof VehicleStatsDecorationsBarometricPressurePa
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsBatteryMilliVolts
 */
export interface VehicleStatsDecorationsBatteryMilliVolts {
    /**
     * The battery voltage in millivolts.
     * @type {number}
     * @memberof VehicleStatsDecorationsBatteryMilliVolts
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsDefLevelMilliPercent
 */
export interface VehicleStatsDecorationsDefLevelMilliPercent {
    /**
     * The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. `99001`, `49999`, etc).
     * @type {number}
     * @memberof VehicleStatsDecorationsDefLevelMilliPercent
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsEcuSpeedMph
 */
export interface VehicleStatsDecorationsEcuSpeedMph {
    /**
     * The speed of the vehicle in miles per hour, as reported by the ECU.
     * @type {number}
     * @memberof VehicleStatsDecorationsEcuSpeedMph
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsEngineCoolantTemperatureMilliC
 */
export interface VehicleStatsDecorationsEngineCoolantTemperatureMilliC {
    /**
     * The engine coolant temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsDecorationsEngineCoolantTemperatureMilliC
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsEngineLoadPercent
 */
export interface VehicleStatsDecorationsEngineLoadPercent {
    /**
     * The engine load in percentage points (e.g. `99`, `50`, etc).
     * @type {number}
     * @memberof VehicleStatsDecorationsEngineLoadPercent
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsEngineOilPressureKPa
 */
export interface VehicleStatsDecorationsEngineOilPressureKPa {
    /**
     * The engine oil pressure reading in kilopascals.
     * @type {number}
     * @memberof VehicleStatsDecorationsEngineOilPressureKPa
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsEngineRpm
 */
export interface VehicleStatsDecorationsEngineRpm {
    /**
     * The revolutions per minute of the engine.
     * @type {number}
     * @memberof VehicleStatsDecorationsEngineRpm
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsEngineStates
 */
export interface VehicleStatsDecorationsEngineStates {
    /**
     * The state of the engine.
     * @type {string}
     * @memberof VehicleStatsDecorationsEngineStates
     */
    value: VehicleStatsDecorationsEngineStatesValueEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsDecorationsEngineStatesValueEnum {
    Off = 'Off',
    On = 'On',
    Idle = 'Idle'
}

/**
 * 
 * @export
 * @interface VehicleStatsDecorationsFuelPercents
 */
export interface VehicleStatsDecorationsFuelPercents {
    /**
     * The engine fuel level in percentage points (e.g. `99`, `50`, etc).
     * @type {number}
     * @memberof VehicleStatsDecorationsFuelPercents
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsGps
 */
export interface VehicleStatsDecorationsGps {
    /**
     * 
     * @type {VehicleLocationAddress}
     * @memberof VehicleStatsDecorationsGps
     */
    address?: VehicleLocationAddress;
    /**
     * Heading of the vehicle in degrees.
     * @type {number}
     * @memberof VehicleStatsDecorationsGps
     */
    headingDegrees?: number;
    /**
     * True if the speed value is reported from the ECU. Speed value is reported from GPS otherwise.
     * @type {boolean}
     * @memberof VehicleStatsDecorationsGps
     */
    isEcuSpeed?: boolean;
    /**
     * GPS latitude represented in degrees
     * @type {number}
     * @memberof VehicleStatsDecorationsGps
     */
    latitude: number;
    /**
     * GPS longitude represented in degrees
     * @type {number}
     * @memberof VehicleStatsDecorationsGps
     */
    longitude: number;
    /**
     * 
     * @type {VehicleLocationReverseGeo}
     * @memberof VehicleStatsDecorationsGps
     */
    reverseGeo?: VehicleLocationReverseGeo;
    /**
     * GPS speed of the vehicle in miles per hour. See `isEcuSpeed` to determine speed data source.
     * @type {number}
     * @memberof VehicleStatsDecorationsGps
     */
    speedMilesPerHour?: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsGpsDistanceMeters
 */
export interface VehicleStatsDecorationsGpsDistanceMeters {
    /**
     * Number of meters the vehicle has traveled since the gateway was installed, based on GPS calculations.
     * @type {number}
     * @memberof VehicleStatsDecorationsGpsDistanceMeters
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsGpsOdometerMeters
 */
export interface VehicleStatsDecorationsGpsOdometerMeters {
    /**
     * Number of meters the vehicle has traveled according to the GPS calculations and the manually-specified odometer reading.
     * @type {number}
     * @memberof VehicleStatsDecorationsGpsOdometerMeters
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsIntakeManifoldTemperatureMilliC
 */
export interface VehicleStatsDecorationsIntakeManifoldTemperatureMilliC {
    /**
     * The intake manifold temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsDecorationsIntakeManifoldTemperatureMilliC
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsObdEngineSeconds
 */
export interface VehicleStatsDecorationsObdEngineSeconds {
    /**
     * Number of seconds the vehicle\'s engine has been on according to the on-board diagnostics.
     * @type {number}
     * @memberof VehicleStatsDecorationsObdEngineSeconds
     */
    value: number;
}
/**
 * 
 * @export
 * @interface VehicleStatsDecorationsObdOdometerMeters
 */
export interface VehicleStatsDecorationsObdOdometerMeters {
    /**
     * Number of meters the vehicle has traveled according to the on-board diagnostics.
     * @type {number}
     * @memberof VehicleStatsDecorationsObdOdometerMeters
     */
    value: number;
}
/**
 * The Diesel Exhaust Fluid (DEF) milli percentage reading.
 * @export
 * @interface VehicleStatsDefLevelMilliPercent
 */
export interface VehicleStatsDefLevelMilliPercent {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsDefLevelMilliPercent
     */
    time: string;
    /**
     * The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. `99001`, `49999`, etc).
     * @type {number}
     * @memberof VehicleStatsDefLevelMilliPercent
     */
    value: number;
}
/**
 * The Diesel Exhaust Fluid (DEF) milli percentage reading.
 * @export
 * @interface VehicleStatsDefLevelMilliPercentWithDecoration
 */
export interface VehicleStatsDefLevelMilliPercentWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsDefLevelMilliPercentWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsDefLevelMilliPercentWithDecoration
     */
    time: string;
    /**
     * The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. `99001`, `49999`, etc).
     * @type {number}
     * @memberof VehicleStatsDefLevelMilliPercentWithDecoration
     */
    value: number;
}
/**
 * The speed of the vehicle in miles per hour, as reported by the ECU.
 * @export
 * @interface VehicleStatsEcuSpeedMph
 */
export interface VehicleStatsEcuSpeedMph {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEcuSpeedMph
     */
    time: string;
    /**
     * The speed of the vehicle in miles per hour.
     * @type {number}
     * @memberof VehicleStatsEcuSpeedMph
     */
    value: number;
}
/**
 * The speed of the vehicle in miles per hour, as reported by the ECU.
 * @export
 * @interface VehicleStatsEcuSpeedMphWithDecoration
 */
export interface VehicleStatsEcuSpeedMphWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsEcuSpeedMphWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEcuSpeedMphWithDecoration
     */
    time: string;
    /**
     * The speed of the vehicle in miles per hour.
     * @type {number}
     * @memberof VehicleStatsEcuSpeedMphWithDecoration
     */
    value: number;
}
/**
 * Vehicle engine coolant temperature reading.
 * @export
 * @interface VehicleStatsEngineCoolantTempMilliC
 */
export interface VehicleStatsEngineCoolantTempMilliC {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineCoolantTempMilliC
     */
    time: string;
    /**
     * The engine coolant temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsEngineCoolantTempMilliC
     */
    value: number;
}
/**
 * Vehicle engine coolant temperature reading.
 * @export
 * @interface VehicleStatsEngineCoolantTempMilliCWithDecoration
 */
export interface VehicleStatsEngineCoolantTempMilliCWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsEngineCoolantTempMilliCWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineCoolantTempMilliCWithDecoration
     */
    time: string;
    /**
     * The engine coolant temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsEngineCoolantTempMilliCWithDecoration
     */
    value: number;
}
/**
 * Data for the engine immobilizer
 * @export
 * @interface VehicleStatsEngineImmobilizer
 */
export interface VehicleStatsEngineImmobilizer {
    /**
     * Whether the engine immobilizer is connected or not
     * @type {boolean}
     * @memberof VehicleStatsEngineImmobilizer
     */
    connected: boolean;
    /**
     * The state of the engine immobilizer (`ignition_disabled`, `ignition_enabled`)
     * @type {string}
     * @memberof VehicleStatsEngineImmobilizer
     */
    state: VehicleStatsEngineImmobilizerStateEnum;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineImmobilizer
     */
    time: string;
}

/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsEngineImmobilizerStateEnum {
    Disabled = 'ignition_disabled',
    Enabled = 'ignition_enabled'
}

/**
 * Data for the engine immobilizer
 * @export
 * @interface VehicleStatsEngineImmobilizerWithDecoration
 */
export interface VehicleStatsEngineImmobilizerWithDecoration {
    /**
     * Whether the engine immobilizer is connected or not
     * @type {boolean}
     * @memberof VehicleStatsEngineImmobilizerWithDecoration
     */
    connected: boolean;
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsEngineImmobilizerWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * The state of the engine immobilizer (`ignition_disabled`, `ignition_enabled`)
     * @type {string}
     * @memberof VehicleStatsEngineImmobilizerWithDecoration
     */
    state: VehicleStatsEngineImmobilizerWithDecorationStateEnum;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineImmobilizerWithDecoration
     */
    time: string;
}

/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsEngineImmobilizerWithDecorationStateEnum {
    Disabled = 'ignition_disabled',
    Enabled = 'ignition_enabled'
}

/**
 * The engine load percentage reading.
 * @export
 * @interface VehicleStatsEngineLoadPercent
 */
export interface VehicleStatsEngineLoadPercent {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineLoadPercent
     */
    time: string;
    /**
     * The engine load in percentage points (e.g. `99`, `50`, etc).
     * @type {number}
     * @memberof VehicleStatsEngineLoadPercent
     */
    value: number;
}
/**
 * The engine load percentage reading.
 * @export
 * @interface VehicleStatsEngineLoadPercentWithDecoration
 */
export interface VehicleStatsEngineLoadPercentWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsEngineLoadPercentWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineLoadPercentWithDecoration
     */
    time: string;
    /**
     * The engine load in percentage points (e.g. `99`, `50`, etc).
     * @type {number}
     * @memberof VehicleStatsEngineLoadPercentWithDecoration
     */
    value: number;
}
/**
 * Vehicle engine oil pressure reading.
 * @export
 * @interface VehicleStatsEngineOilPressureKPa
 */
export interface VehicleStatsEngineOilPressureKPa {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineOilPressureKPa
     */
    time: string;
    /**
     * The engine oil pressure reading in kilopascals.
     * @type {number}
     * @memberof VehicleStatsEngineOilPressureKPa
     */
    value: number;
}
/**
 * Vehicle engine oil pressure reading.
 * @export
 * @interface VehicleStatsEngineOilPressureKPaWithDecoration
 */
export interface VehicleStatsEngineOilPressureKPaWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsEngineOilPressureKPaWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineOilPressureKPaWithDecoration
     */
    time: string;
    /**
     * The engine oil pressure reading in kilopascals.
     * @type {number}
     * @memberof VehicleStatsEngineOilPressureKPaWithDecoration
     */
    value: number;
}
/**
 * Vehicle engine RPM reading.
 * @export
 * @interface VehicleStatsEngineRpm
 */
export interface VehicleStatsEngineRpm {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineRpm
     */
    time: string;
    /**
     * The revolutions per minute of the engine.
     * @type {number}
     * @memberof VehicleStatsEngineRpm
     */
    value: number;
}
/**
 * Vehicle engine RPM reading.
 * @export
 * @interface VehicleStatsEngineRpmWithDecoration
 */
export interface VehicleStatsEngineRpmWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsEngineRpmWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineRpmWithDecoration
     */
    time: string;
    /**
     * The revolutions per minute of the engine.
     * @type {number}
     * @memberof VehicleStatsEngineRpmWithDecoration
     */
    value: number;
}
/**
 * Vehicle engine state event.
 * @export
 * @interface VehicleStatsEngineState
 */
export interface VehicleStatsEngineState {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineState
     */
    time: string;
    /**
     * 
     * @type {VehicleStatsEngineStateSetting}
     * @memberof VehicleStatsEngineState
     */
    value: VehicleStatsEngineStateSetting;
}
/**
 * The state of the engine.
 * @export
 * @enum {string}
 */
export enum VehicleStatsEngineStateSetting {
    Off = 'Off',
    On = 'On',
    Idle = 'Idle'
}

/**
 * Vehicle engine state event.
 * @export
 * @interface VehicleStatsEngineStateWithDecoration
 */
export interface VehicleStatsEngineStateWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsEngineStateWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsEngineStateWithDecoration
     */
    time: string;
    /**
     * 
     * @type {VehicleStatsEngineStateSetting}
     * @memberof VehicleStatsEngineStateWithDecoration
     */
    value: VehicleStatsEngineStateSetting;
}
/**
 * Engine fault codes read from J1939 and OBDII vehicles.
 * @export
 * @interface VehicleStatsFaultCodes
 */
export interface VehicleStatsFaultCodes {
    /**
     * The CAN bus type of the vehicle.
     * @type {string}
     * @memberof VehicleStatsFaultCodes
     */
    canBusType?: string;
    /**
     * 
     * @type {VehicleStatsFaultCodesJ1939}
     * @memberof VehicleStatsFaultCodes
     */
    j1939?: VehicleStatsFaultCodesJ1939;
    /**
     * 
     * @type {VehicleStatsFaultCodesOBDII}
     * @memberof VehicleStatsFaultCodes
     */
    obdii?: VehicleStatsFaultCodesOBDII;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsFaultCodes
     */
    time: string;
}
/**
 * The ignition type of this passenger vehicle. Valid values are \"spark\" and \"compression\"
 * @export
 * @enum {string}
 */
export enum VehicleStatsFaultCodesIgnitionType {
    Spark = 'spark',
    Compression = 'compression'
}

/**
 * Vehicle fault codes for J1939 vehicles.
 * @export
 * @interface VehicleStatsFaultCodesJ1939
 */
export interface VehicleStatsFaultCodesJ1939 {
    /**
     * 
     * @type {VehicleStatsFaultCodesJ1939Lights}
     * @memberof VehicleStatsFaultCodesJ1939
     */
    checkEngineLights?: VehicleStatsFaultCodesJ1939Lights;
    /**
     * Diagnostic trouble codes for J1939 vehicles.
     * @type {Array<VehicleStatsFaultCodesJ1939TroubleCode>}
     * @memberof VehicleStatsFaultCodesJ1939
     */
    diagnosticTroubleCodes?: Array<VehicleStatsFaultCodesJ1939TroubleCode>;
}
/**
 * Status of engine lights on J1939 vehicles.
 * @export
 * @interface VehicleStatsFaultCodesJ1939Lights
 */
export interface VehicleStatsFaultCodesJ1939Lights {
    /**
     * True if the MIL status is nonzero.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesJ1939Lights
     */
    emissionsIsOn: boolean;
    /**
     * True if the engine protect lamp status is nonzero.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesJ1939Lights
     */
    protectIsOn: boolean;
    /**
     * True if the red lamp status is nonzero.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesJ1939Lights
     */
    stopIsOn: boolean;
    /**
     * True if the amber lamp status is nonzero.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesJ1939Lights
     */
    warningIsOn: boolean;
}
/**
 * Diagnostic trouble code for J1939 vehicles.
 * @export
 * @interface VehicleStatsFaultCodesJ1939TroubleCode
 */
export interface VehicleStatsFaultCodesJ1939TroubleCode {
    /**
     * A short description of the FMI identifier, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    fmiDescription?: string;
    /**
     * The FMI identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    fmiId: number;
    /**
     * The MIL status, indicating a check engine light.
     * @type {number}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    milStatus: number;
    /**
     * The number of times this fault has triggered.
     * @type {number}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    occurrenceCount: number;
    /**
     * The source address name corresponding to the txId
     * @type {string}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    sourceAddressName?: string;
    /**
     * A short description of the SPN identifier, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    spnDescription?: string;
    /**
     * The SPN identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    spnId: number;
    /**
     * The TX identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    txId: number;
    /**
     * 
     * @type {VehicleStatsFaultCodesVendorSpecificFields}
     * @memberof VehicleStatsFaultCodesJ1939TroubleCode
     */
    vendorSpecificFields?: VehicleStatsFaultCodesVendorSpecificFields;
}
/**
 * Vehicle fault codes for passenger vehicles.
 * @export
 * @interface VehicleStatsFaultCodesOBDII
 */
export interface VehicleStatsFaultCodesOBDII {
    /**
     * True if the check engine light is illuminated (MIL status field is nonzero for any faults).
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesOBDII
     */
    checkEngineLightIsOn?: boolean;
    /**
     * Diagnostic trouble codes for passenger vehicles.
     * @type {Array<VehicleStatsFaultCodesOBDIITroubleCode>}
     * @memberof VehicleStatsFaultCodesOBDII
     */
    diagnosticTroubleCodes?: Array<VehicleStatsFaultCodesOBDIITroubleCode>;
}
/**
 * Diagnostic trouble code for passenger vehicles.
 * @export
 * @interface VehicleStatsFaultCodesOBDIITroubleCode
 */
export interface VehicleStatsFaultCodesOBDIITroubleCode {
    /**
     * Confirmed DTC codes.
     * @type {Array<VehicleStatsFaultCodesPassengerDtc>}
     * @memberof VehicleStatsFaultCodesOBDIITroubleCode
     */
    confirmedDtcs?: Array<VehicleStatsFaultCodesPassengerDtc>;
    /**
     * 
     * @type {VehicleStatsFaultCodesIgnitionType}
     * @memberof VehicleStatsFaultCodesOBDIITroubleCode
     */
    ignitionType?: VehicleStatsFaultCodesIgnitionType;
    /**
     * The MIL status, indicating a check engine light.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesOBDIITroubleCode
     */
    milStatus?: boolean;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatus}
     * @memberof VehicleStatsFaultCodesOBDIITroubleCode
     */
    monitorStatus?: VehicleStatsFaultCodesPassengerMonitorStatus;
    /**
     * Pending DTC codes.
     * @type {Array<VehicleStatsFaultCodesPassengerDtc>}
     * @memberof VehicleStatsFaultCodesOBDIITroubleCode
     */
    pendingDtcs?: Array<VehicleStatsFaultCodesPassengerDtc>;
    /**
     * Permanent DTC codes.
     * @type {Array<VehicleStatsFaultCodesPassengerDtc>}
     * @memberof VehicleStatsFaultCodesOBDIITroubleCode
     */
    permanentDtcs?: Array<VehicleStatsFaultCodesPassengerDtc>;
    /**
     * The TX identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesOBDIITroubleCode
     */
    txId: number;
}
/**
 * Passenger vehicle DTC information
 * @export
 * @interface VehicleStatsFaultCodesPassengerDtc
 */
export interface VehicleStatsFaultCodesPassengerDtc {
    /**
     * The DTC description, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesPassengerDtc
     */
    dtcDescription?: string;
    /**
     * The DTC identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesPassengerDtc
     */
    dtcId: number;
    /**
     * The DTC short code, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesPassengerDtc
     */
    dtcShortCode?: string;
}
/**
 * Readings from engine sensors
 * @export
 * @interface VehicleStatsFaultCodesPassengerMonitorStatus
 */
export interface VehicleStatsFaultCodesPassengerMonitorStatus {
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    catalyst?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    comprehensive?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    egr?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    evapSystem?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    fuel?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    heatedCatalyst?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    heatedO2Sensor?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    isoSaeReserved?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    misfire?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * Count of the number of sensors reporting N: Not Complete
     * @type {number}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    notReadyCount?: number;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    o2Sensor?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
    /**
     * 
     * @type {VehicleStatsFaultCodesPassengerMonitorStatusValue}
     * @memberof VehicleStatsFaultCodesPassengerMonitorStatus
     */
    secondaryAir?: VehicleStatsFaultCodesPassengerMonitorStatusValue;
}
/**
 * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
 * @export
 * @enum {string}
 */
export enum VehicleStatsFaultCodesPassengerMonitorStatusValue {
    N = 'N',
    R = 'R',
    U = 'U'
}

/**
 * Fault codes for the vehicle
 * @export
 * @interface VehicleStatsFaultCodesValue
 */
export interface VehicleStatsFaultCodesValue {
    /**
     * The CAN bus type of the vehicle.
     * @type {string}
     * @memberof VehicleStatsFaultCodesValue
     */
    canBusType?: string;
    /**
     * 
     * @type {VehicleStatsFaultCodesValueJ1939}
     * @memberof VehicleStatsFaultCodesValue
     */
    j1939?: VehicleStatsFaultCodesValueJ1939;
    /**
     * 
     * @type {VehicleStatsFaultCodesValueObdii}
     * @memberof VehicleStatsFaultCodesValue
     */
    obdii?: VehicleStatsFaultCodesValueObdii;
}
/**
 * Vehicle fault codes for J1939 vehicles.
 * @export
 * @interface VehicleStatsFaultCodesValueJ1939
 */
export interface VehicleStatsFaultCodesValueJ1939 {
    /**
     * 
     * @type {VehicleStatsFaultCodesValueJ1939CheckEngineLights}
     * @memberof VehicleStatsFaultCodesValueJ1939
     */
    checkEngineLights?: VehicleStatsFaultCodesValueJ1939CheckEngineLights;
    /**
     * Diagnostic trouble codes for J1939 vehicles.
     * @type {Array<VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes>}
     * @memberof VehicleStatsFaultCodesValueJ1939
     */
    diagnosticTroubleCodes?: Array<VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes>;
}
/**
 * Status of engine lights on J1939 vehicles.
 * @export
 * @interface VehicleStatsFaultCodesValueJ1939CheckEngineLights
 */
export interface VehicleStatsFaultCodesValueJ1939CheckEngineLights {
    /**
     * True if the MIL status is nonzero.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesValueJ1939CheckEngineLights
     */
    emissionsIsOn: boolean;
    /**
     * True if the engine protect lamp status is nonzero.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesValueJ1939CheckEngineLights
     */
    protectIsOn: boolean;
    /**
     * True if the red lamp status is nonzero.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesValueJ1939CheckEngineLights
     */
    stopIsOn: boolean;
    /**
     * True if the amber lamp status is nonzero.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesValueJ1939CheckEngineLights
     */
    warningIsOn: boolean;
}
/**
 * Diagnostic trouble code for J1939 vehicles.
 * @export
 * @interface VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
 */
export interface VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes {
    /**
     * A short description of the FMI identifier, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    fmiDescription?: string;
    /**
     * The FMI identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    fmiId: number;
    /**
     * The MIL status, indicating a check engine light.
     * @type {number}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    milStatus: number;
    /**
     * The number of times this fault has triggered.
     * @type {number}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    occurrenceCount: number;
    /**
     * The source address name corresponding to the txId
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    sourceAddressName?: string;
    /**
     * A short description of the SPN identifier, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    spnDescription?: string;
    /**
     * The SPN identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    spnId: number;
    /**
     * The TX identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    txId: number;
    /**
     * 
     * @type {VehicleStatsFaultCodesValueJ1939VendorSpecificFields}
     * @memberof VehicleStatsFaultCodesValueJ1939DiagnosticTroubleCodes
     */
    vendorSpecificFields?: VehicleStatsFaultCodesValueJ1939VendorSpecificFields;
}
/**
 * Vendor specific data for J1939 vehicles.
 * @export
 * @interface VehicleStatsFaultCodesValueJ1939VendorSpecificFields
 */
export interface VehicleStatsFaultCodesValueJ1939VendorSpecificFields {
    /**
     * The DTC description, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueJ1939VendorSpecificFields
     */
    dtcDescription?: string;
    /**
     * A link to vendor repair instructions, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueJ1939VendorSpecificFields
     */
    repairInstructionsUrl?: string;
}
/**
 * Vehicle fault codes for passenger vehicles.
 * @export
 * @interface VehicleStatsFaultCodesValueObdii
 */
export interface VehicleStatsFaultCodesValueObdii {
    /**
     * True if the check engine light is illuminated (MIL status field is nonzero for any faults).
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesValueObdii
     */
    checkEngineLightIsOn?: boolean;
    /**
     * Diagnostic trouble codes for passenger vehicles.
     * @type {Array<VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes>}
     * @memberof VehicleStatsFaultCodesValueObdii
     */
    diagnosticTroubleCodes?: Array<VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes>;
}
/**
 * Passenger vehicle DTC information
 * @export
 * @interface VehicleStatsFaultCodesValueObdiiConfirmedDtcs
 */
export interface VehicleStatsFaultCodesValueObdiiConfirmedDtcs {
    /**
     * The DTC description, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiConfirmedDtcs
     */
    dtcDescription?: string;
    /**
     * The DTC identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesValueObdiiConfirmedDtcs
     */
    dtcId: number;
    /**
     * The DTC short code, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiConfirmedDtcs
     */
    dtcShortCode?: string;
}
/**
 * Diagnostic trouble code for passenger vehicles.
 * @export
 * @interface VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes
 */
export interface VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes {
    /**
     * Confirmed DTC codes.
     * @type {Array<VehicleStatsFaultCodesValueObdiiConfirmedDtcs>}
     * @memberof VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes
     */
    confirmedDtcs?: Array<VehicleStatsFaultCodesValueObdiiConfirmedDtcs>;
    /**
     * The ignition type of this passenger vehicle. Valid values are \"spark\" and \"compression\"
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes
     */
    ignitionType?: VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodesIgnitionTypeEnum;
    /**
     * The MIL status, indicating a check engine light.
     * @type {boolean}
     * @memberof VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes
     */
    milStatus?: boolean;
    /**
     * 
     * @type {VehicleStatsFaultCodesValueObdiiMonitorStatus}
     * @memberof VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes
     */
    monitorStatus?: VehicleStatsFaultCodesValueObdiiMonitorStatus;
    /**
     * Pending DTC codes.
     * @type {Array<VehicleStatsFaultCodesValueObdiiConfirmedDtcs>}
     * @memberof VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes
     */
    pendingDtcs?: Array<VehicleStatsFaultCodesValueObdiiConfirmedDtcs>;
    /**
     * Permanent DTC codes.
     * @type {Array<VehicleStatsFaultCodesValueObdiiConfirmedDtcs>}
     * @memberof VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes
     */
    permanentDtcs?: Array<VehicleStatsFaultCodesValueObdiiConfirmedDtcs>;
    /**
     * The TX identifier.
     * @type {number}
     * @memberof VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodes
     */
    txId: number;
}

/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiDiagnosticTroubleCodesIgnitionTypeEnum {
    Spark = 'spark',
    Compression = 'compression'
}

/**
 * Readings from engine sensors
 * @export
 * @interface VehicleStatsFaultCodesValueObdiiMonitorStatus
 */
export interface VehicleStatsFaultCodesValueObdiiMonitorStatus {
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    catalyst?: VehicleStatsFaultCodesValueObdiiMonitorStatusCatalystEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    comprehensive?: VehicleStatsFaultCodesValueObdiiMonitorStatusComprehensiveEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    egr?: VehicleStatsFaultCodesValueObdiiMonitorStatusEgrEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    evapSystem?: VehicleStatsFaultCodesValueObdiiMonitorStatusEvapSystemEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    fuel?: VehicleStatsFaultCodesValueObdiiMonitorStatusFuelEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    heatedCatalyst?: VehicleStatsFaultCodesValueObdiiMonitorStatusHeatedCatalystEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    heatedO2Sensor?: VehicleStatsFaultCodesValueObdiiMonitorStatusHeatedO2SensorEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    isoSaeReserved?: VehicleStatsFaultCodesValueObdiiMonitorStatusIsoSaeReservedEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    misfire?: VehicleStatsFaultCodesValueObdiiMonitorStatusMisfireEnum;
    /**
     * Count of the number of sensors reporting N: Not Complete
     * @type {number}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    notReadyCount?: number;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    o2Sensor?: VehicleStatsFaultCodesValueObdiiMonitorStatusO2SensorEnum;
    /**
     * Enum of monitor status: -U: Unsupported -N: Not Complete -R: Complete 
     * @type {string}
     * @memberof VehicleStatsFaultCodesValueObdiiMonitorStatus
     */
    secondaryAir?: VehicleStatsFaultCodesValueObdiiMonitorStatusSecondaryAirEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusCatalystEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusComprehensiveEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusEgrEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusEvapSystemEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusFuelEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusHeatedCatalystEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusHeatedO2SensorEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusIsoSaeReservedEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusMisfireEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusO2SensorEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}
/**
    * @export
    * @enum {string}
    */
export enum VehicleStatsFaultCodesValueObdiiMonitorStatusSecondaryAirEnum {
    N = 'N',
    R = 'R',
    U = 'U'
}

/**
 * Vendor specific data for J1939 vehicles.
 * @export
 * @interface VehicleStatsFaultCodesVendorSpecificFields
 */
export interface VehicleStatsFaultCodesVendorSpecificFields {
    /**
     * The DTC description, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesVendorSpecificFields
     */
    dtcDescription?: string;
    /**
     * A link to vendor repair instructions, if available.
     * @type {string}
     * @memberof VehicleStatsFaultCodesVendorSpecificFields
     */
    repairInstructionsUrl?: string;
}
/**
 * Engine fault codes read from J1939 and OBDII vehicles.
 * @export
 * @interface VehicleStatsFaultCodesWithDecoration
 */
export interface VehicleStatsFaultCodesWithDecoration {
    /**
     * The CAN bus type of the vehicle.
     * @type {string}
     * @memberof VehicleStatsFaultCodesWithDecoration
     */
    canBusType?: string;
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsFaultCodesWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * 
     * @type {VehicleStatsFaultCodesJ1939}
     * @memberof VehicleStatsFaultCodesWithDecoration
     */
    j1939?: VehicleStatsFaultCodesJ1939;
    /**
     * 
     * @type {VehicleStatsFaultCodesOBDII}
     * @memberof VehicleStatsFaultCodesWithDecoration
     */
    obdii?: VehicleStatsFaultCodesOBDII;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsFaultCodesWithDecoration
     */
    time: string;
}
/**
 * Vehicle fuel percentage reading.
 * @export
 * @interface VehicleStatsFuelPercent
 */
export interface VehicleStatsFuelPercent {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsFuelPercent
     */
    time: string;
    /**
     * The engine fuel level in percentage points (e.g. `99`, `50`, etc).
     * @type {number}
     * @memberof VehicleStatsFuelPercent
     */
    value: number;
}
/**
 * Vehicle fuel percentage reading.
 * @export
 * @interface VehicleStatsFuelPercentWithDecoration
 */
export interface VehicleStatsFuelPercentWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsFuelPercentWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsFuelPercentWithDecoration
     */
    time: string;
    /**
     * The engine fuel level in percentage points (e.g. `99`, `50`, etc).
     * @type {number}
     * @memberof VehicleStatsFuelPercentWithDecoration
     */
    value: number;
}
/**
 * GPS location data for the vehicle.
 * @export
 * @interface VehicleStatsGps
 */
export interface VehicleStatsGps {
    /**
     * 
     * @type {VehicleLocationAddress}
     * @memberof VehicleStatsGps
     */
    address?: VehicleLocationAddress;
    /**
     * Heading of the vehicle in degrees.
     * @type {number}
     * @memberof VehicleStatsGps
     */
    headingDegrees?: number;
    /**
     * True if the speed value is reported from the ECU. Speed value is reported from GPS otherwise.
     * @type {boolean}
     * @memberof VehicleStatsGps
     */
    isEcuSpeed?: boolean;
    /**
     * GPS latitude represented in degrees
     * @type {number}
     * @memberof VehicleStatsGps
     */
    latitude: number;
    /**
     * GPS longitude represented in degrees
     * @type {number}
     * @memberof VehicleStatsGps
     */
    longitude: number;
    /**
     * 
     * @type {VehicleLocationReverseGeo}
     * @memberof VehicleStatsGps
     */
    reverseGeo?: VehicleLocationReverseGeo;
    /**
     * GPS speed of the vehicle in miles per hour. See `isEcuSpeed` to determine speed data source.
     * @type {number}
     * @memberof VehicleStatsGps
     */
    speedMilesPerHour?: number;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsGps
     */
    time: string;
}
/**
 * Vehicle GPS distance event.
 * @export
 * @interface VehicleStatsGpsDistanceMeters
 */
export interface VehicleStatsGpsDistanceMeters {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsGpsDistanceMeters
     */
    time: string;
    /**
     * Number of meters the vehicle has traveled since the gateway was installed, based on GPS calculations.
     * @type {number}
     * @memberof VehicleStatsGpsDistanceMeters
     */
    value: number;
}
/**
 * Vehicle GPS distance event.
 * @export
 * @interface VehicleStatsGpsDistanceMetersWithDecoration
 */
export interface VehicleStatsGpsDistanceMetersWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsGpsDistanceMetersWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsGpsDistanceMetersWithDecoration
     */
    time: string;
    /**
     * Number of meters the vehicle has traveled since the gateway was installed, based on GPS calculations.
     * @type {number}
     * @memberof VehicleStatsGpsDistanceMetersWithDecoration
     */
    value: number;
}
/**
 * Vehicle GPS odometer event.
 * @export
 * @interface VehicleStatsGpsOdometerMeters
 */
export interface VehicleStatsGpsOdometerMeters {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsGpsOdometerMeters
     */
    time: string;
    /**
     * Number of meters the vehicle has traveled according to the GPS calculations and the manually-specified odometer reading.
     * @type {number}
     * @memberof VehicleStatsGpsOdometerMeters
     */
    value: number;
}
/**
 * Vehicle GPS odometer event.
 * @export
 * @interface VehicleStatsGpsOdometerMetersWithDecoration
 */
export interface VehicleStatsGpsOdometerMetersWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsGpsOdometerMetersWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsGpsOdometerMetersWithDecoration
     */
    time: string;
    /**
     * Number of meters the vehicle has traveled according to the GPS calculations and the manually-specified odometer reading.
     * @type {number}
     * @memberof VehicleStatsGpsOdometerMetersWithDecoration
     */
    value: number;
}
/**
 * Vehicle intake manifold temperature reading.
 * @export
 * @interface VehicleStatsIntakeManifoldTempMilliC
 */
export interface VehicleStatsIntakeManifoldTempMilliC {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsIntakeManifoldTempMilliC
     */
    time: string;
    /**
     * The intake manifold temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsIntakeManifoldTempMilliC
     */
    value: number;
}
/**
 * Vehicle intake manifold temperature reading.
 * @export
 * @interface VehicleStatsIntakeManifoldTempMilliCWithDecoration
 */
export interface VehicleStatsIntakeManifoldTempMilliCWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsIntakeManifoldTempMilliCWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsIntakeManifoldTempMilliCWithDecoration
     */
    time: string;
    /**
     * The intake manifold temperature reading in millidegree Celsius.
     * @type {number}
     * @memberof VehicleStatsIntakeManifoldTempMilliCWithDecoration
     */
    value: number;
}
/**
 * GPS location data for the vehicle.
 * @export
 * @interface VehicleStatsListGps
 */
export interface VehicleStatsListGps {
    /**
     * 
     * @type {VehicleLocationAddress}
     * @memberof VehicleStatsListGps
     */
    address?: VehicleLocationAddress;
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsListGps
     */
    decorations?: VehicleStatsDecorations;
    /**
     * Heading of the vehicle in degrees.
     * @type {number}
     * @memberof VehicleStatsListGps
     */
    headingDegrees?: number;
    /**
     * True if the speed value is reported from the ECU. Speed value is reported from GPS otherwise.
     * @type {boolean}
     * @memberof VehicleStatsListGps
     */
    isEcuSpeed?: boolean;
    /**
     * GPS latitude represented in degrees
     * @type {number}
     * @memberof VehicleStatsListGps
     */
    latitude: number;
    /**
     * GPS longitude represented in degrees
     * @type {number}
     * @memberof VehicleStatsListGps
     */
    longitude: number;
    /**
     * 
     * @type {VehicleLocationReverseGeo}
     * @memberof VehicleStatsListGps
     */
    reverseGeo?: VehicleLocationReverseGeo;
    /**
     * GPS speed of the vehicle in miles per hour. See `isEcuSpeed` to determine speed data source.
     * @type {number}
     * @memberof VehicleStatsListGps
     */
    speedMilesPerHour?: number;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsListGps
     */
    time: string;
}
/**
 * List of vehicle stat events and pagination info.
 * @export
 * @interface VehicleStatsListResponse
 */
export interface VehicleStatsListResponse {
    /**
     * A list of vehicles and an array of stat events for each vehicle.
     * @type {Array<VehicleStatsListResponseData>}
     * @memberof VehicleStatsListResponse
     */
    data: Array<VehicleStatsListResponseData>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof VehicleStatsListResponse
     */
    pagination: PaginationResponse;
}
/**
 * A vehicle and its list of stat events.
 * @export
 * @interface VehicleStatsListResponseData
 */
export interface VehicleStatsListResponseData {
    /**
     * A list of ambient air temperature readings in millidegree Celsius for the given vehicle.
     * @type {Array<VehicleStatsAmbientAirTempMilliCWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    ambientAirTemperatureMilliC?: Array<VehicleStatsAmbientAirTempMilliCWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput1?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput10?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput2?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput3?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput4?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput5?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput6?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput7?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput8?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of auxiliary equipment states.
     * @type {Array<VehicleStatsAuxInputWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    auxInput9?: Array<VehicleStatsAuxInputWithDecoration>;
    /**
     * A list of barometric pressure readings in pascals for the given vehicle.
     * @type {Array<VehicleStatsBarometricPressurePaWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    barometricPressurePa?: Array<VehicleStatsBarometricPressurePaWithDecoration>;
    /**
     * A list of battery levels in milliVolts for the given vehicle.
     * @type {Array<VehicleStatsBatteryVoltageWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    batteryMilliVolts?: Array<VehicleStatsBatteryVoltageWithDecoration>;
    /**
     * A list of DEF level milli percentage readings for the given vehicle.
     * @type {Array<VehicleStatsDefLevelMilliPercentWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    defLevelMilliPercent?: Array<VehicleStatsDefLevelMilliPercentWithDecoration>;
    /**
     * A list of the speeds of the vehicle in miles per hour, as reported by the ECU.
     * @type {Array<VehicleStatsEcuSpeedMphWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    ecuSpeedMph?: Array<VehicleStatsEcuSpeedMphWithDecoration>;
    /**
     * A list of engine coolant temperature readings in millidegree Celsius for the given vehicle.
     * @type {Array<VehicleStatsEngineCoolantTempMilliCWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineCoolantTemperatureMilliC?: Array<VehicleStatsEngineCoolantTempMilliCWithDecoration>;
    /**
     * A list of engine immobilizer data for the given vehicle.
     * @type {Array<VehicleStatsEngineImmobilizerWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineImmobilizer?: Array<VehicleStatsEngineImmobilizerWithDecoration>;
    /**
     * A list of engine load percentage readings for the given vehicle.
     * @type {Array<VehicleStatsEngineLoadPercentWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineLoadPercent?: Array<VehicleStatsEngineLoadPercentWithDecoration>;
    /**
     * A list of engine oil pressure readings in kilopascals for the given vehicle.
     * @type {Array<VehicleStatsEngineOilPressureKPaWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineOilPressureKPa?: Array<VehicleStatsEngineOilPressureKPaWithDecoration>;
    /**
     * A list engine RPM values for the given vehicle.
     * @type {Array<VehicleStatsEngineRpmWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineRpm?: Array<VehicleStatsEngineRpmWithDecoration>;
    /**
     * A list of engine state events for the given vehicle.
     * @type {Array<VehicleStatsEngineStateWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    engineStates?: Array<VehicleStatsEngineStateWithDecoration>;
    /**
     * A list of engine fault codes.
     * @type {Array<VehicleStatsFaultCodesWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    faultCodes?: Array<VehicleStatsFaultCodesWithDecoration>;
    /**
     * A list of fuel percentage readings for the given vehicle.
     * @type {Array<VehicleStatsFuelPercentWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    fuelPercents?: Array<VehicleStatsFuelPercentWithDecoration>;
    /**
     * A list of GPS location events for the given vehicles.
     * @type {Array<VehicleStatsListGps>}
     * @memberof VehicleStatsListResponseData
     */
    gps?: Array<VehicleStatsListGps>;
    /**
     * A list of GPS distance events for the given vehicle.
     * @type {Array<VehicleStatsGpsDistanceMetersWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    gpsDistanceMeters?: Array<VehicleStatsGpsDistanceMetersWithDecoration>;
    /**
     * A list of GPS odometer events for the given vehicle.
     * @type {Array<VehicleStatsGpsOdometerMetersWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    gpsOdometerMeters?: Array<VehicleStatsGpsOdometerMetersWithDecoration>;
    /**
     * The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
     * @type {string}
     * @memberof VehicleStatsListResponseData
     */
    id?: string;
    /**
     * A list of intake manifold temperature readings in millidegree Celsius for the given vehicle.
     * @type {Array<VehicleStatsIntakeManifoldTempMilliCWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    intakeManifoldTemperatureMilliC?: Array<VehicleStatsIntakeManifoldTempMilliCWithDecoration>;
    /**
     * The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof VehicleStatsListResponseData
     */
    name?: string;
    /**
     * A list of NFC cards that were scanned for the given vehicles.
     * @type {Array<VehicleStatsNfcCardScanWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    nfcCardScans?: Array<VehicleStatsNfcCardScanWithDecoration>;
    /**
     * A list of OBD engine seconds readings for the given vehicle.
     * @type {Array<VehicleStatsObdEngineSecondsWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    obdEngineSeconds?: Array<VehicleStatsObdEngineSecondsWithDecoration>;
    /**
     * A list of OBD odometer readings for the given vehicle.
     * @type {Array<VehicleStatsObdOdometerMetersWithDecoration>}
     * @memberof VehicleStatsListResponseData
     */
    obdOdometerMeters?: Array<VehicleStatsObdOdometerMetersWithDecoration>;
    /**
     * A list of synthetic engine seconds values.
     * @type {Array<VehicleStatsListSyntheticEngineSeconds>}
     * @memberof VehicleStatsListResponseData
     */
    syntheticEngineSeconds?: Array<VehicleStatsListSyntheticEngineSeconds>;
}
/**
 * A list of synthetic engine seconds for the vehicle.
 * @export
 * @interface VehicleStatsListSyntheticEngineSeconds
 */
export interface VehicleStatsListSyntheticEngineSeconds {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsListSyntheticEngineSeconds
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsListSyntheticEngineSeconds
     */
    time: string;
    /**
     * Stats for the number of seconds the vehicle\'s engine has been on, calculated based on a manually-specified engine seconds reading and the number of seconds the vehicle has been on according to the engine state changes reported to the vehicle gateway since that reading was set. This stat will not be present for any vehicle that does not have the engine seconds reading set. The engine seconds reading can be set from the UI on the vehicle details page.
     * @type {number}
     * @memberof VehicleStatsListSyntheticEngineSeconds
     */
    value: number;
}
/**
 * Data for the nfc card and the time that it was scanned.
 * @export
 * @interface VehicleStatsNfcCardScan
 */
export interface VehicleStatsNfcCardScan {
    /**
     * 
     * @type {VehicleStatsNfcCardScanCard}
     * @memberof VehicleStatsNfcCardScan
     */
    card: VehicleStatsNfcCardScanCard;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsNfcCardScan
     */
    time: string;
}
/**
 * The card that was scanned.
 * @export
 * @interface VehicleStatsNfcCardScanCard
 */
export interface VehicleStatsNfcCardScanCard {
    /**
     * The id code of the card that was scanned.
     * @type {string}
     * @memberof VehicleStatsNfcCardScanCard
     */
    id?: string;
}
/**
 * Data for the nfc card and the time that it was scanned.
 * @export
 * @interface VehicleStatsNfcCardScanWithDecoration
 */
export interface VehicleStatsNfcCardScanWithDecoration {
    /**
     * 
     * @type {VehicleStatsNfcCardScanCard}
     * @memberof VehicleStatsNfcCardScanWithDecoration
     */
    card: VehicleStatsNfcCardScanCard;
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsNfcCardScanWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsNfcCardScanWithDecoration
     */
    time: string;
}
/**
 * Vehicle OBD engine seconds reading.
 * @export
 * @interface VehicleStatsObdEngineSeconds
 */
export interface VehicleStatsObdEngineSeconds {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsObdEngineSeconds
     */
    time: string;
    /**
     * Number of seconds the vehicle\'s engine has been on according to the on-board diagnostics.
     * @type {number}
     * @memberof VehicleStatsObdEngineSeconds
     */
    value: number;
}
/**
 * Vehicle OBD engine seconds reading.
 * @export
 * @interface VehicleStatsObdEngineSecondsWithDecoration
 */
export interface VehicleStatsObdEngineSecondsWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsObdEngineSecondsWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsObdEngineSecondsWithDecoration
     */
    time: string;
    /**
     * Number of seconds the vehicle\'s engine has been on according to the on-board diagnostics.
     * @type {number}
     * @memberof VehicleStatsObdEngineSecondsWithDecoration
     */
    value: number;
}
/**
 * Vehicle OBD odometer reading.
 * @export
 * @interface VehicleStatsObdOdometerMeters
 */
export interface VehicleStatsObdOdometerMeters {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsObdOdometerMeters
     */
    time: string;
    /**
     * Number of meters the vehicle has traveled according to the on-board diagnostics.
     * @type {number}
     * @memberof VehicleStatsObdOdometerMeters
     */
    value: number;
}
/**
 * Vehicle OBD odometer reading.
 * @export
 * @interface VehicleStatsObdOdometerMetersWithDecoration
 */
export interface VehicleStatsObdOdometerMetersWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsObdOdometerMetersWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsObdOdometerMetersWithDecoration
     */
    time: string;
    /**
     * Number of meters the vehicle has traveled according to the on-board diagnostics.
     * @type {number}
     * @memberof VehicleStatsObdOdometerMetersWithDecoration
     */
    value: number;
}
/**
 * Vehicle stats snapshot and pagination info.
 * @export
 * @interface VehicleStatsResponse
 */
export interface VehicleStatsResponse {
    /**
     * List of vehicles and a snapshot of the request stats.
     * @type {Array<VehicleStatsResponseData>}
     * @memberof VehicleStatsResponse
     */
    data: Array<VehicleStatsResponseData>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof VehicleStatsResponse
     */
    pagination: PaginationResponse;
}
/**
 * A vehicle and its most recent stat.
 * @export
 * @interface VehicleStatsResponseData
 */
export interface VehicleStatsResponseData {
    /**
     * 
     * @type {VehicleStatsAmbientAirTempMilliC}
     * @memberof VehicleStatsResponseData
     */
    ambientAirTemperatureMilliC?: VehicleStatsAmbientAirTempMilliC;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput1?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput10?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput2?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput3?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput4?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput5?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput6?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput7?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput8?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsAuxInput}
     * @memberof VehicleStatsResponseData
     */
    auxInput9?: VehicleStatsAuxInput;
    /**
     * 
     * @type {VehicleStatsBarometricPressurePa}
     * @memberof VehicleStatsResponseData
     */
    barometricPressurePa?: VehicleStatsBarometricPressurePa;
    /**
     * 
     * @type {VehicleStatsBatteryVoltage}
     * @memberof VehicleStatsResponseData
     */
    batteryMilliVolts?: VehicleStatsBatteryVoltage;
    /**
     * 
     * @type {VehicleStatsDefLevelMilliPercent}
     * @memberof VehicleStatsResponseData
     */
    defLevelMilliPercent?: VehicleStatsDefLevelMilliPercent;
    /**
     * 
     * @type {VehicleStatsEcuSpeedMph}
     * @memberof VehicleStatsResponseData
     */
    ecuSpeedMph?: VehicleStatsEcuSpeedMph;
    /**
     * 
     * @type {VehicleStatsEngineCoolantTempMilliC}
     * @memberof VehicleStatsResponseData
     */
    engineCoolantTemperatureMilliC?: VehicleStatsEngineCoolantTempMilliC;
    /**
     * 
     * @type {VehicleStatsEngineImmobilizer}
     * @memberof VehicleStatsResponseData
     */
    engineImmobilizer?: VehicleStatsEngineImmobilizer;
    /**
     * 
     * @type {VehicleStatsEngineLoadPercent}
     * @memberof VehicleStatsResponseData
     */
    engineLoadPercent?: VehicleStatsEngineLoadPercent;
    /**
     * 
     * @type {VehicleStatsEngineOilPressureKPa}
     * @memberof VehicleStatsResponseData
     */
    engineOilPressureKPa?: VehicleStatsEngineOilPressureKPa;
    /**
     * 
     * @type {VehicleStatsEngineRpm}
     * @memberof VehicleStatsResponseData
     */
    engineRpm?: VehicleStatsEngineRpm;
    /**
     * 
     * @type {VehicleStatsEngineState}
     * @memberof VehicleStatsResponseData
     */
    engineState?: VehicleStatsEngineState;
    /**
     * 
     * @type {VehicleStatsFaultCodes}
     * @memberof VehicleStatsResponseData
     */
    faultCodes?: VehicleStatsFaultCodes;
    /**
     * 
     * @type {VehicleStatsFuelPercent}
     * @memberof VehicleStatsResponseData
     */
    fuelPercent?: VehicleStatsFuelPercent;
    /**
     * 
     * @type {VehicleStatsGps}
     * @memberof VehicleStatsResponseData
     */
    gps?: VehicleStatsGps;
    /**
     * 
     * @type {VehicleStatsGpsDistanceMeters}
     * @memberof VehicleStatsResponseData
     */
    gpsDistanceMeters?: VehicleStatsGpsDistanceMeters;
    /**
     * 
     * @type {VehicleStatsGpsOdometerMeters}
     * @memberof VehicleStatsResponseData
     */
    gpsOdometerMeters?: VehicleStatsGpsOdometerMeters;
    /**
     * The unique Samsara ID of the Vehicle. This is automatically generated when the Vehicle object is created. It cannot be changed.
     * @type {string}
     * @memberof VehicleStatsResponseData
     */
    id: string;
    /**
     * 
     * @type {VehicleStatsIntakeManifoldTempMilliC}
     * @memberof VehicleStatsResponseData
     */
    intakeManifoldTemperatureMilliC?: VehicleStatsIntakeManifoldTempMilliC;
    /**
     * The human-readable name of the Vehicle. This is set by a fleet administrator and will appear in both Samsara’s cloud dashboard as well as the Samsara Driver mobile app. **By default**, this name is the serial number of the Samsara Vehicle Gateway. It can be set or updated through the Samsara Dashboard or through the API at any time.
     * @type {string}
     * @memberof VehicleStatsResponseData
     */
    name: string;
    /**
     * 
     * @type {VehicleStatsNfcCardScan}
     * @memberof VehicleStatsResponseData
     */
    nfcCardScan?: VehicleStatsNfcCardScan;
    /**
     * 
     * @type {VehicleStatsObdEngineSeconds}
     * @memberof VehicleStatsResponseData
     */
    obdEngineSeconds?: VehicleStatsObdEngineSeconds;
    /**
     * 
     * @type {VehicleStatsObdOdometerMeters}
     * @memberof VehicleStatsResponseData
     */
    obdOdometerMeters?: VehicleStatsObdOdometerMeters;
    /**
     * 
     * @type {VehicleStatsSyntheticEngineSeconds}
     * @memberof VehicleStatsResponseData
     */
    syntheticEngineSeconds?: VehicleStatsSyntheticEngineSeconds;
}
/**
 * Data for the synthetic engine seconds for the vehicle
 * @export
 * @interface VehicleStatsSyntheticEngineSeconds
 */
export interface VehicleStatsSyntheticEngineSeconds {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsSyntheticEngineSeconds
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsSyntheticEngineSeconds
     */
    time: string;
    /**
     * Stats for the number of seconds the vehicle\'s engine has been on, calculated based on a manually-specified engine seconds reading and the number of seconds the vehicle has been on according to the engine state changes reported to the vehicle gateway since that reading was set. This stat will not be present for any vehicle that does not have the engine seconds reading set. The engine seconds reading can be set from the UI on the vehicle details page.
     * @type {number}
     * @memberof VehicleStatsSyntheticEngineSeconds
     */
    value: number;
}
/**
 * Vehicle tire pressure readings.
 * @export
 * @interface VehicleStatsTirePressure
 */
export interface VehicleStatsTirePressure {
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsTirePressure
     */
    time?: string;
    /**
     * 
     * @type {VehicleStatsTirePressures}
     * @memberof VehicleStatsTirePressure
     */
    value?: VehicleStatsTirePressures;
}
/**
 * Vehicle tire pressure readings.
 * @export
 * @interface VehicleStatsTirePressureWithDecoration
 */
export interface VehicleStatsTirePressureWithDecoration {
    /**
     * 
     * @type {VehicleStatsDecorations}
     * @memberof VehicleStatsTirePressureWithDecoration
     */
    decorations?: VehicleStatsDecorations;
    /**
     * UTC timestamp in RFC 3339 format. Example: `2020-01-27T07:06:25Z`.
     * @type {string}
     * @memberof VehicleStatsTirePressureWithDecoration
     */
    time?: string;
    /**
     * 
     * @type {VehicleStatsTirePressures}
     * @memberof VehicleStatsTirePressureWithDecoration
     */
    value?: VehicleStatsTirePressures;
}
/**
 * Tire pressure readings for each of four tires in kilopascals.
 * @export
 * @interface VehicleStatsTirePressures
 */
export interface VehicleStatsTirePressures {
    /**
     * The tire pressure of the rear left tire as seen when standing behind the vehicle in kilopascals.
     * @type {number}
     * @memberof VehicleStatsTirePressures
     */
    backLeftTirePressureKPa?: number;
    /**
     * The tire pressure of the rear right tire as seen when standing behind the vehicle in kilopascals.
     * @type {number}
     * @memberof VehicleStatsTirePressures
     */
    backRightTirePressureKPa?: number;
    /**
     * The tire pressure of the front left tire as seen when standing behind the vehicle in kilopascals.
     * @type {number}
     * @memberof VehicleStatsTirePressures
     */
    frontLeftTirePressureKPa?: number;
    /**
     * The tire pressure of the front right tire as seen when standing behind the vehicle in kilopascals.
     * @type {number}
     * @memberof VehicleStatsTirePressures
     */
    frontRightTirePressureKPa?: number;
}
/**
 * 
 * @export
 * @interface VehicleSummary
 */
export interface VehicleSummary {
    /**
     * Distance driven in meters.
     * @type {number}
     * @memberof VehicleSummary
     */
    distanceDrivenMeters?: number;
    /**
     * Time driven in milliseconds.
     * @type {number}
     * @memberof VehicleSummary
     */
    driveTimeDurationMs?: number;
    /**
     * Fuel consumption in milliliters.
     * @type {number}
     * @memberof VehicleSummary
     */
    fuelConsumedMl?: number;
    /**
     * Time spent idling in milliseconds.
     * @type {number}
     * @memberof VehicleSummary
     */
    idleTimeDurationMs?: number;
    /**
     * Time spent with power take off enabled while idling in milliseconds.
     * @type {number}
     * @memberof VehicleSummary
     */
    powerTakeOffDurationMs?: number;
    /**
     * 
     * @type {VehicleTinyResponse}
     * @memberof VehicleSummary
     */
    vehicle?: VehicleTinyResponse;
}
/**
 * A minified vehicle object.
 * @export
 * @interface VehicleTinyResponse
 */
export interface VehicleTinyResponse {
    /**
     * ID of the vehicle.
     * @type {string}
     * @memberof VehicleTinyResponse
     */
    id?: string;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof VehicleTinyResponse
     */
    name?: string;
}
/**
 * Bad Gateway
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsBadGatewayErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsBadGatewayErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsBadGatewayErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsBadGatewayErrorResponseBody
     */
    requestId: string;
}
/**
 * Bad Request parameters
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsBadRequestErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsBadRequestErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsBadRequestErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsBadRequestErrorResponseBody
     */
    requestId: string;
}
/**
 * Gateway timeout
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsGatewayTimeoutErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsGatewayTimeoutErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsGatewayTimeoutErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsGatewayTimeoutErrorResponseBody
     */
    requestId: string;
}
/**
 * An internal server error occurred
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsInternalServerErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsInternalServerErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsInternalServerErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsInternalServerErrorResponseBody
     */
    requestId: string;
}
/**
 * Method not allowed
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsMethodNotAllowedErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsMethodNotAllowedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsMethodNotAllowedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsMethodNotAllowedErrorResponseBody
     */
    requestId: string;
}
/**
 * Resource not found
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsNotFoundErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsNotFoundErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsNotFoundErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsNotFoundErrorResponseBody
     */
    requestId: string;
}
/**
 * Requested endpoint is not yet implemented
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsNotImplementedErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsNotImplementedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsNotImplementedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsNotImplementedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsResponseBody {
    /**
     * List of vehicles and their driver assignments.
     * @type {Array<VehiclesDriverAssignmentsObjectResponseBody>}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsResponseBody
     */
    data: Array<VehiclesDriverAssignmentsObjectResponseBody>;
    /**
     * 
     * @type {GoaPaginationResponseResponseBody}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsResponseBody
     */
    pagination: GoaPaginationResponseResponseBody;
}
/**
 * Service unavailable
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsServiceUnavailableErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsServiceUnavailableErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsServiceUnavailableErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsServiceUnavailableErrorResponseBody
     */
    requestId: string;
}
/**
 * Too many requests
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsTooManyRequestsErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsTooManyRequestsErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsTooManyRequestsErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsTooManyRequestsErrorResponseBody
     */
    requestId: string;
}
/**
 * Unauthorized
 * @export
 * @interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsUnauthorizedErrorResponseBody
 */
export interface VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsUnauthorizedErrorResponseBody {
    /**
     * Message of error
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsUnauthorizedErrorResponseBody
     */
    message: string;
    /**
     * The request ID; used when reaching out to support for issues with requests.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsUnauthorizedErrorResponseBody
     */
    requestId: string;
}
/**
 * 
 * @export
 * @interface VehiclesDriverAssignmentsObjectResponseBody
 */
export interface VehiclesDriverAssignmentsObjectResponseBody {
    /**
     * List of driver assignment objects.
     * @type {Array<DriverAssignmentObjectResponseBody>}
     * @memberof VehiclesDriverAssignmentsObjectResponseBody
     */
    driverAssignments: Array<DriverAssignmentObjectResponseBody>;
    /**
     * A map of external ids
     * @type {{ [key: string]: string; }}
     * @memberof VehiclesDriverAssignmentsObjectResponseBody
     */
    externalIds?: { [key: string]: string; };
    /**
     * ID of the vehicle.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsObjectResponseBody
     */
    id: string;
    /**
     * Name of the vehicle.
     * @type {string}
     * @memberof VehiclesDriverAssignmentsObjectResponseBody
     */
    name?: string;
}

/**
 * AddressesApi - axios parameter creator
 * @export
 */
export const AddressesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new address in the organization.
         * @summary Create an address
         * @param {CreateAddressRequest} address The address to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddress: async (address: CreateAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('createAddress', 'address', address)
            const localVarPath = `/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(address, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a specific address.
         * @summary Delete an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAddress', 'id', id)
            const localVarPath = `/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a specific address.
         * @summary Retrieve an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAddress', 'id', id)
            const localVarPath = `/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all addresses in an organization.
         * @summary List all addresses
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [createdAfterTime] A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAddresses: async (limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, createdAfterTime?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/addresses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (createdAfterTime !== undefined) {
                localVarQueryParameter['createdAfterTime'] = createdAfterTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific address.
         * @summary Update an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {UpdateAddressRequest} address The address fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress: async (id: string, address: UpdateAddressRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAddress', 'id', id)
            // verify required parameter 'address' is not null or undefined
            assertParamExists('updateAddress', 'address', address)
            const localVarPath = `/addresses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(address, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddressesApi - functional programming interface
 * @export
 */
export const AddressesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddressesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new address in the organization.
         * @summary Create an address
         * @param {CreateAddressRequest} address The address to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAddress(address: CreateAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAddress(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a specific address.
         * @summary Delete an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAddress(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAddress(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a specific address.
         * @summary Retrieve an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddress(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddress(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all addresses in an organization.
         * @summary List all addresses
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [createdAfterTime] A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAddresses(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, createdAfterTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAddressesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAddresses(limit, after, parentTagIds, tagIds, createdAfterTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific address.
         * @summary Update an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {UpdateAddressRequest} address The address fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAddress(id: string, address: UpdateAddressRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAddress(id, address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddressesApi - factory interface
 * @export
 */
export const AddressesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddressesApiFp(configuration)
    return {
        /**
         * Creates a new address in the organization.
         * @summary Create an address
         * @param {CreateAddressRequest} address The address to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAddress(address: CreateAddressRequest, options?: any): AxiosPromise<AddressResponse> {
            return localVarFp.createAddress(address, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a specific address.
         * @summary Delete an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAddress(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteAddress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a specific address.
         * @summary Retrieve an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddress(id: string, options?: any): AxiosPromise<AddressResponse> {
            return localVarFp.getAddress(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all addresses in an organization.
         * @summary List all addresses
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [createdAfterTime] A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAddresses(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, createdAfterTime?: string, options?: any): AxiosPromise<ListAddressesResponse> {
            return localVarFp.listAddresses(limit, after, parentTagIds, tagIds, createdAfterTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific address.
         * @summary Update an address
         * @param {string} id ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
         * @param {UpdateAddressRequest} address The address fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAddress(id: string, address: UpdateAddressRequest, options?: any): AxiosPromise<AddressResponse> {
            return localVarFp.updateAddress(id, address, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAddress operation in AddressesApi.
 * @export
 * @interface AddressesApiCreateAddressRequest
 */
export interface AddressesApiCreateAddressRequest {
    /**
     * The address to create.
     * @type {CreateAddressRequest}
     * @memberof AddressesApiCreateAddress
     */
    readonly address: CreateAddressRequest
}

/**
 * Request parameters for deleteAddress operation in AddressesApi.
 * @export
 * @interface AddressesApiDeleteAddressRequest
 */
export interface AddressesApiDeleteAddressRequest {
    /**
     * ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
     * @type {string}
     * @memberof AddressesApiDeleteAddress
     */
    readonly id: string
}

/**
 * Request parameters for getAddress operation in AddressesApi.
 * @export
 * @interface AddressesApiGetAddressRequest
 */
export interface AddressesApiGetAddressRequest {
    /**
     * ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
     * @type {string}
     * @memberof AddressesApiGetAddress
     */
    readonly id: string
}

/**
 * Request parameters for listAddresses operation in AddressesApi.
 * @export
 * @interface AddressesApiListAddressesRequest
 */
export interface AddressesApiListAddressesRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof AddressesApiListAddresses
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof AddressesApiListAddresses
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof AddressesApiListAddresses
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof AddressesApiListAddresses
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof AddressesApiListAddresses
     */
    readonly createdAfterTime?: string
}

/**
 * Request parameters for updateAddress operation in AddressesApi.
 * @export
 * @interface AddressesApiUpdateAddressRequest
 */
export interface AddressesApiUpdateAddressRequest {
    /**
     * ID of the Address. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;
     * @type {string}
     * @memberof AddressesApiUpdateAddress
     */
    readonly id: string

    /**
     * The address fields to update.
     * @type {UpdateAddressRequest}
     * @memberof AddressesApiUpdateAddress
     */
    readonly address: UpdateAddressRequest
}

/**
 * AddressesApi - object-oriented interface
 * @export
 * @class AddressesApi
 * @extends {BaseAPI}
 */
export class AddressesApi extends BaseAPI {
    /**
     * Creates a new address in the organization.
     * @summary Create an address
     * @param {AddressesApiCreateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public createAddress(requestParameters: AddressesApiCreateAddressRequest, options?: any) {
        return AddressesApiFp(this.configuration).createAddress(requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a specific address.
     * @summary Delete an address
     * @param {AddressesApiDeleteAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public deleteAddress(requestParameters: AddressesApiDeleteAddressRequest, options?: any) {
        return AddressesApiFp(this.configuration).deleteAddress(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a specific address.
     * @summary Retrieve an address
     * @param {AddressesApiGetAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public getAddress(requestParameters: AddressesApiGetAddressRequest, options?: any) {
        return AddressesApiFp(this.configuration).getAddress(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all addresses in an organization.
     * @summary List all addresses
     * @param {AddressesApiListAddressesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public listAddresses(requestParameters: AddressesApiListAddressesRequest = {}, options?: any) {
        return AddressesApiFp(this.configuration).listAddresses(requestParameters.limit, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.createdAfterTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific address.
     * @summary Update an address
     * @param {AddressesApiUpdateAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    public updateAddress(requestParameters: AddressesApiUpdateAddressRequest, options?: any) {
        return AddressesApiFp(this.configuration).updateAddress(requestParameters.id, requestParameters.address, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AssetsApi - axios parameter creator
 * @export
 */
export const AssetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch current locations of all assets.
         * @summary List current location for all assets
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAllAssetCurrentLocations: async (startingAfter?: string, endingBefore?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/fleet/assets/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startingAfter !== undefined) {
                localVarQueryParameter['startingAfter'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['endingBefore'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the assets.
         * @summary List all assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAllAssets: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/fleet/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  List historical locations for a given asset.
         * @summary List historical locations for a given asset
         * @param {number} assetId ID of the asset. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAssetLocation: async (assetId: number, startMs: number, endMs: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('v1getAssetLocation', 'assetId', assetId)
            // verify required parameter 'startMs' is not null or undefined
            assertParamExists('v1getAssetLocation', 'startMs', startMs)
            // verify required parameter 'endMs' is not null or undefined
            assertParamExists('v1getAssetLocation', 'endMs', endMs)
            const localVarPath = `/v1/fleet/assets/{asset_id}/locations`
                .replace(`{${"asset_id"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the reefer-specific stats of an asset.
         * @summary List stats for a given reefer
         * @param {number} assetId ID of the asset. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAssetReefer: async (assetId: number, startMs: number, endMs: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'assetId' is not null or undefined
            assertParamExists('v1getAssetReefer', 'assetId', assetId)
            // verify required parameter 'startMs' is not null or undefined
            assertParamExists('v1getAssetReefer', 'startMs', startMs)
            // verify required parameter 'endMs' is not null or undefined
            assertParamExists('v1getAssetReefer', 'endMs', endMs)
            const localVarPath = `/v1/fleet/assets/{asset_id}/reefer`
                .replace(`{${"asset_id"}}`, encodeURIComponent(String(assetId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetches all reefers and reefer-specific stats.
         * @summary List stats for all reefers
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAssetsReefers: async (startMs: number, endMs: number, startingAfter?: string, endingBefore?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startMs' is not null or undefined
            assertParamExists('v1getAssetsReefers', 'startMs', startMs)
            // verify required parameter 'endMs' is not null or undefined
            assertParamExists('v1getAssetsReefers', 'endMs', endMs)
            const localVarPath = `/v1/fleet/assets/reefers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['startingAfter'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['endingBefore'] = endingBefore;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AssetsApi - functional programming interface
 * @export
 */
export const AssetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AssetsApiAxiosParamCreator(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch current locations of all assets.
         * @summary List current location for all assets
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getAllAssetCurrentLocations(startingAfter?: string, endingBefore?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getAllAssetCurrentLocations(startingAfter, endingBefore, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the assets.
         * @summary List all assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getAllAssets(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getAllAssets(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  List historical locations for a given asset.
         * @summary List historical locations for a given asset
         * @param {number} assetId ID of the asset. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getAssetLocation(assetId: number, startMs: number, endMs: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getAssetLocation(assetId, startMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the reefer-specific stats of an asset.
         * @summary List stats for a given reefer
         * @param {number} assetId ID of the asset. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getAssetReefer(assetId: number, startMs: number, endMs: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1AssetReeferResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getAssetReefer(assetId, startMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetches all reefers and reefer-specific stats.
         * @summary List stats for all reefers
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getAssetsReefers(startMs: number, endMs: number, startingAfter?: string, endingBefore?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getAssetsReefers(startMs, endMs, startingAfter, endingBefore, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AssetsApi - factory interface
 * @export
 */
export const AssetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AssetsApiFp(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch current locations of all assets.
         * @summary List current location for all assets
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAllAssetCurrentLocations(startingAfter?: string, endingBefore?: string, limit?: number, options?: any): AxiosPromise<InlineResponse2002> {
            return localVarFp.v1getAllAssetCurrentLocations(startingAfter, endingBefore, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the assets.
         * @summary List all assets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAllAssets(options?: any): AxiosPromise<InlineResponse2001> {
            return localVarFp.v1getAllAssets(options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  List historical locations for a given asset.
         * @summary List historical locations for a given asset
         * @param {number} assetId ID of the asset. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAssetLocation(assetId: number, startMs: number, endMs: number, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.v1getAssetLocation(assetId, startMs, endMs, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the reefer-specific stats of an asset.
         * @summary List stats for a given reefer
         * @param {number} assetId ID of the asset. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAssetReefer(assetId: number, startMs: number, endMs: number, options?: any): AxiosPromise<V1AssetReeferResponse> {
            return localVarFp.v1getAssetReefer(assetId, startMs, endMs, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetches all reefers and reefer-specific stats.
         * @summary List stats for all reefers
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAssetsReefers(startMs: number, endMs: number, startingAfter?: string, endingBefore?: string, limit?: number, options?: any): AxiosPromise<InlineResponse2003> {
            return localVarFp.v1getAssetsReefers(startMs, endMs, startingAfter, endingBefore, limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1getAllAssetCurrentLocations operation in AssetsApi.
 * @export
 * @interface AssetsApiV1getAllAssetCurrentLocationsRequest
 */
export interface AssetsApiV1getAllAssetCurrentLocationsRequest {
    /**
     * Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
     * @type {string}
     * @memberof AssetsApiV1getAllAssetCurrentLocations
     */
    readonly startingAfter?: string

    /**
     * Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
     * @type {string}
     * @memberof AssetsApiV1getAllAssetCurrentLocations
     */
    readonly endingBefore?: string

    /**
     * Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
     * @type {number}
     * @memberof AssetsApiV1getAllAssetCurrentLocations
     */
    readonly limit?: number
}

/**
 * Request parameters for v1getAssetLocation operation in AssetsApi.
 * @export
 * @interface AssetsApiV1getAssetLocationRequest
 */
export interface AssetsApiV1getAssetLocationRequest {
    /**
     * ID of the asset. Must contain only digits 0-9.
     * @type {number}
     * @memberof AssetsApiV1getAssetLocation
     */
    readonly assetId: number

    /**
     * Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @type {number}
     * @memberof AssetsApiV1getAssetLocation
     */
    readonly startMs: number

    /**
     * Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @type {number}
     * @memberof AssetsApiV1getAssetLocation
     */
    readonly endMs: number
}

/**
 * Request parameters for v1getAssetReefer operation in AssetsApi.
 * @export
 * @interface AssetsApiV1getAssetReeferRequest
 */
export interface AssetsApiV1getAssetReeferRequest {
    /**
     * ID of the asset. Must contain only digits 0-9.
     * @type {number}
     * @memberof AssetsApiV1getAssetReefer
     */
    readonly assetId: number

    /**
     * Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @type {number}
     * @memberof AssetsApiV1getAssetReefer
     */
    readonly startMs: number

    /**
     * Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @type {number}
     * @memberof AssetsApiV1getAssetReefer
     */
    readonly endMs: number
}

/**
 * Request parameters for v1getAssetsReefers operation in AssetsApi.
 * @export
 * @interface AssetsApiV1getAssetsReefersRequest
 */
export interface AssetsApiV1getAssetsReefersRequest {
    /**
     * Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs.
     * @type {number}
     * @memberof AssetsApiV1getAssetsReefers
     */
    readonly startMs: number

    /**
     * Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs.
     * @type {number}
     * @memberof AssetsApiV1getAssetsReefers
     */
    readonly endMs: number

    /**
     * Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
     * @type {string}
     * @memberof AssetsApiV1getAssetsReefers
     */
    readonly startingAfter?: string

    /**
     * Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
     * @type {string}
     * @memberof AssetsApiV1getAssetsReefers
     */
    readonly endingBefore?: string

    /**
     * Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
     * @type {number}
     * @memberof AssetsApiV1getAssetsReefers
     */
    readonly limit?: number
}

/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export class AssetsApi extends BaseAPI {
    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch current locations of all assets.
     * @summary List current location for all assets
     * @param {AssetsApiV1getAllAssetCurrentLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public v1getAllAssetCurrentLocations(requestParameters: AssetsApiV1getAllAssetCurrentLocationsRequest = {}, options?: any) {
        return AssetsApiFp(this.configuration).v1getAllAssetCurrentLocations(requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the assets.
     * @summary List all assets
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public v1getAllAssets(options?: any) {
        return AssetsApiFp(this.configuration).v1getAllAssets(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  List historical locations for a given asset.
     * @summary List historical locations for a given asset
     * @param {AssetsApiV1getAssetLocationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public v1getAssetLocation(requestParameters: AssetsApiV1getAssetLocationRequest, options?: any) {
        return AssetsApiFp(this.configuration).v1getAssetLocation(requestParameters.assetId, requestParameters.startMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the reefer-specific stats of an asset.
     * @summary List stats for a given reefer
     * @param {AssetsApiV1getAssetReeferRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public v1getAssetReefer(requestParameters: AssetsApiV1getAssetReeferRequest, options?: any) {
        return AssetsApiFp(this.configuration).v1getAssetReefer(requestParameters.assetId, requestParameters.startMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetches all reefers and reefer-specific stats.
     * @summary List stats for all reefers
     * @param {AssetsApiV1getAssetsReefersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    public v1getAssetsReefers(requestParameters: AssetsApiV1getAssetsReefersRequest, options?: any) {
        return AssetsApiFp(this.configuration).v1getAssetsReefers(requestParameters.startMs, requestParameters.endMs, requestParameters.startingAfter, requestParameters.endingBefore, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * BetaAPIsApi - axios parameter creator
 * @export
 */
export const BetaAPIsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new attribute in the organization.
         * @summary [beta] Create an attribute
         * @param {CreateAttributeRequest} attribute The attribute to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttribute: async (attribute: CreateAttributeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'attribute' is not null or undefined
            assertParamExists('createAttribute', 'attribute', attribute)
            const localVarPath = `/beta/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attribute, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a new trailer asset.
         * @summary [beta] Creates a new trailer asset
         * @param {TrailersCreateTrailerRequestBody} createTrailerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrailer: async (createTrailerRequestBody: TrailersCreateTrailerRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTrailerRequestBody' is not null or undefined
            assertParamExists('createTrailer', 'createTrailerRequestBody', createTrailerRequestBody)
            const localVarPath = `/beta/fleet/trailers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTrailerRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an attribute by id, including all of its applications.
         * @summary [beta] Deleting an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute: async (id: string, entityType: 'driver' | 'asset', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteAttribute', 'id', id)
            // verify required parameter 'entityType' is not null or undefined
            assertParamExists('deleteAttribute', 'entityType', entityType)
            const localVarPath = `/beta/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entityType !== undefined) {
                localVarQueryParameter['entityType'] = entityType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a single document.
         * @summary [beta] Delete document
         * @param {string} id ID of the document to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocument: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteDocument', 'id', id)
            const localVarPath = `/beta/fleet/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deactivate a gateway
         * @summary [beta] Deactivate a gateway
         * @param {string} id Gateway serial number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGateway: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteGateway', 'id', id)
            const localVarPath = `/beta/gateways/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a trailer with the given ID.
         * @summary [beta] Delete a trailer
         * @param {string} id Unique identifier for the trailer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrailer: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTrailer', 'id', id)
            const localVarPath = `/beta/fleet/trailers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch an attribute by id, including all of its applications.
         * @summary [beta] Retrieve an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttribute: async (id: string, entityType: 'driver' | 'asset', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getAttribute', 'id', id)
            // verify required parameter 'entityType' is not null or undefined
            assertParamExists('getAttribute', 'entityType', entityType)
            const localVarPath = `/beta/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entityType !== undefined) {
                localVarQueryParameter['entityType'] = entityType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch all attributes in an organization associated with either drivers or assets.
         * @summary [beta] List all attributes by entity type
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesByEntityType: async (entityType: 'driver' | 'asset', limit?: number, after?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'entityType' is not null or undefined
            assertParamExists('getAttributesByEntityType', 'entityType', entityType)
            const localVarPath = `/beta/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (entityType !== undefined) {
                localVarQueryParameter['entityType'] = entityType;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get organization\'s compliance settings, including carrier name, office address, and DOT number
         * @summary [beta] Get compliance settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplianceSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/beta/fleet/settings/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single document.
         * @summary [beta] Fetch document
         * @param {string} id ID of the document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDocument', 'id', id)
            const localVarPath = `/beta/fleet/documents/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of the organization document types.
         * @summary [beta] Fetch document types
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentTypes: async (after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/beta/fleet/document-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all documents for the given time range.
         * @summary [beta] Fetch all documents
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [documentTypeId] ID of the document template type.
         * @param {string} [queryBy] Query by document creation time (&#x60;created&#x60;) or updated time (&#x60;updated&#x60;). Defaults to &#x60;created&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments: async (startTime: string, endTime: string, after?: string, documentTypeId?: string, queryBy?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDocuments', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDocuments', 'endTime', endTime)
            const localVarPath = `/beta/fleet/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (documentTypeId !== undefined) {
                localVarQueryParameter['documentTypeId'] = documentTypeId;
            }

            if (queryBy !== undefined) {
                localVarQueryParameter['queryBy'] = queryBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get driver app settings.
         * @summary [beta] Get driver app settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriverAppSettings: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/beta/fleet/settings/driver-app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all drivers\' efficiencies.
         * @summary [beta] List driver efficiency
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Cannot be used with tag filtering or driver status. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverTagIds] Filters summary to drivers based on this comma-separated list of tag IDs. Data from all the drivers\&#39; respective vehicles will be included in the summary, regardless of which tag the vehicle is associated with. Should not be provided in addition to &#x60;driverIds&#x60;. Example: driverTagIds&#x3D;1234,5678
         * @param {Array<string>} [driverParentTagIds] Filters like &#x60;driverTagIds&#x60; but includes descendants of all the given parent tags. Should not be provided in addition to &#x60;driverIds&#x60;. Example: &#x60;driverParentTagIds&#x3D;1234,5678&#x60;
         * @param {string} [startTime] A start time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if &#x60;startTime&#x60; is 2020-03-17T12:06:19Z then the results will include data starting from 2020-03-17T12:00:00Z. The provided start time cannot be in the future. Start time can be at most 31 days before the end time. If the start time is within the last hour, the results will be empty. Default: 24 hours prior to endTime.
         * @param {string} [endTime] An end time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if &#x60;endTime&#x60; is 2020-03-17T12:06:19Z then the results will include data up until 2020-03-17T12:00:00Z. The provided end time cannot be in the future. End time can be at most 31 days after the start time.   Default: The current time truncated to the hour mark.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriverEfficiency: async (driverActivationStatus?: 'active' | 'deactivated', driverIds?: Array<string>, after?: string, driverTagIds?: Array<string>, driverParentTagIds?: Array<string>, startTime?: string, endTime?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/beta/fleet/drivers/efficiency`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (driverActivationStatus !== undefined) {
                localVarQueryParameter['driverActivationStatus'] = driverActivationStatus;
            }

            if (driverIds) {
                localVarQueryParameter['driverIds'] = driverIds.join(COLLECTION_FORMATS.csv);
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (driverTagIds) {
                localVarQueryParameter['driverTagIds'] = driverTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (driverParentTagIds) {
                localVarQueryParameter['driverParentTagIds'] = driverParentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = (startTime as any instanceof Date) ?
                    (startTime as any).toISOString() :
                    startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = (endTime as any instanceof Date) ?
                    (endTime as any).toISOString() :
                    endTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all gateways
         * @summary [beta] List all gateways
         * @param {Array<string>} [models] Filter by a comma separated list of gateway models.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGateways: async (models?: Array<string>, after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/beta/gateways`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (models) {
                localVarQueryParameter['models'] = models.join(COLLECTION_FORMATS.csv);
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a trailer with given ID.
         * @summary [beta] Retrieve a trailer
         * @param {string} id ID of the trailer. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: \&quot;key:value\&quot;. For example, \&quot;maintenanceId:250020\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailer: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTrailer', 'id', id)
            const localVarPath = `/beta/fleet/trailers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Follow a feed of trailer stats.  The first call to this endpoint will provide the most recent stats for each trailer and an `endCursor`.  Providing the `endCursor` value to the `after` query parameter will fetch all updates since the previous API call.  If `hasNextPage` is false, no new data is immediately available. Please wait a minimum of 5 seconds before making a subsequent request.
         * @summary [beta] Get trailer stats feed
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [decorations] Decorations add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the trailer\&#39;s location whenever the odometer updates, you may set &#x60;types&#x3D;gpsOdometerMeters&amp;decorations&#x3D;gps&#x60;.  You may list **up to 2** types using comma-separated format. If multiple stats are listed in the types parameter, the decorations will be added to each type. For example: &#x60;types&#x3D;reeferStateZone1,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&amp;decorations&#x3D;gps&#x60; will list GPS decorations for each reeferStateZone1 reading, each reeferAmbientAirTemperatureMilliC reding, and gpsOdometerMeters reading.  Note that decorations may significantly increase the response payload size.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerStatsFeed: async (types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, decorations?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getTrailerStatsFeed', 'types', types)
            const localVarPath = `/beta/fleet/trailers/stats/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (trailerIds !== undefined) {
                localVarQueryParameter['trailerIds'] = trailerIds;
            }

            if (decorations !== undefined) {
                localVarQueryParameter['decorations'] = decorations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns trailer stats during the given time range for all trailers. This can be optionally filtered by tags or specific trailer IDs.
         * @summary [beta] Get trailer stats history
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [decorations] Decorations add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the trailer\&#39;s location whenever the odometer updates, you may set &#x60;types&#x3D;gpsOdometerMeters&amp;decorations&#x3D;gps&#x60;.  You may list **up to 2** types using comma-separated format. If multiple stats are listed in the types parameter, the decorations will be added to each type. For example: &#x60;types&#x3D;reeferStateZone1,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&amp;decorations&#x3D;gps&#x60; will list GPS decorations for each reeferStateZone1 reading, each reeferAmbientAirTemperatureMilliC reding, and gpsOdometerMeters reading.  Note that decorations may significantly increase the response payload size.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerStatsHistory: async (startTime: string, endTime: string, types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, decorations?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getTrailerStatsHistory', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getTrailerStatsHistory', 'endTime', endTime)
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getTrailerStatsHistory', 'types', types)
            const localVarPath = `/beta/fleet/trailers/stats/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (trailerIds !== undefined) {
                localVarQueryParameter['trailerIds'] = trailerIds;
            }

            if (decorations !== undefined) {
                localVarQueryParameter['decorations'] = decorations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the last known stats of all trailers at the given `time`. If no `time` is specified, the current time is used.
         * @summary [beta] Get trailer stats
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [time]  A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 Format. Millisecond precision and timezones are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerStatsSnapshot: async (types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, time?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getTrailerStatsSnapshot', 'types', types)
            const localVarPath = `/beta/fleet/trailers/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (types !== undefined) {
                localVarQueryParameter['types'] = types;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (trailerIds !== undefined) {
                localVarQueryParameter['trailerIds'] = trailerIds;
            }

            if (time !== undefined) {
                localVarQueryParameter['time'] = time;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all trailers.
         * @summary [beta] List all trailers
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrailers: async (tagIds?: string, parentTagIds?: string, limit?: number, after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/beta/fleet/trailers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update organization\'s compliance settings, including carrier name, office address, and DOT number
         * @summary [beta] Update compliance settings
         * @param {SettingsPatchComplianceSettingsRequestBody} patchComplianceSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchComplianceSettings: async (patchComplianceSettingsRequestBody: SettingsPatchComplianceSettingsRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patchComplianceSettingsRequestBody' is not null or undefined
            assertParamExists('patchComplianceSettings', 'patchComplianceSettingsRequestBody', patchComplianceSettingsRequestBody)
            const localVarPath = `/beta/fleet/settings/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchComplianceSettingsRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update driver app settings.
         * @summary [beta] Update driver app settings
         * @param {SettingsPatchDriverAppSettingsRequestBody} patchDriverAppSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDriverAppSettings: async (patchDriverAppSettingsRequestBody: SettingsPatchDriverAppSettingsRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'patchDriverAppSettingsRequestBody' is not null or undefined
            assertParamExists('patchDriverAppSettings', 'patchDriverAppSettingsRequestBody', patchDriverAppSettingsRequestBody)
            const localVarPath = `/beta/fleet/settings/driver-app`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchDriverAppSettingsRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an equipment.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
         * @summary [beta] Update an equipment
         * @param {string} id The unique Samsara ID of the Equipment. This is automatically generated when the Equipment object is created. It cannot be changed.
         * @param {EquipmentPatchEquipmentRequestBody} patchEquipmentRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEquipment: async (id: string, patchEquipmentRequestBody: EquipmentPatchEquipmentRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchEquipment', 'id', id)
            // verify required parameter 'patchEquipmentRequestBody' is not null or undefined
            assertParamExists('patchEquipment', 'patchEquipmentRequestBody', patchEquipmentRequestBody)
            const localVarPath = `/beta/fleet/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchEquipmentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a single document.
         * @summary [beta] Create document
         * @param {DocumentsPostDocumentRequestBody} postDocumentRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDocument: async (postDocumentRequestBody: DocumentsPostDocumentRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postDocumentRequestBody' is not null or undefined
            assertParamExists('postDocument', 'postDocumentRequestBody', postDocumentRequestBody)
            const localVarPath = `/beta/fleet/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postDocumentRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Activate a new gateway. To activate a device and associate it with your organization, enter its serial number. Each device\'s serial number can also be found on its label or packaging, or from your order confirmation email. A Not Found error could mean that the serial was not found or it has already been activated
         * @summary [beta] Activate a new gateway
         * @param {GatewaysPostGatewayRequestBody} postGatewayRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGateway: async (postGatewayRequestBody: GatewaysPostGatewayRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'postGatewayRequestBody' is not null or undefined
            assertParamExists('postGateway', 'postGatewayRequestBody', postGatewayRequestBody)
            const localVarPath = `/beta/gateways`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postGatewayRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an attribute in the organization.
         * @summary [beta] Update an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {UpdateAttributeRequest} attribute The attribute to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttribute: async (id: string, attribute: UpdateAttributeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateAttribute', 'id', id)
            // verify required parameter 'attribute' is not null or undefined
            assertParamExists('updateAttribute', 'attribute', attribute)
            const localVarPath = `/beta/attributes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(attribute, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the engine immobilizer state of a vehicle. This requires an engine immobilizer to be installed on the vehicle gateway. The desired engine immobilizer state will be set on the vehicle when the vehicle gateway is online, and the engine is not running.
         * @summary [beta] Update engine immobilizer state of a vehicle.
         * @param {number} id Vehicle ID
         * @param {EngineImmobilizerUpdateEngineImmobilizerStateRequestBody} updateEngineImmobilizerStateRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEngineImmobilizerState: async (id: number, updateEngineImmobilizerStateRequestBody: EngineImmobilizerUpdateEngineImmobilizerStateRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateEngineImmobilizerState', 'id', id)
            // verify required parameter 'updateEngineImmobilizerStateRequestBody' is not null or undefined
            assertParamExists('updateEngineImmobilizerState', 'updateEngineImmobilizerStateRequestBody', updateEngineImmobilizerStateRequestBody)
            const localVarPath = `/beta/fleet/vehicles/{id}/immobilizer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateEngineImmobilizerStateRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a trailer.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
         * @summary [beta] Update a trailer
         * @param {string} id Unique identifier for the trailer to update.
         * @param {TrailersUpdateTrailerRequestBody} updateTrailerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrailer: async (id: string, updateTrailerRequestBody: TrailersUpdateTrailerRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTrailer', 'id', id)
            // verify required parameter 'updateTrailerRequestBody' is not null or undefined
            assertParamExists('updateTrailer', 'updateTrailerRequestBody', updateTrailerRequestBody)
            const localVarPath = `/beta/fleet/trailers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTrailerRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BetaAPIsApi - functional programming interface
 * @export
 */
export const BetaAPIsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = BetaAPIsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new attribute in the organization.
         * @summary [beta] Create an attribute
         * @param {CreateAttributeRequest} attribute The attribute to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAttribute(attribute: CreateAttributeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeExpandedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAttribute(attribute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a new trailer asset.
         * @summary [beta] Creates a new trailer asset
         * @param {TrailersCreateTrailerRequestBody} createTrailerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTrailer(createTrailerRequestBody: TrailersCreateTrailerRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrailersCreateTrailerResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTrailer(createTrailerRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete an attribute by id, including all of its applications.
         * @summary [beta] Deleting an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAttribute(id: string, entityType: 'driver' | 'asset', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAttribute(id, entityType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deletes a single document.
         * @summary [beta] Delete document
         * @param {string} id ID of the document to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDocument(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDocument(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Deactivate a gateway
         * @summary [beta] Deactivate a gateway
         * @param {string} id Gateway serial number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteGateway(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteGateway(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a trailer with the given ID.
         * @summary [beta] Delete a trailer
         * @param {string} id Unique identifier for the trailer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTrailer(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTrailer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch an attribute by id, including all of its applications.
         * @summary [beta] Retrieve an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttribute(id: string, entityType: 'driver' | 'asset', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeExpandedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttribute(id, entityType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch all attributes in an organization associated with either drivers or assets.
         * @summary [beta] List all attributes by entity type
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributesByEntityType(entityType: 'driver' | 'asset', limit?: number, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAttributesByEntityTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributesByEntityType(entityType, limit, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get organization\'s compliance settings, including carrier name, office address, and DOT number
         * @summary [beta] Get compliance settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getComplianceSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsGetComplianceSettingsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getComplianceSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single document.
         * @summary [beta] Fetch document
         * @param {string} id ID of the document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocument(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsGetDocumentResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocument(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of the organization document types.
         * @summary [beta] Fetch document types
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentTypes(after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentTypesGetDocumentTypesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentTypes(after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all documents for the given time range.
         * @summary [beta] Fetch all documents
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [documentTypeId] ID of the document template type.
         * @param {string} [queryBy] Query by document creation time (&#x60;created&#x60;) or updated time (&#x60;updated&#x60;). Defaults to &#x60;created&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocuments(startTime: string, endTime: string, after?: string, documentTypeId?: string, queryBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsGetDocumentsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocuments(startTime, endTime, after, documentTypeId, queryBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get driver app settings.
         * @summary [beta] Get driver app settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriverAppSettings(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsGetDriverAppSettingsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriverAppSettings(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all drivers\' efficiencies.
         * @summary [beta] List driver efficiency
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Cannot be used with tag filtering or driver status. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverTagIds] Filters summary to drivers based on this comma-separated list of tag IDs. Data from all the drivers\&#39; respective vehicles will be included in the summary, regardless of which tag the vehicle is associated with. Should not be provided in addition to &#x60;driverIds&#x60;. Example: driverTagIds&#x3D;1234,5678
         * @param {Array<string>} [driverParentTagIds] Filters like &#x60;driverTagIds&#x60; but includes descendants of all the given parent tags. Should not be provided in addition to &#x60;driverIds&#x60;. Example: &#x60;driverParentTagIds&#x3D;1234,5678&#x60;
         * @param {string} [startTime] A start time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if &#x60;startTime&#x60; is 2020-03-17T12:06:19Z then the results will include data starting from 2020-03-17T12:00:00Z. The provided start time cannot be in the future. Start time can be at most 31 days before the end time. If the start time is within the last hour, the results will be empty. Default: 24 hours prior to endTime.
         * @param {string} [endTime] An end time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if &#x60;endTime&#x60; is 2020-03-17T12:06:19Z then the results will include data up until 2020-03-17T12:00:00Z. The provided end time cannot be in the future. End time can be at most 31 days after the start time.   Default: The current time truncated to the hour mark.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriverEfficiency(driverActivationStatus?: 'active' | 'deactivated', driverIds?: Array<string>, after?: string, driverTagIds?: Array<string>, driverParentTagIds?: Array<string>, startTime?: string, endTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriverEfficienciesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriverEfficiency(driverActivationStatus, driverIds, after, driverTagIds, driverParentTagIds, startTime, endTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all gateways
         * @summary [beta] List all gateways
         * @param {Array<string>} [models] Filter by a comma separated list of gateway models.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGateways(models?: Array<string>, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GatewaysGetGatewaysResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGateways(models, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve a trailer with given ID.
         * @summary [beta] Retrieve a trailer
         * @param {string} id ID of the trailer. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: \&quot;key:value\&quot;. For example, \&quot;maintenanceId:250020\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrailer(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrailersGetTrailerResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrailer(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Follow a feed of trailer stats.  The first call to this endpoint will provide the most recent stats for each trailer and an `endCursor`.  Providing the `endCursor` value to the `after` query parameter will fetch all updates since the previous API call.  If `hasNextPage` is false, no new data is immediately available. Please wait a minimum of 5 seconds before making a subsequent request.
         * @summary [beta] Get trailer stats feed
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [decorations] Decorations add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the trailer\&#39;s location whenever the odometer updates, you may set &#x60;types&#x3D;gpsOdometerMeters&amp;decorations&#x3D;gps&#x60;.  You may list **up to 2** types using comma-separated format. If multiple stats are listed in the types parameter, the decorations will be added to each type. For example: &#x60;types&#x3D;reeferStateZone1,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&amp;decorations&#x3D;gps&#x60; will list GPS decorations for each reeferStateZone1 reading, each reeferAmbientAirTemperatureMilliC reding, and gpsOdometerMeters reading.  Note that decorations may significantly increase the response payload size.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrailerStatsFeed(types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, decorations?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrailerStatsGetTrailerStatsFeedResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrailerStatsFeed(types, tagIds, parentTagIds, after, trailerIds, decorations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns trailer stats during the given time range for all trailers. This can be optionally filtered by tags or specific trailer IDs.
         * @summary [beta] Get trailer stats history
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [decorations] Decorations add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the trailer\&#39;s location whenever the odometer updates, you may set &#x60;types&#x3D;gpsOdometerMeters&amp;decorations&#x3D;gps&#x60;.  You may list **up to 2** types using comma-separated format. If multiple stats are listed in the types parameter, the decorations will be added to each type. For example: &#x60;types&#x3D;reeferStateZone1,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&amp;decorations&#x3D;gps&#x60; will list GPS decorations for each reeferStateZone1 reading, each reeferAmbientAirTemperatureMilliC reding, and gpsOdometerMeters reading.  Note that decorations may significantly increase the response payload size.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrailerStatsHistory(startTime: string, endTime: string, types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, decorations?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrailerStatsGetTrailerStatsHistoryResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrailerStatsHistory(startTime, endTime, types, tagIds, parentTagIds, after, trailerIds, decorations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the last known stats of all trailers at the given `time`. If no `time` is specified, the current time is used.
         * @summary [beta] Get trailer stats
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [time]  A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 Format. Millisecond precision and timezones are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrailerStatsSnapshot(types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, time?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrailerStatsGetTrailerStatsSnapshotResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrailerStatsSnapshot(types, tagIds, parentTagIds, after, trailerIds, time, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all trailers.
         * @summary [beta] List all trailers
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTrailers(tagIds?: string, parentTagIds?: string, limit?: number, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrailersListTrailersResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTrailers(tagIds, parentTagIds, limit, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update organization\'s compliance settings, including carrier name, office address, and DOT number
         * @summary [beta] Update compliance settings
         * @param {SettingsPatchComplianceSettingsRequestBody} patchComplianceSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchComplianceSettings(patchComplianceSettingsRequestBody: SettingsPatchComplianceSettingsRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsPatchComplianceSettingsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchComplianceSettings(patchComplianceSettingsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update driver app settings.
         * @summary [beta] Update driver app settings
         * @param {SettingsPatchDriverAppSettingsRequestBody} patchDriverAppSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchDriverAppSettings(patchDriverAppSettingsRequestBody: SettingsPatchDriverAppSettingsRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SettingsPatchDriverAppSettingsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchDriverAppSettings(patchDriverAppSettingsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an equipment.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
         * @summary [beta] Update an equipment
         * @param {string} id The unique Samsara ID of the Equipment. This is automatically generated when the Equipment object is created. It cannot be changed.
         * @param {EquipmentPatchEquipmentRequestBody} patchEquipmentRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchEquipment(id: string, patchEquipmentRequestBody: EquipmentPatchEquipmentRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentPatchEquipmentResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchEquipment(id, patchEquipmentRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a single document.
         * @summary [beta] Create document
         * @param {DocumentsPostDocumentRequestBody} postDocumentRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postDocument(postDocumentRequestBody: DocumentsPostDocumentRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentsPostDocumentResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postDocument(postDocumentRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Activate a new gateway. To activate a device and associate it with your organization, enter its serial number. Each device\'s serial number can also be found on its label or packaging, or from your order confirmation email. A Not Found error could mean that the serial was not found or it has already been activated
         * @summary [beta] Activate a new gateway
         * @param {GatewaysPostGatewayRequestBody} postGatewayRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postGateway(postGatewayRequestBody: GatewaysPostGatewayRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GatewaysPostGatewayResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postGateway(postGatewayRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an attribute in the organization.
         * @summary [beta] Update an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {UpdateAttributeRequest} attribute The attribute to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAttribute(id: string, attribute: UpdateAttributeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttributeExpandedResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAttribute(id, attribute, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the engine immobilizer state of a vehicle. This requires an engine immobilizer to be installed on the vehicle gateway. The desired engine immobilizer state will be set on the vehicle when the vehicle gateway is online, and the engine is not running.
         * @summary [beta] Update engine immobilizer state of a vehicle.
         * @param {number} id Vehicle ID
         * @param {EngineImmobilizerUpdateEngineImmobilizerStateRequestBody} updateEngineImmobilizerStateRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateEngineImmobilizerState(id: number, updateEngineImmobilizerStateRequestBody: EngineImmobilizerUpdateEngineImmobilizerStateRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EngineImmobilizerUpdateEngineImmobilizerStateResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateEngineImmobilizerState(id, updateEngineImmobilizerStateRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a trailer.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
         * @summary [beta] Update a trailer
         * @param {string} id Unique identifier for the trailer to update.
         * @param {TrailersUpdateTrailerRequestBody} updateTrailerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTrailer(id: string, updateTrailerRequestBody: TrailersUpdateTrailerRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TrailersUpdateTrailerResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTrailer(id, updateTrailerRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * BetaAPIsApi - factory interface
 * @export
 */
export const BetaAPIsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = BetaAPIsApiFp(configuration)
    return {
        /**
         * Creates a new attribute in the organization.
         * @summary [beta] Create an attribute
         * @param {CreateAttributeRequest} attribute The attribute to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAttribute(attribute: CreateAttributeRequest, options?: any): AxiosPromise<AttributeExpandedResponse> {
            return localVarFp.createAttribute(attribute, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a new trailer asset.
         * @summary [beta] Creates a new trailer asset
         * @param {TrailersCreateTrailerRequestBody} createTrailerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTrailer(createTrailerRequestBody: TrailersCreateTrailerRequestBody, options?: any): AxiosPromise<TrailersCreateTrailerResponseBody> {
            return localVarFp.createTrailer(createTrailerRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete an attribute by id, including all of its applications.
         * @summary [beta] Deleting an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAttribute(id: string, entityType: 'driver' | 'asset', options?: any): AxiosPromise<string> {
            return localVarFp.deleteAttribute(id, entityType, options).then((request) => request(axios, basePath));
        },
        /**
         * Deletes a single document.
         * @summary [beta] Delete document
         * @param {string} id ID of the document to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDocument(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDocument(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Deactivate a gateway
         * @summary [beta] Deactivate a gateway
         * @param {string} id Gateway serial number
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteGateway(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteGateway(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a trailer with the given ID.
         * @summary [beta] Delete a trailer
         * @param {string} id Unique identifier for the trailer to delete.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTrailer(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteTrailer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch an attribute by id, including all of its applications.
         * @summary [beta] Retrieve an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttribute(id: string, entityType: 'driver' | 'asset', options?: any): AxiosPromise<AttributeExpandedResponse> {
            return localVarFp.getAttribute(id, entityType, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch all attributes in an organization associated with either drivers or assets.
         * @summary [beta] List all attributes by entity type
         * @param {'driver' | 'asset'} entityType Denotes the type of entity, driver or asset.
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributesByEntityType(entityType: 'driver' | 'asset', limit?: number, after?: string, options?: any): AxiosPromise<GetAttributesByEntityTypeResponse> {
            return localVarFp.getAttributesByEntityType(entityType, limit, after, options).then((request) => request(axios, basePath));
        },
        /**
         * Get organization\'s compliance settings, including carrier name, office address, and DOT number
         * @summary [beta] Get compliance settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getComplianceSettings(options?: any): AxiosPromise<SettingsGetComplianceSettingsResponseBody> {
            return localVarFp.getComplianceSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single document.
         * @summary [beta] Fetch document
         * @param {string} id ID of the document
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocument(id: string, options?: any): AxiosPromise<DocumentsGetDocumentResponseBody> {
            return localVarFp.getDocument(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of the organization document types.
         * @summary [beta] Fetch document types
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentTypes(after?: string, options?: any): AxiosPromise<DocumentTypesGetDocumentTypesResponseBody> {
            return localVarFp.getDocumentTypes(after, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all documents for the given time range.
         * @summary [beta] Fetch all documents
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [documentTypeId] ID of the document template type.
         * @param {string} [queryBy] Query by document creation time (&#x60;created&#x60;) or updated time (&#x60;updated&#x60;). Defaults to &#x60;created&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocuments(startTime: string, endTime: string, after?: string, documentTypeId?: string, queryBy?: string, options?: any): AxiosPromise<DocumentsGetDocumentsResponseBody> {
            return localVarFp.getDocuments(startTime, endTime, after, documentTypeId, queryBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Get driver app settings.
         * @summary [beta] Get driver app settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriverAppSettings(options?: any): AxiosPromise<SettingsGetDriverAppSettingsResponseBody> {
            return localVarFp.getDriverAppSettings(options).then((request) => request(axios, basePath));
        },
        /**
         * Get all drivers\' efficiencies.
         * @summary [beta] List driver efficiency
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Cannot be used with tag filtering or driver status. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverTagIds] Filters summary to drivers based on this comma-separated list of tag IDs. Data from all the drivers\&#39; respective vehicles will be included in the summary, regardless of which tag the vehicle is associated with. Should not be provided in addition to &#x60;driverIds&#x60;. Example: driverTagIds&#x3D;1234,5678
         * @param {Array<string>} [driverParentTagIds] Filters like &#x60;driverTagIds&#x60; but includes descendants of all the given parent tags. Should not be provided in addition to &#x60;driverIds&#x60;. Example: &#x60;driverParentTagIds&#x3D;1234,5678&#x60;
         * @param {string} [startTime] A start time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if &#x60;startTime&#x60; is 2020-03-17T12:06:19Z then the results will include data starting from 2020-03-17T12:00:00Z. The provided start time cannot be in the future. Start time can be at most 31 days before the end time. If the start time is within the last hour, the results will be empty. Default: 24 hours prior to endTime.
         * @param {string} [endTime] An end time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if &#x60;endTime&#x60; is 2020-03-17T12:06:19Z then the results will include data up until 2020-03-17T12:00:00Z. The provided end time cannot be in the future. End time can be at most 31 days after the start time.   Default: The current time truncated to the hour mark.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriverEfficiency(driverActivationStatus?: 'active' | 'deactivated', driverIds?: Array<string>, after?: string, driverTagIds?: Array<string>, driverParentTagIds?: Array<string>, startTime?: string, endTime?: string, options?: any): AxiosPromise<DriverEfficienciesResponse> {
            return localVarFp.getDriverEfficiency(driverActivationStatus, driverIds, after, driverTagIds, driverParentTagIds, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * List all gateways
         * @summary [beta] List all gateways
         * @param {Array<string>} [models] Filter by a comma separated list of gateway models.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGateways(models?: Array<string>, after?: string, options?: any): AxiosPromise<GatewaysGetGatewaysResponseBody> {
            return localVarFp.getGateways(models, after, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve a trailer with given ID.
         * @summary [beta] Retrieve a trailer
         * @param {string} id ID of the trailer. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: \&quot;key:value\&quot;. For example, \&quot;maintenanceId:250020\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailer(id: string, options?: any): AxiosPromise<TrailersGetTrailerResponseBody> {
            return localVarFp.getTrailer(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Follow a feed of trailer stats.  The first call to this endpoint will provide the most recent stats for each trailer and an `endCursor`.  Providing the `endCursor` value to the `after` query parameter will fetch all updates since the previous API call.  If `hasNextPage` is false, no new data is immediately available. Please wait a minimum of 5 seconds before making a subsequent request.
         * @summary [beta] Get trailer stats feed
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [decorations] Decorations add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the trailer\&#39;s location whenever the odometer updates, you may set &#x60;types&#x3D;gpsOdometerMeters&amp;decorations&#x3D;gps&#x60;.  You may list **up to 2** types using comma-separated format. If multiple stats are listed in the types parameter, the decorations will be added to each type. For example: &#x60;types&#x3D;reeferStateZone1,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&amp;decorations&#x3D;gps&#x60; will list GPS decorations for each reeferStateZone1 reading, each reeferAmbientAirTemperatureMilliC reding, and gpsOdometerMeters reading.  Note that decorations may significantly increase the response payload size.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerStatsFeed(types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, decorations?: string, options?: any): AxiosPromise<TrailerStatsGetTrailerStatsFeedResponseBody> {
            return localVarFp.getTrailerStatsFeed(types, tagIds, parentTagIds, after, trailerIds, decorations, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns trailer stats during the given time range for all trailers. This can be optionally filtered by tags or specific trailer IDs.
         * @summary [beta] Get trailer stats history
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [decorations] Decorations add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the trailer\&#39;s location whenever the odometer updates, you may set &#x60;types&#x3D;gpsOdometerMeters&amp;decorations&#x3D;gps&#x60;.  You may list **up to 2** types using comma-separated format. If multiple stats are listed in the types parameter, the decorations will be added to each type. For example: &#x60;types&#x3D;reeferStateZone1,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&amp;decorations&#x3D;gps&#x60; will list GPS decorations for each reeferStateZone1 reading, each reeferAmbientAirTemperatureMilliC reding, and gpsOdometerMeters reading.  Note that decorations may significantly increase the response payload size.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerStatsHistory(startTime: string, endTime: string, types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, decorations?: string, options?: any): AxiosPromise<TrailerStatsGetTrailerStatsHistoryResponseBody> {
            return localVarFp.getTrailerStatsHistory(startTime, endTime, types, tagIds, parentTagIds, after, trailerIds, decorations, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the last known stats of all trailers at the given `time`. If no `time` is specified, the current time is used.
         * @summary [beta] Get trailer stats
         * @param {string} types The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [trailerIds]  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [time]  A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 Format. Millisecond precision and timezones are supported.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrailerStatsSnapshot(types: string, tagIds?: string, parentTagIds?: string, after?: string, trailerIds?: string, time?: string, options?: any): AxiosPromise<TrailerStatsGetTrailerStatsSnapshotResponseBody> {
            return localVarFp.getTrailerStatsSnapshot(types, tagIds, parentTagIds, after, trailerIds, time, options).then((request) => request(axios, basePath));
        },
        /**
         * List all trailers.
         * @summary [beta] List all trailers
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTrailers(tagIds?: string, parentTagIds?: string, limit?: number, after?: string, options?: any): AxiosPromise<TrailersListTrailersResponseBody> {
            return localVarFp.listTrailers(tagIds, parentTagIds, limit, after, options).then((request) => request(axios, basePath));
        },
        /**
         * Update organization\'s compliance settings, including carrier name, office address, and DOT number
         * @summary [beta] Update compliance settings
         * @param {SettingsPatchComplianceSettingsRequestBody} patchComplianceSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchComplianceSettings(patchComplianceSettingsRequestBody: SettingsPatchComplianceSettingsRequestBody, options?: any): AxiosPromise<SettingsPatchComplianceSettingsResponseBody> {
            return localVarFp.patchComplianceSettings(patchComplianceSettingsRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update driver app settings.
         * @summary [beta] Update driver app settings
         * @param {SettingsPatchDriverAppSettingsRequestBody} patchDriverAppSettingsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchDriverAppSettings(patchDriverAppSettingsRequestBody: SettingsPatchDriverAppSettingsRequestBody, options?: any): AxiosPromise<SettingsPatchDriverAppSettingsResponseBody> {
            return localVarFp.patchDriverAppSettings(patchDriverAppSettingsRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an equipment.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
         * @summary [beta] Update an equipment
         * @param {string} id The unique Samsara ID of the Equipment. This is automatically generated when the Equipment object is created. It cannot be changed.
         * @param {EquipmentPatchEquipmentRequestBody} patchEquipmentRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchEquipment(id: string, patchEquipmentRequestBody: EquipmentPatchEquipmentRequestBody, options?: any): AxiosPromise<EquipmentPatchEquipmentResponseBody> {
            return localVarFp.patchEquipment(id, patchEquipmentRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a single document.
         * @summary [beta] Create document
         * @param {DocumentsPostDocumentRequestBody} postDocumentRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postDocument(postDocumentRequestBody: DocumentsPostDocumentRequestBody, options?: any): AxiosPromise<DocumentsPostDocumentResponseBody> {
            return localVarFp.postDocument(postDocumentRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Activate a new gateway. To activate a device and associate it with your organization, enter its serial number. Each device\'s serial number can also be found on its label or packaging, or from your order confirmation email. A Not Found error could mean that the serial was not found or it has already been activated
         * @summary [beta] Activate a new gateway
         * @param {GatewaysPostGatewayRequestBody} postGatewayRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postGateway(postGatewayRequestBody: GatewaysPostGatewayRequestBody, options?: any): AxiosPromise<GatewaysPostGatewayResponseBody> {
            return localVarFp.postGateway(postGatewayRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an attribute in the organization.
         * @summary [beta] Update an attribute
         * @param {string} id Samsara-provided UUID of the attribute.
         * @param {UpdateAttributeRequest} attribute The attribute to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAttribute(id: string, attribute: UpdateAttributeRequest, options?: any): AxiosPromise<AttributeExpandedResponse> {
            return localVarFp.updateAttribute(id, attribute, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the engine immobilizer state of a vehicle. This requires an engine immobilizer to be installed on the vehicle gateway. The desired engine immobilizer state will be set on the vehicle when the vehicle gateway is online, and the engine is not running.
         * @summary [beta] Update engine immobilizer state of a vehicle.
         * @param {number} id Vehicle ID
         * @param {EngineImmobilizerUpdateEngineImmobilizerStateRequestBody} updateEngineImmobilizerStateRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEngineImmobilizerState(id: number, updateEngineImmobilizerStateRequestBody: EngineImmobilizerUpdateEngineImmobilizerStateRequestBody, options?: any): AxiosPromise<EngineImmobilizerUpdateEngineImmobilizerStateResponseBody> {
            return localVarFp.updateEngineImmobilizerState(id, updateEngineImmobilizerStateRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a trailer.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
         * @summary [beta] Update a trailer
         * @param {string} id Unique identifier for the trailer to update.
         * @param {TrailersUpdateTrailerRequestBody} updateTrailerRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrailer(id: string, updateTrailerRequestBody: TrailersUpdateTrailerRequestBody, options?: any): AxiosPromise<TrailersUpdateTrailerResponseBody> {
            return localVarFp.updateTrailer(id, updateTrailerRequestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAttribute operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiCreateAttributeRequest
 */
export interface BetaAPIsApiCreateAttributeRequest {
    /**
     * The attribute to create.
     * @type {CreateAttributeRequest}
     * @memberof BetaAPIsApiCreateAttribute
     */
    readonly attribute: CreateAttributeRequest
}

/**
 * Request parameters for createTrailer operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiCreateTrailerRequest
 */
export interface BetaAPIsApiCreateTrailerRequest {
    /**
     * 
     * @type {TrailersCreateTrailerRequestBody}
     * @memberof BetaAPIsApiCreateTrailer
     */
    readonly createTrailerRequestBody: TrailersCreateTrailerRequestBody
}

/**
 * Request parameters for deleteAttribute operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiDeleteAttributeRequest
 */
export interface BetaAPIsApiDeleteAttributeRequest {
    /**
     * Samsara-provided UUID of the attribute.
     * @type {string}
     * @memberof BetaAPIsApiDeleteAttribute
     */
    readonly id: string

    /**
     * Denotes the type of entity, driver or asset.
     * @type {'driver' | 'asset'}
     * @memberof BetaAPIsApiDeleteAttribute
     */
    readonly entityType: 'driver' | 'asset'
}

/**
 * Request parameters for deleteDocument operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiDeleteDocumentRequest
 */
export interface BetaAPIsApiDeleteDocumentRequest {
    /**
     * ID of the document to delete
     * @type {string}
     * @memberof BetaAPIsApiDeleteDocument
     */
    readonly id: string
}

/**
 * Request parameters for deleteGateway operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiDeleteGatewayRequest
 */
export interface BetaAPIsApiDeleteGatewayRequest {
    /**
     * Gateway serial number
     * @type {string}
     * @memberof BetaAPIsApiDeleteGateway
     */
    readonly id: string
}

/**
 * Request parameters for deleteTrailer operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiDeleteTrailerRequest
 */
export interface BetaAPIsApiDeleteTrailerRequest {
    /**
     * Unique identifier for the trailer to delete.
     * @type {string}
     * @memberof BetaAPIsApiDeleteTrailer
     */
    readonly id: string
}

/**
 * Request parameters for getAttribute operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetAttributeRequest
 */
export interface BetaAPIsApiGetAttributeRequest {
    /**
     * Samsara-provided UUID of the attribute.
     * @type {string}
     * @memberof BetaAPIsApiGetAttribute
     */
    readonly id: string

    /**
     * Denotes the type of entity, driver or asset.
     * @type {'driver' | 'asset'}
     * @memberof BetaAPIsApiGetAttribute
     */
    readonly entityType: 'driver' | 'asset'
}

/**
 * Request parameters for getAttributesByEntityType operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetAttributesByEntityTypeRequest
 */
export interface BetaAPIsApiGetAttributesByEntityTypeRequest {
    /**
     * Denotes the type of entity, driver or asset.
     * @type {'driver' | 'asset'}
     * @memberof BetaAPIsApiGetAttributesByEntityType
     */
    readonly entityType: 'driver' | 'asset'

    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof BetaAPIsApiGetAttributesByEntityType
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiGetAttributesByEntityType
     */
    readonly after?: string
}

/**
 * Request parameters for getDocument operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetDocumentRequest
 */
export interface BetaAPIsApiGetDocumentRequest {
    /**
     * ID of the document
     * @type {string}
     * @memberof BetaAPIsApiGetDocument
     */
    readonly id: string
}

/**
 * Request parameters for getDocumentTypes operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetDocumentTypesRequest
 */
export interface BetaAPIsApiGetDocumentTypesRequest {
    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiGetDocumentTypes
     */
    readonly after?: string
}

/**
 * Request parameters for getDocuments operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetDocumentsRequest
 */
export interface BetaAPIsApiGetDocumentsRequest {
    /**
     *  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof BetaAPIsApiGetDocuments
     */
    readonly startTime: string

    /**
     *  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof BetaAPIsApiGetDocuments
     */
    readonly endTime: string

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiGetDocuments
     */
    readonly after?: string

    /**
     * ID of the document template type.
     * @type {string}
     * @memberof BetaAPIsApiGetDocuments
     */
    readonly documentTypeId?: string

    /**
     * Query by document creation time (&#x60;created&#x60;) or updated time (&#x60;updated&#x60;). Defaults to &#x60;created&#x60;.
     * @type {string}
     * @memberof BetaAPIsApiGetDocuments
     */
    readonly queryBy?: string
}

/**
 * Request parameters for getDriverEfficiency operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetDriverEfficiencyRequest
 */
export interface BetaAPIsApiGetDriverEfficiencyRequest {
    /**
     * If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
     * @type {'active' | 'deactivated'}
     * @memberof BetaAPIsApiGetDriverEfficiency
     */
    readonly driverActivationStatus?: 'active' | 'deactivated'

    /**
     * A filter on the data based on this comma-separated list of driver IDs. Cannot be used with tag filtering or driver status. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof BetaAPIsApiGetDriverEfficiency
     */
    readonly driverIds?: Array<string>

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiGetDriverEfficiency
     */
    readonly after?: string

    /**
     * Filters summary to drivers based on this comma-separated list of tag IDs. Data from all the drivers\&#39; respective vehicles will be included in the summary, regardless of which tag the vehicle is associated with. Should not be provided in addition to &#x60;driverIds&#x60;. Example: driverTagIds&#x3D;1234,5678
     * @type {Array<string>}
     * @memberof BetaAPIsApiGetDriverEfficiency
     */
    readonly driverTagIds?: Array<string>

    /**
     * Filters like &#x60;driverTagIds&#x60; but includes descendants of all the given parent tags. Should not be provided in addition to &#x60;driverIds&#x60;. Example: &#x60;driverParentTagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof BetaAPIsApiGetDriverEfficiency
     */
    readonly driverParentTagIds?: Array<string>

    /**
     * A start time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if &#x60;startTime&#x60; is 2020-03-17T12:06:19Z then the results will include data starting from 2020-03-17T12:00:00Z. The provided start time cannot be in the future. Start time can be at most 31 days before the end time. If the start time is within the last hour, the results will be empty. Default: 24 hours prior to endTime.
     * @type {string}
     * @memberof BetaAPIsApiGetDriverEfficiency
     */
    readonly startTime?: string

    /**
     * An end time in RFC 3339 format. The results will be truncated to the hour mark for the provided time. For example, if &#x60;endTime&#x60; is 2020-03-17T12:06:19Z then the results will include data up until 2020-03-17T12:00:00Z. The provided end time cannot be in the future. End time can be at most 31 days after the start time.   Default: The current time truncated to the hour mark.
     * @type {string}
     * @memberof BetaAPIsApiGetDriverEfficiency
     */
    readonly endTime?: string
}

/**
 * Request parameters for getGateways operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetGatewaysRequest
 */
export interface BetaAPIsApiGetGatewaysRequest {
    /**
     * Filter by a comma separated list of gateway models.
     * @type {Array<string>}
     * @memberof BetaAPIsApiGetGateways
     */
    readonly models?: Array<string>

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiGetGateways
     */
    readonly after?: string
}

/**
 * Request parameters for getTrailer operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetTrailerRequest
 */
export interface BetaAPIsApiGetTrailerRequest {
    /**
     * ID of the trailer. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: \&quot;key:value\&quot;. For example, \&quot;maintenanceId:250020\&quot;.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailer
     */
    readonly id: string
}

/**
 * Request parameters for getTrailerStatsFeed operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetTrailerStatsFeedRequest
 */
export interface BetaAPIsApiGetTrailerStatsFeedRequest {
    /**
     * The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsFeed
     */
    readonly types: string

    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsFeed
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsFeed
     */
    readonly parentTagIds?: string

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsFeed
     */
    readonly after?: string

    /**
     *  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsFeed
     */
    readonly trailerIds?: string

    /**
     * Decorations add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the trailer\&#39;s location whenever the odometer updates, you may set &#x60;types&#x3D;gpsOdometerMeters&amp;decorations&#x3D;gps&#x60;.  You may list **up to 2** types using comma-separated format. If multiple stats are listed in the types parameter, the decorations will be added to each type. For example: &#x60;types&#x3D;reeferStateZone1,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&amp;decorations&#x3D;gps&#x60; will list GPS decorations for each reeferStateZone1 reading, each reeferAmbientAirTemperatureMilliC reding, and gpsOdometerMeters reading.  Note that decorations may significantly increase the response payload size.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsFeed
     */
    readonly decorations?: string
}

/**
 * Request parameters for getTrailerStatsHistory operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetTrailerStatsHistoryRequest
 */
export interface BetaAPIsApiGetTrailerStatsHistoryRequest {
    /**
     *  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsHistory
     */
    readonly startTime: string

    /**
     *  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsHistory
     */
    readonly endTime: string

    /**
     * The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsHistory
     */
    readonly types: string

    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsHistory
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsHistory
     */
    readonly parentTagIds?: string

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsHistory
     */
    readonly after?: string

    /**
     *  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsHistory
     */
    readonly trailerIds?: string

    /**
     * Decorations add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the trailer\&#39;s location whenever the odometer updates, you may set &#x60;types&#x3D;gpsOdometerMeters&amp;decorations&#x3D;gps&#x60;.  You may list **up to 2** types using comma-separated format. If multiple stats are listed in the types parameter, the decorations will be added to each type. For example: &#x60;types&#x3D;reeferStateZone1,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&amp;decorations&#x3D;gps&#x60; will list GPS decorations for each reeferStateZone1 reading, each reeferAmbientAirTemperatureMilliC reding, and gpsOdometerMeters reading.  Note that decorations may significantly increase the response payload size.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsHistory
     */
    readonly decorations?: string
}

/**
 * Request parameters for getTrailerStatsSnapshot operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiGetTrailerStatsSnapshotRequest
 */
export interface BetaAPIsApiGetTrailerStatsSnapshotRequest {
    /**
     * The stat types you want this endpoint to return information on.  You may list **up to 3** types using comma-separated format. For example: &#x60;types&#x3D;gps,reeferAmbientAirTemperatureMilliC,gpsOdometerMeters&#x60;.  * &#x60;gps&#x60;: GPS data including lat/long, heading, speed, and a reverse geocode address. * &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the PATCH /fleet/trailers/{id} endpoint or through the [cloud dashboard](https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading). Odometer readings wthat are manually set will update as GPS trip data is gathered. * &#x60;reeferAmbientAirTemperatureMilliC&#x60;: The ambient air temperature reading of the reefer in millidegree Celsius. * &#x60;reeferObdEngineSeconds&#x60;: The cumulative number of seconds the reefer has run according to onboard diagnostics. Only supported on reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone1&#x60;: The supply or discharge air temperature zone 1 in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone2&#x60;: The supply or discharge air temperature zone 2 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSupplyAirTemperatureMilliCZone3&#x60;: The supply or discharge air temperature zone 3 in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferFuelPercent&#x60;: The fuel level of the reefer unit in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). Only supported on reefer solutions. * &#x60;carrierReeferState&#x60;: The overall state of the reefer (&#x60;Off&#x60;, &#x60;On&#x60;). Only supported on multizone Carrier reefer solutions. * &#x60;reeferStateZone1&#x60;: The state of the reefer in zone 1. For single zone reefers, this applies tot he single zone. Only supported on multizone reefer solutions. * &#x60;reeferStateZone2&#x60;: The state of the reefer in zone 2. Only supported on multizone reefer solutions. * &#x60;reeferStateZone3&#x60;: The state of the reefer in zone 3. Only supported on multizone reefer solutions. * &#x60;reeferRunMode&#x60;: The operational mode of the reefer (&#x60;Start/Stop&#x60;, &#x60;Continuous&#x60;) * &#x60;reeferAlarms&#x60;: Any alarms that are present on the reefer. Only supported on reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone1&#x60;: The return air temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone2&#x60;: The return air temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferReturnAirTemperatureMilliCZone3&#x60;: The return air temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone1&#x60;: The set point temperature in zone 1 of the reefer in millidegrees Celsius. For single zone reefers, this applies to the single zone. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone2&#x60;: The set point temperature in zone 2 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions. * &#x60;reeferSetPointTemperatureMilliCZone3&#x60;: The set point temperature in zone 3 of the reefer in millidegrees Celsius. Only supported on multizone reefer solutions.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsSnapshot
     */
    readonly types: string

    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsSnapshot
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsSnapshot
     */
    readonly parentTagIds?: string

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsSnapshot
     */
    readonly after?: string

    /**
     *  A filter on the data based on this comma-separated list of trailer IDs and externalIds. Example: &#x60;trailerIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsSnapshot
     */
    readonly trailerIds?: string

    /**
     *  A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 Format. Millisecond precision and timezones are supported.
     * @type {string}
     * @memberof BetaAPIsApiGetTrailerStatsSnapshot
     */
    readonly time?: string
}

/**
 * Request parameters for listTrailers operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiListTrailersRequest
 */
export interface BetaAPIsApiListTrailersRequest {
    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof BetaAPIsApiListTrailers
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof BetaAPIsApiListTrailers
     */
    readonly parentTagIds?: string

    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof BetaAPIsApiListTrailers
     */
    readonly limit?: number

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof BetaAPIsApiListTrailers
     */
    readonly after?: string
}

/**
 * Request parameters for patchComplianceSettings operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiPatchComplianceSettingsRequest
 */
export interface BetaAPIsApiPatchComplianceSettingsRequest {
    /**
     * 
     * @type {SettingsPatchComplianceSettingsRequestBody}
     * @memberof BetaAPIsApiPatchComplianceSettings
     */
    readonly patchComplianceSettingsRequestBody: SettingsPatchComplianceSettingsRequestBody
}

/**
 * Request parameters for patchDriverAppSettings operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiPatchDriverAppSettingsRequest
 */
export interface BetaAPIsApiPatchDriverAppSettingsRequest {
    /**
     * 
     * @type {SettingsPatchDriverAppSettingsRequestBody}
     * @memberof BetaAPIsApiPatchDriverAppSettings
     */
    readonly patchDriverAppSettingsRequestBody: SettingsPatchDriverAppSettingsRequestBody
}

/**
 * Request parameters for patchEquipment operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiPatchEquipmentRequest
 */
export interface BetaAPIsApiPatchEquipmentRequest {
    /**
     * The unique Samsara ID of the Equipment. This is automatically generated when the Equipment object is created. It cannot be changed.
     * @type {string}
     * @memberof BetaAPIsApiPatchEquipment
     */
    readonly id: string

    /**
     * 
     * @type {EquipmentPatchEquipmentRequestBody}
     * @memberof BetaAPIsApiPatchEquipment
     */
    readonly patchEquipmentRequestBody: EquipmentPatchEquipmentRequestBody
}

/**
 * Request parameters for postDocument operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiPostDocumentRequest
 */
export interface BetaAPIsApiPostDocumentRequest {
    /**
     * 
     * @type {DocumentsPostDocumentRequestBody}
     * @memberof BetaAPIsApiPostDocument
     */
    readonly postDocumentRequestBody: DocumentsPostDocumentRequestBody
}

/**
 * Request parameters for postGateway operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiPostGatewayRequest
 */
export interface BetaAPIsApiPostGatewayRequest {
    /**
     * 
     * @type {GatewaysPostGatewayRequestBody}
     * @memberof BetaAPIsApiPostGateway
     */
    readonly postGatewayRequestBody: GatewaysPostGatewayRequestBody
}

/**
 * Request parameters for updateAttribute operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiUpdateAttributeRequest
 */
export interface BetaAPIsApiUpdateAttributeRequest {
    /**
     * Samsara-provided UUID of the attribute.
     * @type {string}
     * @memberof BetaAPIsApiUpdateAttribute
     */
    readonly id: string

    /**
     * The attribute to update.
     * @type {UpdateAttributeRequest}
     * @memberof BetaAPIsApiUpdateAttribute
     */
    readonly attribute: UpdateAttributeRequest
}

/**
 * Request parameters for updateEngineImmobilizerState operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiUpdateEngineImmobilizerStateRequest
 */
export interface BetaAPIsApiUpdateEngineImmobilizerStateRequest {
    /**
     * Vehicle ID
     * @type {number}
     * @memberof BetaAPIsApiUpdateEngineImmobilizerState
     */
    readonly id: number

    /**
     * 
     * @type {EngineImmobilizerUpdateEngineImmobilizerStateRequestBody}
     * @memberof BetaAPIsApiUpdateEngineImmobilizerState
     */
    readonly updateEngineImmobilizerStateRequestBody: EngineImmobilizerUpdateEngineImmobilizerStateRequestBody
}

/**
 * Request parameters for updateTrailer operation in BetaAPIsApi.
 * @export
 * @interface BetaAPIsApiUpdateTrailerRequest
 */
export interface BetaAPIsApiUpdateTrailerRequest {
    /**
     * Unique identifier for the trailer to update.
     * @type {string}
     * @memberof BetaAPIsApiUpdateTrailer
     */
    readonly id: string

    /**
     * 
     * @type {TrailersUpdateTrailerRequestBody}
     * @memberof BetaAPIsApiUpdateTrailer
     */
    readonly updateTrailerRequestBody: TrailersUpdateTrailerRequestBody
}

/**
 * BetaAPIsApi - object-oriented interface
 * @export
 * @class BetaAPIsApi
 * @extends {BaseAPI}
 */
export class BetaAPIsApi extends BaseAPI {
    /**
     * Creates a new attribute in the organization.
     * @summary [beta] Create an attribute
     * @param {BetaAPIsApiCreateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public createAttribute(requestParameters: BetaAPIsApiCreateAttributeRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).createAttribute(requestParameters.attribute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a new trailer asset.
     * @summary [beta] Creates a new trailer asset
     * @param {BetaAPIsApiCreateTrailerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public createTrailer(requestParameters: BetaAPIsApiCreateTrailerRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).createTrailer(requestParameters.createTrailerRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete an attribute by id, including all of its applications.
     * @summary [beta] Deleting an attribute
     * @param {BetaAPIsApiDeleteAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public deleteAttribute(requestParameters: BetaAPIsApiDeleteAttributeRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).deleteAttribute(requestParameters.id, requestParameters.entityType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deletes a single document.
     * @summary [beta] Delete document
     * @param {BetaAPIsApiDeleteDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public deleteDocument(requestParameters: BetaAPIsApiDeleteDocumentRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).deleteDocument(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Deactivate a gateway
     * @summary [beta] Deactivate a gateway
     * @param {BetaAPIsApiDeleteGatewayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public deleteGateway(requestParameters: BetaAPIsApiDeleteGatewayRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).deleteGateway(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a trailer with the given ID.
     * @summary [beta] Delete a trailer
     * @param {BetaAPIsApiDeleteTrailerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public deleteTrailer(requestParameters: BetaAPIsApiDeleteTrailerRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).deleteTrailer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch an attribute by id, including all of its applications.
     * @summary [beta] Retrieve an attribute
     * @param {BetaAPIsApiGetAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getAttribute(requestParameters: BetaAPIsApiGetAttributeRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).getAttribute(requestParameters.id, requestParameters.entityType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch all attributes in an organization associated with either drivers or assets.
     * @summary [beta] List all attributes by entity type
     * @param {BetaAPIsApiGetAttributesByEntityTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getAttributesByEntityType(requestParameters: BetaAPIsApiGetAttributesByEntityTypeRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).getAttributesByEntityType(requestParameters.entityType, requestParameters.limit, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get organization\'s compliance settings, including carrier name, office address, and DOT number
     * @summary [beta] Get compliance settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getComplianceSettings(options?: any) {
        return BetaAPIsApiFp(this.configuration).getComplianceSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single document.
     * @summary [beta] Fetch document
     * @param {BetaAPIsApiGetDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getDocument(requestParameters: BetaAPIsApiGetDocumentRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).getDocument(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of the organization document types.
     * @summary [beta] Fetch document types
     * @param {BetaAPIsApiGetDocumentTypesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getDocumentTypes(requestParameters: BetaAPIsApiGetDocumentTypesRequest = {}, options?: any) {
        return BetaAPIsApiFp(this.configuration).getDocumentTypes(requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all documents for the given time range.
     * @summary [beta] Fetch all documents
     * @param {BetaAPIsApiGetDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getDocuments(requestParameters: BetaAPIsApiGetDocumentsRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).getDocuments(requestParameters.startTime, requestParameters.endTime, requestParameters.after, requestParameters.documentTypeId, requestParameters.queryBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get driver app settings.
     * @summary [beta] Get driver app settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getDriverAppSettings(options?: any) {
        return BetaAPIsApiFp(this.configuration).getDriverAppSettings(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all drivers\' efficiencies.
     * @summary [beta] List driver efficiency
     * @param {BetaAPIsApiGetDriverEfficiencyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getDriverEfficiency(requestParameters: BetaAPIsApiGetDriverEfficiencyRequest = {}, options?: any) {
        return BetaAPIsApiFp(this.configuration).getDriverEfficiency(requestParameters.driverActivationStatus, requestParameters.driverIds, requestParameters.after, requestParameters.driverTagIds, requestParameters.driverParentTagIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all gateways
     * @summary [beta] List all gateways
     * @param {BetaAPIsApiGetGatewaysRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getGateways(requestParameters: BetaAPIsApiGetGatewaysRequest = {}, options?: any) {
        return BetaAPIsApiFp(this.configuration).getGateways(requestParameters.models, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve a trailer with given ID.
     * @summary [beta] Retrieve a trailer
     * @param {BetaAPIsApiGetTrailerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getTrailer(requestParameters: BetaAPIsApiGetTrailerRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).getTrailer(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Follow a feed of trailer stats.  The first call to this endpoint will provide the most recent stats for each trailer and an `endCursor`.  Providing the `endCursor` value to the `after` query parameter will fetch all updates since the previous API call.  If `hasNextPage` is false, no new data is immediately available. Please wait a minimum of 5 seconds before making a subsequent request.
     * @summary [beta] Get trailer stats feed
     * @param {BetaAPIsApiGetTrailerStatsFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getTrailerStatsFeed(requestParameters: BetaAPIsApiGetTrailerStatsFeedRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).getTrailerStatsFeed(requestParameters.types, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.after, requestParameters.trailerIds, requestParameters.decorations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns trailer stats during the given time range for all trailers. This can be optionally filtered by tags or specific trailer IDs.
     * @summary [beta] Get trailer stats history
     * @param {BetaAPIsApiGetTrailerStatsHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getTrailerStatsHistory(requestParameters: BetaAPIsApiGetTrailerStatsHistoryRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).getTrailerStatsHistory(requestParameters.startTime, requestParameters.endTime, requestParameters.types, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.after, requestParameters.trailerIds, requestParameters.decorations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the last known stats of all trailers at the given `time`. If no `time` is specified, the current time is used.
     * @summary [beta] Get trailer stats
     * @param {BetaAPIsApiGetTrailerStatsSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public getTrailerStatsSnapshot(requestParameters: BetaAPIsApiGetTrailerStatsSnapshotRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).getTrailerStatsSnapshot(requestParameters.types, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.after, requestParameters.trailerIds, requestParameters.time, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all trailers.
     * @summary [beta] List all trailers
     * @param {BetaAPIsApiListTrailersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public listTrailers(requestParameters: BetaAPIsApiListTrailersRequest = {}, options?: any) {
        return BetaAPIsApiFp(this.configuration).listTrailers(requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.limit, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update organization\'s compliance settings, including carrier name, office address, and DOT number
     * @summary [beta] Update compliance settings
     * @param {BetaAPIsApiPatchComplianceSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public patchComplianceSettings(requestParameters: BetaAPIsApiPatchComplianceSettingsRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).patchComplianceSettings(requestParameters.patchComplianceSettingsRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update driver app settings.
     * @summary [beta] Update driver app settings
     * @param {BetaAPIsApiPatchDriverAppSettingsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public patchDriverAppSettings(requestParameters: BetaAPIsApiPatchDriverAppSettingsRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).patchDriverAppSettings(requestParameters.patchDriverAppSettingsRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an equipment.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
     * @summary [beta] Update an equipment
     * @param {BetaAPIsApiPatchEquipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public patchEquipment(requestParameters: BetaAPIsApiPatchEquipmentRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).patchEquipment(requestParameters.id, requestParameters.patchEquipmentRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a single document.
     * @summary [beta] Create document
     * @param {BetaAPIsApiPostDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public postDocument(requestParameters: BetaAPIsApiPostDocumentRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).postDocument(requestParameters.postDocumentRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Activate a new gateway. To activate a device and associate it with your organization, enter its serial number. Each device\'s serial number can also be found on its label or packaging, or from your order confirmation email. A Not Found error could mean that the serial was not found or it has already been activated
     * @summary [beta] Activate a new gateway
     * @param {BetaAPIsApiPostGatewayRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public postGateway(requestParameters: BetaAPIsApiPostGatewayRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).postGateway(requestParameters.postGatewayRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an attribute in the organization.
     * @summary [beta] Update an attribute
     * @param {BetaAPIsApiUpdateAttributeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public updateAttribute(requestParameters: BetaAPIsApiUpdateAttributeRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).updateAttribute(requestParameters.id, requestParameters.attribute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the engine immobilizer state of a vehicle. This requires an engine immobilizer to be installed on the vehicle gateway. The desired engine immobilizer state will be set on the vehicle when the vehicle gateway is online, and the engine is not running.
     * @summary [beta] Update engine immobilizer state of a vehicle.
     * @param {BetaAPIsApiUpdateEngineImmobilizerStateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public updateEngineImmobilizerState(requestParameters: BetaAPIsApiUpdateEngineImmobilizerStateRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).updateEngineImmobilizerState(requestParameters.id, requestParameters.updateEngineImmobilizerStateRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a trailer.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array
     * @summary [beta] Update a trailer
     * @param {BetaAPIsApiUpdateTrailerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BetaAPIsApi
     */
    public updateTrailer(requestParameters: BetaAPIsApiUpdateTrailerRequest, options?: any) {
        return BetaAPIsApiFp(this.configuration).updateTrailer(requestParameters.id, requestParameters.updateTrailerRequestBody, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CameraMediaApi - axios parameter creator
 * @export
 */
export const CameraMediaApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all camera media.
         * @summary Get all camera media
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCameraMedia: async (startTime: string, endTime: string, vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getCameraMedia', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getCameraMedia', 'endTime', endTime)
            const localVarPath = `/fleet/vehicles/cameras/media/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (vehicleIds !== undefined) {
                localVarQueryParameter['vehicleIds'] = vehicleIds;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CameraMediaApi - functional programming interface
 * @export
 */
export const CameraMediaApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CameraMediaApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all camera media.
         * @summary Get all camera media
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCameraMedia(startTime: string, endTime: string, vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CameraMediaGetCameraMediaResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCameraMedia(startTime, endTime, vehicleIds, tagIds, parentTagIds, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CameraMediaApi - factory interface
 * @export
 */
export const CameraMediaApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CameraMediaApiFp(configuration)
    return {
        /**
         * Get all camera media.
         * @summary Get all camera media
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCameraMedia(startTime: string, endTime: string, vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options?: any): AxiosPromise<CameraMediaGetCameraMediaResponseBody> {
            return localVarFp.getCameraMedia(startTime, endTime, vehicleIds, tagIds, parentTagIds, after, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCameraMedia operation in CameraMediaApi.
 * @export
 * @interface CameraMediaApiGetCameraMediaRequest
 */
export interface CameraMediaApiGetCameraMediaRequest {
    /**
     *  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof CameraMediaApiGetCameraMedia
     */
    readonly startTime: string

    /**
     *  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof CameraMediaApiGetCameraMedia
     */
    readonly endTime: string

    /**
     *  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
     * @type {string}
     * @memberof CameraMediaApiGetCameraMedia
     */
    readonly vehicleIds?: string

    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof CameraMediaApiGetCameraMedia
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof CameraMediaApiGetCameraMedia
     */
    readonly parentTagIds?: string

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof CameraMediaApiGetCameraMedia
     */
    readonly after?: string
}

/**
 * CameraMediaApi - object-oriented interface
 * @export
 * @class CameraMediaApi
 * @extends {BaseAPI}
 */
export class CameraMediaApi extends BaseAPI {
    /**
     * Get all camera media.
     * @summary Get all camera media
     * @param {CameraMediaApiGetCameraMediaRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CameraMediaApi
     */
    public getCameraMedia(requestParameters: CameraMediaApiGetCameraMediaRequest, options?: any) {
        return CameraMediaApiFp(this.configuration).getCameraMedia(requestParameters.startTime, requestParameters.endTime, requestParameters.vehicleIds, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CarrierProposedAssignmentsApi - axios parameter creator
 * @export
 */
export const CarrierProposedAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new assignment that a driver can later use. Each driver can only have one future assignment.
         * @summary Create an assignment
         * @param {CreateCarrierProposedAssignmentRequest} [carrierProposedAssignment] The assignment to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCarrierProposedAssignment: async (carrierProposedAssignment?: CreateCarrierProposedAssignmentRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/carrier-proposed-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(carrierProposedAssignment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently delete an assignment. You can only delete assignments that are not yet active. To override a currently active assignment, create a new empty one, instead.
         * @summary Delete an assignment
         * @param {string} id ID of the assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCarrierProposedAssignment: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCarrierProposedAssignment', 'id', id)
            const localVarPath = `/fleet/carrier-proposed-assignments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show the assignments that are active for drivers and that would currently be visible to them in the driver app.
         * @summary Retrieve assignments
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] If specified, limits the results to those for these drivers. e.g. &#x60;driverIds&#x3D;1,2,3&#x60;
         * @param {string} [activeTime] If specified, shows assignments that will be active at this time. Defaults to now, which would show current active assignments. In RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarrierProposedAssignments: async (limit?: number, after?: string, driverIds?: Array<string>, activeTime?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/carrier-proposed-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (driverIds) {
                localVarQueryParameter['driverIds'] = driverIds.join(COLLECTION_FORMATS.csv);
            }

            if (activeTime !== undefined) {
                localVarQueryParameter['activeTime'] = activeTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CarrierProposedAssignmentsApi - functional programming interface
 * @export
 */
export const CarrierProposedAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CarrierProposedAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new assignment that a driver can later use. Each driver can only have one future assignment.
         * @summary Create an assignment
         * @param {CreateCarrierProposedAssignmentRequest} [carrierProposedAssignment] The assignment to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCarrierProposedAssignment(carrierProposedAssignment?: CreateCarrierProposedAssignmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CarrierProposedAssignmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCarrierProposedAssignment(carrierProposedAssignment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Permanently delete an assignment. You can only delete assignments that are not yet active. To override a currently active assignment, create a new empty one, instead.
         * @summary Delete an assignment
         * @param {string} id ID of the assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCarrierProposedAssignment(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCarrierProposedAssignment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Show the assignments that are active for drivers and that would currently be visible to them in the driver app.
         * @summary Retrieve assignments
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] If specified, limits the results to those for these drivers. e.g. &#x60;driverIds&#x3D;1,2,3&#x60;
         * @param {string} [activeTime] If specified, shows assignments that will be active at this time. Defaults to now, which would show current active assignments. In RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCarrierProposedAssignments(limit?: number, after?: string, driverIds?: Array<string>, activeTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCarrierProposedAssignmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCarrierProposedAssignments(limit, after, driverIds, activeTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CarrierProposedAssignmentsApi - factory interface
 * @export
 */
export const CarrierProposedAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CarrierProposedAssignmentsApiFp(configuration)
    return {
        /**
         * Creates a new assignment that a driver can later use. Each driver can only have one future assignment.
         * @summary Create an assignment
         * @param {CreateCarrierProposedAssignmentRequest} [carrierProposedAssignment] The assignment to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCarrierProposedAssignment(carrierProposedAssignment?: CreateCarrierProposedAssignmentRequest, options?: any): AxiosPromise<CarrierProposedAssignmentResponse> {
            return localVarFp.createCarrierProposedAssignment(carrierProposedAssignment, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently delete an assignment. You can only delete assignments that are not yet active. To override a currently active assignment, create a new empty one, instead.
         * @summary Delete an assignment
         * @param {string} id ID of the assignment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCarrierProposedAssignment(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteCarrierProposedAssignment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Show the assignments that are active for drivers and that would currently be visible to them in the driver app.
         * @summary Retrieve assignments
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] If specified, limits the results to those for these drivers. e.g. &#x60;driverIds&#x3D;1,2,3&#x60;
         * @param {string} [activeTime] If specified, shows assignments that will be active at this time. Defaults to now, which would show current active assignments. In RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCarrierProposedAssignments(limit?: number, after?: string, driverIds?: Array<string>, activeTime?: string, options?: any): AxiosPromise<ListCarrierProposedAssignmentResponse> {
            return localVarFp.listCarrierProposedAssignments(limit, after, driverIds, activeTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCarrierProposedAssignment operation in CarrierProposedAssignmentsApi.
 * @export
 * @interface CarrierProposedAssignmentsApiCreateCarrierProposedAssignmentRequest
 */
export interface CarrierProposedAssignmentsApiCreateCarrierProposedAssignmentRequest {
    /**
     * The assignment to create.
     * @type {CreateCarrierProposedAssignmentRequest}
     * @memberof CarrierProposedAssignmentsApiCreateCarrierProposedAssignment
     */
    readonly carrierProposedAssignment?: CreateCarrierProposedAssignmentRequest
}

/**
 * Request parameters for deleteCarrierProposedAssignment operation in CarrierProposedAssignmentsApi.
 * @export
 * @interface CarrierProposedAssignmentsApiDeleteCarrierProposedAssignmentRequest
 */
export interface CarrierProposedAssignmentsApiDeleteCarrierProposedAssignmentRequest {
    /**
     * ID of the assignment.
     * @type {string}
     * @memberof CarrierProposedAssignmentsApiDeleteCarrierProposedAssignment
     */
    readonly id: string
}

/**
 * Request parameters for listCarrierProposedAssignments operation in CarrierProposedAssignmentsApi.
 * @export
 * @interface CarrierProposedAssignmentsApiListCarrierProposedAssignmentsRequest
 */
export interface CarrierProposedAssignmentsApiListCarrierProposedAssignmentsRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof CarrierProposedAssignmentsApiListCarrierProposedAssignments
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof CarrierProposedAssignmentsApiListCarrierProposedAssignments
     */
    readonly after?: string

    /**
     * If specified, limits the results to those for these drivers. e.g. &#x60;driverIds&#x3D;1,2,3&#x60;
     * @type {Array<string>}
     * @memberof CarrierProposedAssignmentsApiListCarrierProposedAssignments
     */
    readonly driverIds?: Array<string>

    /**
     * If specified, shows assignments that will be active at this time. Defaults to now, which would show current active assignments. In RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof CarrierProposedAssignmentsApiListCarrierProposedAssignments
     */
    readonly activeTime?: string
}

/**
 * CarrierProposedAssignmentsApi - object-oriented interface
 * @export
 * @class CarrierProposedAssignmentsApi
 * @extends {BaseAPI}
 */
export class CarrierProposedAssignmentsApi extends BaseAPI {
    /**
     * Creates a new assignment that a driver can later use. Each driver can only have one future assignment.
     * @summary Create an assignment
     * @param {CarrierProposedAssignmentsApiCreateCarrierProposedAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierProposedAssignmentsApi
     */
    public createCarrierProposedAssignment(requestParameters: CarrierProposedAssignmentsApiCreateCarrierProposedAssignmentRequest = {}, options?: any) {
        return CarrierProposedAssignmentsApiFp(this.configuration).createCarrierProposedAssignment(requestParameters.carrierProposedAssignment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Permanently delete an assignment. You can only delete assignments that are not yet active. To override a currently active assignment, create a new empty one, instead.
     * @summary Delete an assignment
     * @param {CarrierProposedAssignmentsApiDeleteCarrierProposedAssignmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierProposedAssignmentsApi
     */
    public deleteCarrierProposedAssignment(requestParameters: CarrierProposedAssignmentsApiDeleteCarrierProposedAssignmentRequest, options?: any) {
        return CarrierProposedAssignmentsApiFp(this.configuration).deleteCarrierProposedAssignment(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Show the assignments that are active for drivers and that would currently be visible to them in the driver app.
     * @summary Retrieve assignments
     * @param {CarrierProposedAssignmentsApiListCarrierProposedAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CarrierProposedAssignmentsApi
     */
    public listCarrierProposedAssignments(requestParameters: CarrierProposedAssignmentsApiListCarrierProposedAssignmentsRequest = {}, options?: any) {
        return CarrierProposedAssignmentsApiFp(this.configuration).listCarrierProposedAssignments(requestParameters.limit, requestParameters.after, requestParameters.driverIds, requestParameters.activeTime, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ContactsApi - axios parameter creator
 * @export
 */
export const ContactsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a contact to the organization.
         * @summary Create a contact
         * @param {CreateContactRequest} contact The contact create parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact: async (contact: CreateContactRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contact' is not null or undefined
            assertParamExists('createContact', 'contact', contact)
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contact, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the given contact.
         * @summary Delete a contact
         * @param {string} id Unique identifier for the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContact: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteContact', 'id', id)
            const localVarPath = `/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific contact\'s information.
         * @summary Retrieve a contact
         * @param {string} id Unique identifier for the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContact: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getContact', 'id', id)
            const localVarPath = `/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all contacts in an organization.
         * @summary List all contacts
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContacts: async (limit?: number, after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific contact\'s information.
         * @summary Update a contact
         * @param {string} id Unique identifier for the contact.
         * @param {UpdateContactRequest} contact Updates to the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact: async (id: string, contact: UpdateContactRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateContact', 'id', id)
            // verify required parameter 'contact' is not null or undefined
            assertParamExists('updateContact', 'contact', contact)
            const localVarPath = `/contacts/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(contact, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ContactsApi - functional programming interface
 * @export
 */
export const ContactsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ContactsApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a contact to the organization.
         * @summary Create a contact
         * @param {CreateContactRequest} contact The contact create parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContact(contact: CreateContactRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContact(contact, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete the given contact.
         * @summary Delete a contact
         * @param {string} id Unique identifier for the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteContact(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteContact(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific contact\'s information.
         * @summary Retrieve a contact
         * @param {string} id Unique identifier for the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContact(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContact(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all contacts in an organization.
         * @summary List all contacts
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContacts(limit?: number, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListContactsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContacts(limit, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific contact\'s information.
         * @summary Update a contact
         * @param {string} id Unique identifier for the contact.
         * @param {UpdateContactRequest} contact Updates to the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContact(id: string, contact: UpdateContactRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContactResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContact(id, contact, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ContactsApi - factory interface
 * @export
 */
export const ContactsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ContactsApiFp(configuration)
    return {
        /**
         * Add a contact to the organization.
         * @summary Create a contact
         * @param {CreateContactRequest} contact The contact create parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContact(contact: CreateContactRequest, options?: any): AxiosPromise<ContactResponse> {
            return localVarFp.createContact(contact, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the given contact.
         * @summary Delete a contact
         * @param {string} id Unique identifier for the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteContact(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteContact(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific contact\'s information.
         * @summary Retrieve a contact
         * @param {string} id Unique identifier for the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContact(id: string, options?: any): AxiosPromise<ContactResponse> {
            return localVarFp.getContact(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all contacts in an organization.
         * @summary List all contacts
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContacts(limit?: number, after?: string, options?: any): AxiosPromise<ListContactsResponse> {
            return localVarFp.listContacts(limit, after, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific contact\'s information.
         * @summary Update a contact
         * @param {string} id Unique identifier for the contact.
         * @param {UpdateContactRequest} contact Updates to the contact.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContact(id: string, contact: UpdateContactRequest, options?: any): AxiosPromise<ContactResponse> {
            return localVarFp.updateContact(id, contact, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createContact operation in ContactsApi.
 * @export
 * @interface ContactsApiCreateContactRequest
 */
export interface ContactsApiCreateContactRequest {
    /**
     * The contact create parameters.
     * @type {CreateContactRequest}
     * @memberof ContactsApiCreateContact
     */
    readonly contact: CreateContactRequest
}

/**
 * Request parameters for deleteContact operation in ContactsApi.
 * @export
 * @interface ContactsApiDeleteContactRequest
 */
export interface ContactsApiDeleteContactRequest {
    /**
     * Unique identifier for the contact.
     * @type {string}
     * @memberof ContactsApiDeleteContact
     */
    readonly id: string
}

/**
 * Request parameters for getContact operation in ContactsApi.
 * @export
 * @interface ContactsApiGetContactRequest
 */
export interface ContactsApiGetContactRequest {
    /**
     * Unique identifier for the contact.
     * @type {string}
     * @memberof ContactsApiGetContact
     */
    readonly id: string
}

/**
 * Request parameters for listContacts operation in ContactsApi.
 * @export
 * @interface ContactsApiListContactsRequest
 */
export interface ContactsApiListContactsRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof ContactsApiListContacts
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof ContactsApiListContacts
     */
    readonly after?: string
}

/**
 * Request parameters for updateContact operation in ContactsApi.
 * @export
 * @interface ContactsApiUpdateContactRequest
 */
export interface ContactsApiUpdateContactRequest {
    /**
     * Unique identifier for the contact.
     * @type {string}
     * @memberof ContactsApiUpdateContact
     */
    readonly id: string

    /**
     * Updates to the contact.
     * @type {UpdateContactRequest}
     * @memberof ContactsApiUpdateContact
     */
    readonly contact: UpdateContactRequest
}

/**
 * ContactsApi - object-oriented interface
 * @export
 * @class ContactsApi
 * @extends {BaseAPI}
 */
export class ContactsApi extends BaseAPI {
    /**
     * Add a contact to the organization.
     * @summary Create a contact
     * @param {ContactsApiCreateContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public createContact(requestParameters: ContactsApiCreateContactRequest, options?: any) {
        return ContactsApiFp(this.configuration).createContact(requestParameters.contact, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the given contact.
     * @summary Delete a contact
     * @param {ContactsApiDeleteContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public deleteContact(requestParameters: ContactsApiDeleteContactRequest, options?: any) {
        return ContactsApiFp(this.configuration).deleteContact(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific contact\'s information.
     * @summary Retrieve a contact
     * @param {ContactsApiGetContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public getContact(requestParameters: ContactsApiGetContactRequest, options?: any) {
        return ContactsApiFp(this.configuration).getContact(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all contacts in an organization.
     * @summary List all contacts
     * @param {ContactsApiListContactsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public listContacts(requestParameters: ContactsApiListContactsRequest = {}, options?: any) {
        return ContactsApiFp(this.configuration).listContacts(requestParameters.limit, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific contact\'s information.
     * @summary Update a contact
     * @param {ContactsApiUpdateContactRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ContactsApi
     */
    public updateContact(requestParameters: ContactsApiUpdateContactRequest, options?: any) {
        return ContactsApiFp(this.configuration).updateContact(requestParameters.id, requestParameters.contact, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DocumentsApi - axios parameter creator
 * @export
 */
export const DocumentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Deletes a single document submission by driver.
         * @summary Delete a document
         * @param {number} driverId ID of the driver who submitted the document. Must contain only digits 0-9.
         * @param {string} documentId ID of document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDriverDocumentByIdAndDriverId: async (driverId: number, documentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('deleteDriverDocumentByIdAndDriverId', 'driverId', driverId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('deleteDriverDocumentByIdAndDriverId', 'documentId', documentId)
            const localVarPath = `/v1/fleet/drivers/{driver_id}/documents/{document_id}`
                .replace(`{${"driver_id"}}`, encodeURIComponent(String(driverId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Request creation of a document PDF.
         * @summary Create a document PDF
         * @param {DocumentPdfGenerationRequest} [document] Specifies the document for which to generate a PDF.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDocumentPdf: async (document?: DocumentPdfGenerationRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/documents/pdfs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(document, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns generation job status and download URL for a PDF.
         * @summary Query a document PDF
         * @param {string} id ID of the pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentPdf: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDocumentPdf', 'id', id)
            const localVarPath = `/fleet/documents/pdfs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\">   <nh>     <i class=\"fa fa-exclamation-circle\"></i>     This endpoint is still on our legacy API.   </nh> </n>  Create a driver document for the given driver.  You can create a document in one of two states: \"Required\" or \"Submitted\":  - Setting the document state to \"Submitted\" will submit the document on behalf of the driver. - Setting the document state to \"Required\" will create a pre-populated document for the driver to fill out in the Driver App.  **Populating document fields**  You  populate a document\'s fields according to the document\'s *document type*. You can retrieve document types using the [Fetch document types](ref:v1getdriverdocumenttypesbyorgid) endpoint.  You must populate a document\'s fields using the field *labels* and *value types*, and the fields must be listed in the exact same order that they appear in the document type.  **Omitting Field Values**  If you _omit a field\'s **value**_, Samsara will populate the field with a default value. (Note: you must still list the field in your request). For example, the following request omits the `numberValue` for the `\"Number Field\"`.  ``` {   \"documentTypeUuid\": \"79008acc-56d6-49f4-b5d2-4101ce4b497c\",   \"fields\": [     {       \"label\": \"Number Field\",       \"valueType\": \"ValueType_Number\",     }   ] } ```  Samsara will automatically populate the field with the default for number fields: `0`. See the defaults for all field types below.  > Note: The `dateTimeValue` for `ValueType_DateTime` fields **cannot** be omitted. If you\'d like to populate this field with a default datetime value, you must submit `\"dateTimeValue\": {}` for that field.  **Default Field Values**  | Value Type | Field Name | Default value | | :--------- | :--------- | :------------ | | `ValueType_Number` | `numberValue` | `0` | | `ValueType_String` | `stringValue` | `\"\"` | | `ValueType_Photo` | `photoValue` | `[]` | | `ValueType_MultipleChoice` | `multipleChoiceValue` | `[]` | | `ValueType_DateTime` | `dateTimeValue` | `{\"dateTimeMs\": 0}` | | `ValueType_Signature` | `signatureValue` | `{\"name\": \"Name\", \"signedAtMs\": 0, \"url\": \"\"}` | | `ValueType_Barcode` | `barcodeValue` | `[]` |  > Note: `ValueType_ScannedDocument` fields return `ValueType_Photo`/`photoValue` fields, whose default is listed above.
         * @summary Create a document
         * @param {number} driverId ID of the driver for whom the document is created. Must contain only digits 0-9.
         * @param {V1DocumentCreate} createDocumentParams To create a document for a given document type, provide the &#x60;documentTypeUuid&#x60; of the type of document you\&#39;d like to create. Then, pass in the &#x60;fields&#x60; of the document in the same order that they show up in the given document type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1createDriverDocument: async (driverId: number, createDocumentParams: V1DocumentCreate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('v1createDriverDocument', 'driverId', driverId)
            // verify required parameter 'createDocumentParams' is not null or undefined
            assertParamExists('v1createDriverDocument', 'createDocumentParams', createDocumentParams)
            const localVarPath = `/v1/fleet/drivers/{driver_id}/documents`
                .replace(`{${"driver_id"}}`, encodeURIComponent(String(driverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createDocumentParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetches a single document submission by a specific driver.
         * @summary Fetches a document
         * @param {number} driverId ID of the driver who submitted the document. Must contain only digits 0-9.
         * @param {string} documentId ID of document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getDriverDocumentByIdAndDriverId: async (driverId: number, documentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('v1getDriverDocumentByIdAndDriverId', 'driverId', driverId)
            // verify required parameter 'documentId' is not null or undefined
            assertParamExists('v1getDriverDocumentByIdAndDriverId', 'documentId', documentId)
            const localVarPath = `/v1/fleet/drivers/{driver_id}/documents/{document_id}`
                .replace(`{${"driver_id"}}`, encodeURIComponent(String(driverId)))
                .replace(`{${"document_id"}}`, encodeURIComponent(String(documentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the document types.
         * @summary Fetch document types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getDriverDocumentTypesByOrgId: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/fleet/drivers/document_types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the documents.
         * @summary Fetch all documents
         * @param {number} [endMs] Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
         * @param {number} [durationMs] Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
         * @param {'created' | 'updated'} [queryBy] Retrieve most recent documents based on either driver creation time or driver update time. If no value is provided, the default is &#x60;\&quot;created\&quot;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getDriverDocumentsByOrgId: async (endMs?: number, durationMs?: number, queryBy?: 'created' | 'updated', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/fleet/drivers/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }

            if (durationMs !== undefined) {
                localVarQueryParameter['durationMs'] = durationMs;
            }

            if (queryBy !== undefined) {
                localVarQueryParameter['queryBy'] = queryBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DocumentsApi - functional programming interface
 * @export
 */
export const DocumentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DocumentsApiAxiosParamCreator(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Deletes a single document submission by driver.
         * @summary Delete a document
         * @param {number} driverId ID of the driver who submitted the document. Must contain only digits 0-9.
         * @param {string} documentId ID of document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteDriverDocumentByIdAndDriverId(driverId: number, documentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteDriverDocumentByIdAndDriverId(driverId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Request creation of a document PDF.
         * @summary Create a document PDF
         * @param {DocumentPdfGenerationRequest} [document] Specifies the document for which to generate a PDF.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateDocumentPdf(document?: DocumentPdfGenerationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentPdfGenerationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateDocumentPdf(document, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns generation job status and download URL for a PDF.
         * @summary Query a document PDF
         * @param {string} id ID of the pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDocumentPdf(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DocumentPdfQueryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDocumentPdf(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\">   <nh>     <i class=\"fa fa-exclamation-circle\"></i>     This endpoint is still on our legacy API.   </nh> </n>  Create a driver document for the given driver.  You can create a document in one of two states: \"Required\" or \"Submitted\":  - Setting the document state to \"Submitted\" will submit the document on behalf of the driver. - Setting the document state to \"Required\" will create a pre-populated document for the driver to fill out in the Driver App.  **Populating document fields**  You  populate a document\'s fields according to the document\'s *document type*. You can retrieve document types using the [Fetch document types](ref:v1getdriverdocumenttypesbyorgid) endpoint.  You must populate a document\'s fields using the field *labels* and *value types*, and the fields must be listed in the exact same order that they appear in the document type.  **Omitting Field Values**  If you _omit a field\'s **value**_, Samsara will populate the field with a default value. (Note: you must still list the field in your request). For example, the following request omits the `numberValue` for the `\"Number Field\"`.  ``` {   \"documentTypeUuid\": \"79008acc-56d6-49f4-b5d2-4101ce4b497c\",   \"fields\": [     {       \"label\": \"Number Field\",       \"valueType\": \"ValueType_Number\",     }   ] } ```  Samsara will automatically populate the field with the default for number fields: `0`. See the defaults for all field types below.  > Note: The `dateTimeValue` for `ValueType_DateTime` fields **cannot** be omitted. If you\'d like to populate this field with a default datetime value, you must submit `\"dateTimeValue\": {}` for that field.  **Default Field Values**  | Value Type | Field Name | Default value | | :--------- | :--------- | :------------ | | `ValueType_Number` | `numberValue` | `0` | | `ValueType_String` | `stringValue` | `\"\"` | | `ValueType_Photo` | `photoValue` | `[]` | | `ValueType_MultipleChoice` | `multipleChoiceValue` | `[]` | | `ValueType_DateTime` | `dateTimeValue` | `{\"dateTimeMs\": 0}` | | `ValueType_Signature` | `signatureValue` | `{\"name\": \"Name\", \"signedAtMs\": 0, \"url\": \"\"}` | | `ValueType_Barcode` | `barcodeValue` | `[]` |  > Note: `ValueType_ScannedDocument` fields return `ValueType_Photo`/`photoValue` fields, whose default is listed above.
         * @summary Create a document
         * @param {number} driverId ID of the driver for whom the document is created. Must contain only digits 0-9.
         * @param {V1DocumentCreate} createDocumentParams To create a document for a given document type, provide the &#x60;documentTypeUuid&#x60; of the type of document you\&#39;d like to create. Then, pass in the &#x60;fields&#x60; of the document in the same order that they show up in the given document type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1createDriverDocument(driverId: number, createDocumentParams: V1DocumentCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1createDriverDocument(driverId, createDocumentParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetches a single document submission by a specific driver.
         * @summary Fetches a document
         * @param {number} driverId ID of the driver who submitted the document. Must contain only digits 0-9.
         * @param {string} documentId ID of document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getDriverDocumentByIdAndDriverId(driverId: number, documentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Document>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getDriverDocumentByIdAndDriverId(driverId, documentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the document types.
         * @summary Fetch document types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getDriverDocumentTypesByOrgId(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<V1DocumentType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getDriverDocumentTypesByOrgId(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the documents.
         * @summary Fetch all documents
         * @param {number} [endMs] Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
         * @param {number} [durationMs] Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
         * @param {'created' | 'updated'} [queryBy] Retrieve most recent documents based on either driver creation time or driver update time. If no value is provided, the default is &#x60;\&quot;created\&quot;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getDriverDocumentsByOrgId(endMs?: number, durationMs?: number, queryBy?: 'created' | 'updated', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1Documents>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getDriverDocumentsByOrgId(endMs, durationMs, queryBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DocumentsApi - factory interface
 * @export
 */
export const DocumentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DocumentsApiFp(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Deletes a single document submission by driver.
         * @summary Delete a document
         * @param {number} driverId ID of the driver who submitted the document. Must contain only digits 0-9.
         * @param {string} documentId ID of document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteDriverDocumentByIdAndDriverId(driverId: number, documentId: string, options?: any): AxiosPromise<void> {
            return localVarFp.deleteDriverDocumentByIdAndDriverId(driverId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Request creation of a document PDF.
         * @summary Create a document PDF
         * @param {DocumentPdfGenerationRequest} [document] Specifies the document for which to generate a PDF.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateDocumentPdf(document?: DocumentPdfGenerationRequest, options?: any): AxiosPromise<DocumentPdfGenerationResponse> {
            return localVarFp.generateDocumentPdf(document, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns generation job status and download URL for a PDF.
         * @summary Query a document PDF
         * @param {string} id ID of the pdf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentPdf(id: string, options?: any): AxiosPromise<DocumentPdfQueryResponse> {
            return localVarFp.getDocumentPdf(id, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\">   <nh>     <i class=\"fa fa-exclamation-circle\"></i>     This endpoint is still on our legacy API.   </nh> </n>  Create a driver document for the given driver.  You can create a document in one of two states: \"Required\" or \"Submitted\":  - Setting the document state to \"Submitted\" will submit the document on behalf of the driver. - Setting the document state to \"Required\" will create a pre-populated document for the driver to fill out in the Driver App.  **Populating document fields**  You  populate a document\'s fields according to the document\'s *document type*. You can retrieve document types using the [Fetch document types](ref:v1getdriverdocumenttypesbyorgid) endpoint.  You must populate a document\'s fields using the field *labels* and *value types*, and the fields must be listed in the exact same order that they appear in the document type.  **Omitting Field Values**  If you _omit a field\'s **value**_, Samsara will populate the field with a default value. (Note: you must still list the field in your request). For example, the following request omits the `numberValue` for the `\"Number Field\"`.  ``` {   \"documentTypeUuid\": \"79008acc-56d6-49f4-b5d2-4101ce4b497c\",   \"fields\": [     {       \"label\": \"Number Field\",       \"valueType\": \"ValueType_Number\",     }   ] } ```  Samsara will automatically populate the field with the default for number fields: `0`. See the defaults for all field types below.  > Note: The `dateTimeValue` for `ValueType_DateTime` fields **cannot** be omitted. If you\'d like to populate this field with a default datetime value, you must submit `\"dateTimeValue\": {}` for that field.  **Default Field Values**  | Value Type | Field Name | Default value | | :--------- | :--------- | :------------ | | `ValueType_Number` | `numberValue` | `0` | | `ValueType_String` | `stringValue` | `\"\"` | | `ValueType_Photo` | `photoValue` | `[]` | | `ValueType_MultipleChoice` | `multipleChoiceValue` | `[]` | | `ValueType_DateTime` | `dateTimeValue` | `{\"dateTimeMs\": 0}` | | `ValueType_Signature` | `signatureValue` | `{\"name\": \"Name\", \"signedAtMs\": 0, \"url\": \"\"}` | | `ValueType_Barcode` | `barcodeValue` | `[]` |  > Note: `ValueType_ScannedDocument` fields return `ValueType_Photo`/`photoValue` fields, whose default is listed above.
         * @summary Create a document
         * @param {number} driverId ID of the driver for whom the document is created. Must contain only digits 0-9.
         * @param {V1DocumentCreate} createDocumentParams To create a document for a given document type, provide the &#x60;documentTypeUuid&#x60; of the type of document you\&#39;d like to create. Then, pass in the &#x60;fields&#x60; of the document in the same order that they show up in the given document type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1createDriverDocument(driverId: number, createDocumentParams: V1DocumentCreate, options?: any): AxiosPromise<V1Document> {
            return localVarFp.v1createDriverDocument(driverId, createDocumentParams, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetches a single document submission by a specific driver.
         * @summary Fetches a document
         * @param {number} driverId ID of the driver who submitted the document. Must contain only digits 0-9.
         * @param {string} documentId ID of document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getDriverDocumentByIdAndDriverId(driverId: number, documentId: string, options?: any): AxiosPromise<V1Document> {
            return localVarFp.v1getDriverDocumentByIdAndDriverId(driverId, documentId, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the document types.
         * @summary Fetch document types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getDriverDocumentTypesByOrgId(options?: any): AxiosPromise<Array<V1DocumentType>> {
            return localVarFp.v1getDriverDocumentTypesByOrgId(options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the documents.
         * @summary Fetch all documents
         * @param {number} [endMs] Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
         * @param {number} [durationMs] Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
         * @param {'created' | 'updated'} [queryBy] Retrieve most recent documents based on either driver creation time or driver update time. If no value is provided, the default is &#x60;\&quot;created\&quot;&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getDriverDocumentsByOrgId(endMs?: number, durationMs?: number, queryBy?: 'created' | 'updated', options?: any): AxiosPromise<V1Documents> {
            return localVarFp.v1getDriverDocumentsByOrgId(endMs, durationMs, queryBy, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteDriverDocumentByIdAndDriverId operation in DocumentsApi.
 * @export
 * @interface DocumentsApiDeleteDriverDocumentByIdAndDriverIdRequest
 */
export interface DocumentsApiDeleteDriverDocumentByIdAndDriverIdRequest {
    /**
     * ID of the driver who submitted the document. Must contain only digits 0-9.
     * @type {number}
     * @memberof DocumentsApiDeleteDriverDocumentByIdAndDriverId
     */
    readonly driverId: number

    /**
     * ID of document.
     * @type {string}
     * @memberof DocumentsApiDeleteDriverDocumentByIdAndDriverId
     */
    readonly documentId: string
}

/**
 * Request parameters for generateDocumentPdf operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGenerateDocumentPdfRequest
 */
export interface DocumentsApiGenerateDocumentPdfRequest {
    /**
     * Specifies the document for which to generate a PDF.
     * @type {DocumentPdfGenerationRequest}
     * @memberof DocumentsApiGenerateDocumentPdf
     */
    readonly document?: DocumentPdfGenerationRequest
}

/**
 * Request parameters for getDocumentPdf operation in DocumentsApi.
 * @export
 * @interface DocumentsApiGetDocumentPdfRequest
 */
export interface DocumentsApiGetDocumentPdfRequest {
    /**
     * ID of the pdf.
     * @type {string}
     * @memberof DocumentsApiGetDocumentPdf
     */
    readonly id: string
}

/**
 * Request parameters for v1createDriverDocument operation in DocumentsApi.
 * @export
 * @interface DocumentsApiV1createDriverDocumentRequest
 */
export interface DocumentsApiV1createDriverDocumentRequest {
    /**
     * ID of the driver for whom the document is created. Must contain only digits 0-9.
     * @type {number}
     * @memberof DocumentsApiV1createDriverDocument
     */
    readonly driverId: number

    /**
     * To create a document for a given document type, provide the &#x60;documentTypeUuid&#x60; of the type of document you\&#39;d like to create. Then, pass in the &#x60;fields&#x60; of the document in the same order that they show up in the given document type.
     * @type {V1DocumentCreate}
     * @memberof DocumentsApiV1createDriverDocument
     */
    readonly createDocumentParams: V1DocumentCreate
}

/**
 * Request parameters for v1getDriverDocumentByIdAndDriverId operation in DocumentsApi.
 * @export
 * @interface DocumentsApiV1getDriverDocumentByIdAndDriverIdRequest
 */
export interface DocumentsApiV1getDriverDocumentByIdAndDriverIdRequest {
    /**
     * ID of the driver who submitted the document. Must contain only digits 0-9.
     * @type {number}
     * @memberof DocumentsApiV1getDriverDocumentByIdAndDriverId
     */
    readonly driverId: number

    /**
     * ID of document.
     * @type {string}
     * @memberof DocumentsApiV1getDriverDocumentByIdAndDriverId
     */
    readonly documentId: string
}

/**
 * Request parameters for v1getDriverDocumentsByOrgId operation in DocumentsApi.
 * @export
 * @interface DocumentsApiV1getDriverDocumentsByOrgIdRequest
 */
export interface DocumentsApiV1getDriverDocumentsByOrgIdRequest {
    /**
     * Time in unix milliseconds that represents the oldest documents to return. Used in combination with durationMs. Defaults to now.
     * @type {number}
     * @memberof DocumentsApiV1getDriverDocumentsByOrgId
     */
    readonly endMs?: number

    /**
     * Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
     * @type {number}
     * @memberof DocumentsApiV1getDriverDocumentsByOrgId
     */
    readonly durationMs?: number

    /**
     * Retrieve most recent documents based on either driver creation time or driver update time. If no value is provided, the default is &#x60;\&quot;created\&quot;&#x60;.
     * @type {'created' | 'updated'}
     * @memberof DocumentsApiV1getDriverDocumentsByOrgId
     */
    readonly queryBy?: 'created' | 'updated'
}

/**
 * DocumentsApi - object-oriented interface
 * @export
 * @class DocumentsApi
 * @extends {BaseAPI}
 */
export class DocumentsApi extends BaseAPI {
    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Deletes a single document submission by driver.
     * @summary Delete a document
     * @param {DocumentsApiDeleteDriverDocumentByIdAndDriverIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public deleteDriverDocumentByIdAndDriverId(requestParameters: DocumentsApiDeleteDriverDocumentByIdAndDriverIdRequest, options?: any) {
        return DocumentsApiFp(this.configuration).deleteDriverDocumentByIdAndDriverId(requestParameters.driverId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Request creation of a document PDF.
     * @summary Create a document PDF
     * @param {DocumentsApiGenerateDocumentPdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public generateDocumentPdf(requestParameters: DocumentsApiGenerateDocumentPdfRequest = {}, options?: any) {
        return DocumentsApiFp(this.configuration).generateDocumentPdf(requestParameters.document, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns generation job status and download URL for a PDF.
     * @summary Query a document PDF
     * @param {DocumentsApiGetDocumentPdfRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public getDocumentPdf(requestParameters: DocumentsApiGetDocumentPdfRequest, options?: any) {
        return DocumentsApiFp(this.configuration).getDocumentPdf(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\">   <nh>     <i class=\"fa fa-exclamation-circle\"></i>     This endpoint is still on our legacy API.   </nh> </n>  Create a driver document for the given driver.  You can create a document in one of two states: \"Required\" or \"Submitted\":  - Setting the document state to \"Submitted\" will submit the document on behalf of the driver. - Setting the document state to \"Required\" will create a pre-populated document for the driver to fill out in the Driver App.  **Populating document fields**  You  populate a document\'s fields according to the document\'s *document type*. You can retrieve document types using the [Fetch document types](ref:v1getdriverdocumenttypesbyorgid) endpoint.  You must populate a document\'s fields using the field *labels* and *value types*, and the fields must be listed in the exact same order that they appear in the document type.  **Omitting Field Values**  If you _omit a field\'s **value**_, Samsara will populate the field with a default value. (Note: you must still list the field in your request). For example, the following request omits the `numberValue` for the `\"Number Field\"`.  ``` {   \"documentTypeUuid\": \"79008acc-56d6-49f4-b5d2-4101ce4b497c\",   \"fields\": [     {       \"label\": \"Number Field\",       \"valueType\": \"ValueType_Number\",     }   ] } ```  Samsara will automatically populate the field with the default for number fields: `0`. See the defaults for all field types below.  > Note: The `dateTimeValue` for `ValueType_DateTime` fields **cannot** be omitted. If you\'d like to populate this field with a default datetime value, you must submit `\"dateTimeValue\": {}` for that field.  **Default Field Values**  | Value Type | Field Name | Default value | | :--------- | :--------- | :------------ | | `ValueType_Number` | `numberValue` | `0` | | `ValueType_String` | `stringValue` | `\"\"` | | `ValueType_Photo` | `photoValue` | `[]` | | `ValueType_MultipleChoice` | `multipleChoiceValue` | `[]` | | `ValueType_DateTime` | `dateTimeValue` | `{\"dateTimeMs\": 0}` | | `ValueType_Signature` | `signatureValue` | `{\"name\": \"Name\", \"signedAtMs\": 0, \"url\": \"\"}` | | `ValueType_Barcode` | `barcodeValue` | `[]` |  > Note: `ValueType_ScannedDocument` fields return `ValueType_Photo`/`photoValue` fields, whose default is listed above.
     * @summary Create a document
     * @param {DocumentsApiV1createDriverDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public v1createDriverDocument(requestParameters: DocumentsApiV1createDriverDocumentRequest, options?: any) {
        return DocumentsApiFp(this.configuration).v1createDriverDocument(requestParameters.driverId, requestParameters.createDocumentParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetches a single document submission by a specific driver.
     * @summary Fetches a document
     * @param {DocumentsApiV1getDriverDocumentByIdAndDriverIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public v1getDriverDocumentByIdAndDriverId(requestParameters: DocumentsApiV1getDriverDocumentByIdAndDriverIdRequest, options?: any) {
        return DocumentsApiFp(this.configuration).v1getDriverDocumentByIdAndDriverId(requestParameters.driverId, requestParameters.documentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the document types.
     * @summary Fetch document types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public v1getDriverDocumentTypesByOrgId(options?: any) {
        return DocumentsApiFp(this.configuration).v1getDriverDocumentTypesByOrgId(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all of the documents.
     * @summary Fetch all documents
     * @param {DocumentsApiV1getDriverDocumentsByOrgIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DocumentsApi
     */
    public v1getDriverDocumentsByOrgId(requestParameters: DocumentsApiV1getDriverDocumentsByOrgIdRequest = {}, options?: any) {
        return DocumentsApiFp(this.configuration).v1getDriverDocumentsByOrgId(requestParameters.endMs, requestParameters.durationMs, requestParameters.queryBy, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DriverVehicleAssignmentsApi - axios parameter creator
 * @export
 */
export const DriverVehicleAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all vehicle assignments for the requested drivers in the requested time range. The only type of assignment supported right now are assignments created through the driver app.
         * @summary Get all vehicles assigned to a set of drivers
         * @param {Array<string>} [driverIds]  A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: &#x60;driverIds&#x3D;1234,5678,payroll:4841&#x60;
         * @param {string} [startTime]  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [endTime]  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of driver tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of driver parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversVehicleAssignments: async (driverIds?: Array<string>, startTime?: string, endTime?: string, tagIds?: string, parentTagIds?: string, driverActivationStatus?: 'active' | 'deactivated', after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/drivers/vehicle-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (driverIds) {
                localVarQueryParameter['driverIds'] = driverIds.join(COLLECTION_FORMATS.csv);
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (driverActivationStatus !== undefined) {
                localVarQueryParameter['driverActivationStatus'] = driverActivationStatus;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DriverVehicleAssignmentsApi - functional programming interface
 * @export
 */
export const DriverVehicleAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DriverVehicleAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all vehicle assignments for the requested drivers in the requested time range. The only type of assignment supported right now are assignments created through the driver app.
         * @summary Get all vehicles assigned to a set of drivers
         * @param {Array<string>} [driverIds]  A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: &#x60;driverIds&#x3D;1234,5678,payroll:4841&#x60;
         * @param {string} [startTime]  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [endTime]  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of driver tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of driver parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriversVehicleAssignments(driverIds?: Array<string>, startTime?: string, endTime?: string, tagIds?: string, parentTagIds?: string, driverActivationStatus?: 'active' | 'deactivated', after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriversVehicleAssignmentsGetDriversVehicleAssignmentsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriversVehicleAssignments(driverIds, startTime, endTime, tagIds, parentTagIds, driverActivationStatus, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DriverVehicleAssignmentsApi - factory interface
 * @export
 */
export const DriverVehicleAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DriverVehicleAssignmentsApiFp(configuration)
    return {
        /**
         * Get all vehicle assignments for the requested drivers in the requested time range. The only type of assignment supported right now are assignments created through the driver app.
         * @summary Get all vehicles assigned to a set of drivers
         * @param {Array<string>} [driverIds]  A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: &#x60;driverIds&#x3D;1234,5678,payroll:4841&#x60;
         * @param {string} [startTime]  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [endTime]  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of driver tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of driver parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriversVehicleAssignments(driverIds?: Array<string>, startTime?: string, endTime?: string, tagIds?: string, parentTagIds?: string, driverActivationStatus?: 'active' | 'deactivated', after?: string, options?: any): AxiosPromise<DriversVehicleAssignmentsGetDriversVehicleAssignmentsResponseBody> {
            return localVarFp.getDriversVehicleAssignments(driverIds, startTime, endTime, tagIds, parentTagIds, driverActivationStatus, after, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDriversVehicleAssignments operation in DriverVehicleAssignmentsApi.
 * @export
 * @interface DriverVehicleAssignmentsApiGetDriversVehicleAssignmentsRequest
 */
export interface DriverVehicleAssignmentsApiGetDriversVehicleAssignmentsRequest {
    /**
     *  A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: &#x60;driverIds&#x3D;1234,5678,payroll:4841&#x60;
     * @type {Array<string>}
     * @memberof DriverVehicleAssignmentsApiGetDriversVehicleAssignments
     */
    readonly driverIds?: Array<string>

    /**
     *  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
     * @type {string}
     * @memberof DriverVehicleAssignmentsApiGetDriversVehicleAssignments
     */
    readonly startTime?: string

    /**
     *  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
     * @type {string}
     * @memberof DriverVehicleAssignmentsApiGetDriversVehicleAssignments
     */
    readonly endTime?: string

    /**
     *  A filter on the data based on this comma-separated list of driver tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof DriverVehicleAssignmentsApiGetDriversVehicleAssignments
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of driver parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof DriverVehicleAssignmentsApiGetDriversVehicleAssignments
     */
    readonly parentTagIds?: string

    /**
     * If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
     * @type {'active' | 'deactivated'}
     * @memberof DriverVehicleAssignmentsApiGetDriversVehicleAssignments
     */
    readonly driverActivationStatus?: 'active' | 'deactivated'

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof DriverVehicleAssignmentsApiGetDriversVehicleAssignments
     */
    readonly after?: string
}

/**
 * DriverVehicleAssignmentsApi - object-oriented interface
 * @export
 * @class DriverVehicleAssignmentsApi
 * @extends {BaseAPI}
 */
export class DriverVehicleAssignmentsApi extends BaseAPI {
    /**
     * Get all vehicle assignments for the requested drivers in the requested time range. The only type of assignment supported right now are assignments created through the driver app.
     * @summary Get all vehicles assigned to a set of drivers
     * @param {DriverVehicleAssignmentsApiGetDriversVehicleAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriverVehicleAssignmentsApi
     */
    public getDriversVehicleAssignments(requestParameters: DriverVehicleAssignmentsApiGetDriversVehicleAssignmentsRequest = {}, options?: any) {
        return DriverVehicleAssignmentsApiFp(this.configuration).getDriversVehicleAssignments(requestParameters.driverIds, requestParameters.startTime, requestParameters.endTime, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.driverActivationStatus, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * DriversApi - axios parameter creator
 * @export
 */
export const DriversApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a driver to the organization.
         * @summary Create a driver
         * @param {CreateDriverRequest} driver The driver to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDriver: async (driver: CreateDriverRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'driver' is not null or undefined
            assertParamExists('createDriver', 'driver', driver)
            const localVarPath = `/fleet/drivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(driver, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about a driver.
         * @summary Retrieve a driver
         * @param {string} id ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriver: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getDriver', 'id', id)
            const localVarPath = `/fleet/drivers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all drivers in organization.
         * @summary List all drivers
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [updatedAfterTime] A filter on data to have an updated at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [createdAfterTime] A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDrivers: async (driverActivationStatus?: 'active' | 'deactivated', limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, updatedAfterTime?: string, createdAfterTime?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/drivers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (driverActivationStatus !== undefined) {
                localVarQueryParameter['driverActivationStatus'] = driverActivationStatus;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (updatedAfterTime !== undefined) {
                localVarQueryParameter['updatedAfterTime'] = updatedAfterTime;
            }

            if (createdAfterTime !== undefined) {
                localVarQueryParameter['createdAfterTime'] = createdAfterTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific driver\'s information. This can also be used to activate or de-activate a given driver by setting the driverActivationStatus field. If the driverActivationStatus field is \'deactivated\' then the user can also specify the deactivatedAtTime. The deactivatedAtTime cannot be more than 6 months in the past and must not come before the dirver\'s latest active HOS log. It will be considered an error if deactivatedAtTime is provided with a driverActivationStatus of active.
         * @summary Update a driver
         * @param {string} id ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {UpdateDriverRequest} driver Updates to the driver properties.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDriver: async (id: string, driver: UpdateDriverRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDriver', 'id', id)
            // verify required parameter 'driver' is not null or undefined
            assertParamExists('updateDriver', 'driver', driver)
            const localVarPath = `/fleet/drivers/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(driver, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DriversApi - functional programming interface
 * @export
 */
export const DriversApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DriversApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a driver to the organization.
         * @summary Create a driver
         * @param {CreateDriverRequest} driver The driver to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDriver(driver: CreateDriverRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriverResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDriver(driver, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about a driver.
         * @summary Retrieve a driver
         * @param {string} id ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriver(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriverResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriver(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all drivers in organization.
         * @summary List all drivers
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [updatedAfterTime] A filter on data to have an updated at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [createdAfterTime] A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listDrivers(driverActivationStatus?: 'active' | 'deactivated', limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, updatedAfterTime?: string, createdAfterTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListDriversResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listDrivers(driverActivationStatus, limit, after, parentTagIds, tagIds, updatedAfterTime, createdAfterTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific driver\'s information. This can also be used to activate or de-activate a given driver by setting the driverActivationStatus field. If the driverActivationStatus field is \'deactivated\' then the user can also specify the deactivatedAtTime. The deactivatedAtTime cannot be more than 6 months in the past and must not come before the dirver\'s latest active HOS log. It will be considered an error if deactivatedAtTime is provided with a driverActivationStatus of active.
         * @summary Update a driver
         * @param {string} id ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {UpdateDriverRequest} driver Updates to the driver properties.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDriver(id: string, driver: UpdateDriverRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriverResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDriver(id, driver, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DriversApi - factory interface
 * @export
 */
export const DriversApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DriversApiFp(configuration)
    return {
        /**
         * Add a driver to the organization.
         * @summary Create a driver
         * @param {CreateDriverRequest} driver The driver to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDriver(driver: CreateDriverRequest, options?: any): AxiosPromise<DriverResponse> {
            return localVarFp.createDriver(driver, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about a driver.
         * @summary Retrieve a driver
         * @param {string} id ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriver(id: string, options?: any): AxiosPromise<DriverResponse> {
            return localVarFp.getDriver(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all drivers in organization.
         * @summary List all drivers
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [updatedAfterTime] A filter on data to have an updated at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [createdAfterTime] A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listDrivers(driverActivationStatus?: 'active' | 'deactivated', limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, updatedAfterTime?: string, createdAfterTime?: string, options?: any): AxiosPromise<ListDriversResponse> {
            return localVarFp.listDrivers(driverActivationStatus, limit, after, parentTagIds, tagIds, updatedAfterTime, createdAfterTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific driver\'s information. This can also be used to activate or de-activate a given driver by setting the driverActivationStatus field. If the driverActivationStatus field is \'deactivated\' then the user can also specify the deactivatedAtTime. The deactivatedAtTime cannot be more than 6 months in the past and must not come before the dirver\'s latest active HOS log. It will be considered an error if deactivatedAtTime is provided with a driverActivationStatus of active.
         * @summary Update a driver
         * @param {string} id ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {UpdateDriverRequest} driver Updates to the driver properties.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDriver(id: string, driver: UpdateDriverRequest, options?: any): AxiosPromise<DriverResponse> {
            return localVarFp.updateDriver(id, driver, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDriver operation in DriversApi.
 * @export
 * @interface DriversApiCreateDriverRequest
 */
export interface DriversApiCreateDriverRequest {
    /**
     * The driver to create.
     * @type {CreateDriverRequest}
     * @memberof DriversApiCreateDriver
     */
    readonly driver: CreateDriverRequest
}

/**
 * Request parameters for getDriver operation in DriversApi.
 * @export
 * @interface DriversApiGetDriverRequest
 */
export interface DriversApiGetDriverRequest {
    /**
     * ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
     * @type {string}
     * @memberof DriversApiGetDriver
     */
    readonly id: string
}

/**
 * Request parameters for listDrivers operation in DriversApi.
 * @export
 * @interface DriversApiListDriversRequest
 */
export interface DriversApiListDriversRequest {
    /**
     * If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
     * @type {'active' | 'deactivated'}
     * @memberof DriversApiListDrivers
     */
    readonly driverActivationStatus?: 'active' | 'deactivated'

    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof DriversApiListDrivers
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof DriversApiListDrivers
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof DriversApiListDrivers
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof DriversApiListDrivers
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on data to have an updated at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof DriversApiListDrivers
     */
    readonly updatedAfterTime?: string

    /**
     * A filter on data to have a created at time after or equal to this specified time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof DriversApiListDrivers
     */
    readonly createdAfterTime?: string
}

/**
 * Request parameters for updateDriver operation in DriversApi.
 * @export
 * @interface DriversApiUpdateDriverRequest
 */
export interface DriversApiUpdateDriverRequest {
    /**
     * ID of the driver. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
     * @type {string}
     * @memberof DriversApiUpdateDriver
     */
    readonly id: string

    /**
     * Updates to the driver properties.
     * @type {UpdateDriverRequest}
     * @memberof DriversApiUpdateDriver
     */
    readonly driver: UpdateDriverRequest
}

/**
 * DriversApi - object-oriented interface
 * @export
 * @class DriversApi
 * @extends {BaseAPI}
 */
export class DriversApi extends BaseAPI {
    /**
     * Add a driver to the organization.
     * @summary Create a driver
     * @param {DriversApiCreateDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriversApi
     */
    public createDriver(requestParameters: DriversApiCreateDriverRequest, options?: any) {
        return DriversApiFp(this.configuration).createDriver(requestParameters.driver, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about a driver.
     * @summary Retrieve a driver
     * @param {DriversApiGetDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriversApi
     */
    public getDriver(requestParameters: DriversApiGetDriverRequest, options?: any) {
        return DriversApiFp(this.configuration).getDriver(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all drivers in organization.
     * @summary List all drivers
     * @param {DriversApiListDriversRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriversApi
     */
    public listDrivers(requestParameters: DriversApiListDriversRequest = {}, options?: any) {
        return DriversApiFp(this.configuration).listDrivers(requestParameters.driverActivationStatus, requestParameters.limit, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.updatedAfterTime, requestParameters.createdAfterTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific driver\'s information. This can also be used to activate or de-activate a given driver by setting the driverActivationStatus field. If the driverActivationStatus field is \'deactivated\' then the user can also specify the deactivatedAtTime. The deactivatedAtTime cannot be more than 6 months in the past and must not come before the dirver\'s latest active HOS log. It will be considered an error if deactivatedAtTime is provided with a driverActivationStatus of active.
     * @summary Update a driver
     * @param {DriversApiUpdateDriverRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DriversApi
     */
    public updateDriver(requestParameters: DriversApiUpdateDriverRequest, options?: any) {
        return DriversApiFp(this.configuration).updateDriver(requestParameters.id, requestParameters.driver, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * EquipmentApi - axios parameter creator
 * @export
 */
export const EquipmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves the unit of equipment with the given Samsara ID.
         * @summary Retrieve a unit of equipment
         * @param {string} id Samsara ID of the Equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipment: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getEquipment', 'id', id)
            const localVarPath = `/fleet/equipment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns last known locations for all equipment. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get most recent locations for all equipment
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentLocations: async (after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/equipment/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (equipmentIds) {
                localVarQueryParameter['equipmentIds'] = equipmentIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Follow a continuous feed of all equipment locations from Samsara AG24s.  Your first call to this endpoint will provide you with the most recent location for each unit of equipment and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment location updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. We\'d suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow feed of equipment locations
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentLocationsFeed: async (after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/equipment/locations/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (equipmentIds) {
                localVarQueryParameter['equipmentIds'] = equipmentIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns historical equipment locations during the given time range. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get historical equipment locations
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentLocationsHistory: async (startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getEquipmentLocationsHistory', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getEquipmentLocationsHistory', 'endTime', endTime)
            const localVarPath = `/fleet/equipment/locations/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (equipmentIds) {
                localVarQueryParameter['equipmentIds'] = equipmentIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the last known stats for all equipment. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get most recent stats for all equipment
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentStats: async (types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getEquipmentStats', 'types', types)
            const localVarPath = `/fleet/equipment/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (equipmentIds) {
                localVarQueryParameter['equipmentIds'] = equipmentIds.join(COLLECTION_FORMATS.csv);
            }

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Follow a continuous feed of all equipment stats from Samsara AG24s.  Your first call to this endpoint will provide you with the most recent stats for each unit of equipment and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment stats updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. Each stat type has a different refresh rate, but in general we\'d suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow a feed of equipment stats
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentStatsFeed: async (types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getEquipmentStatsFeed', 'types', types)
            const localVarPath = `/fleet/equipment/stats/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (equipmentIds) {
                localVarQueryParameter['equipmentIds'] = equipmentIds.join(COLLECTION_FORMATS.csv);
            }

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns historical equipment status during the given time range. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get historical equipment stats
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentStatsHistory: async (startTime: string, endTime: string, types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getEquipmentStatsHistory', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getEquipmentStatsHistory', 'endTime', endTime)
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getEquipmentStatsHistory', 'types', types)
            const localVarPath = `/fleet/equipment/stats/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (equipmentIds) {
                localVarQueryParameter['equipmentIds'] = equipmentIds.join(COLLECTION_FORMATS.csv);
            }

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all equipment in an organization. Equipment objects represent powered assets connected to a [Samsara AG24](https://www.samsara.com/products/models/ag24) via an APWR, CAT, or J1939 cable. They are automatically created with a unique Samsara Equipment ID whenever an AG24 is activated in your organization.
         * @summary List all equipment
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEquipment: async (limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/equipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EquipmentApi - functional programming interface
 * @export
 */
export const EquipmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EquipmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves the unit of equipment with the given Samsara ID.
         * @summary Retrieve a unit of equipment
         * @param {string} id Samsara ID of the Equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipment(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipment(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns last known locations for all equipment. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get most recent locations for all equipment
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentLocations(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentLocationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipmentLocations(after, parentTagIds, tagIds, equipmentIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Follow a continuous feed of all equipment locations from Samsara AG24s.  Your first call to this endpoint will provide you with the most recent location for each unit of equipment and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment location updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. We\'d suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow feed of equipment locations
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentLocationsFeed(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentLocationsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipmentLocationsFeed(after, parentTagIds, tagIds, equipmentIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns historical equipment locations during the given time range. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get historical equipment locations
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentLocationsHistory(startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentLocationsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipmentLocationsHistory(startTime, endTime, after, parentTagIds, tagIds, equipmentIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the last known stats for all equipment. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get most recent stats for all equipment
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentStats(types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipmentStats(types, after, parentTagIds, tagIds, equipmentIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Follow a continuous feed of all equipment stats from Samsara AG24s.  Your first call to this endpoint will provide you with the most recent stats for each unit of equipment and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment stats updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. Each stat type has a different refresh rate, but in general we\'d suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow a feed of equipment stats
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentStatsFeed(types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentStatsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipmentStatsFeed(types, after, parentTagIds, tagIds, equipmentIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns historical equipment status during the given time range. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get historical equipment stats
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEquipmentStatsHistory(startTime: string, endTime: string, types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentStatsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEquipmentStatsHistory(startTime, endTime, types, after, parentTagIds, tagIds, equipmentIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all equipment in an organization. Equipment objects represent powered assets connected to a [Samsara AG24](https://www.samsara.com/products/models/ag24) via an APWR, CAT, or J1939 cable. They are automatically created with a unique Samsara Equipment ID whenever an AG24 is activated in your organization.
         * @summary List all equipment
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listEquipment(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EquipmentListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listEquipment(limit, after, parentTagIds, tagIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EquipmentApi - factory interface
 * @export
 */
export const EquipmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EquipmentApiFp(configuration)
    return {
        /**
         * Retrieves the unit of equipment with the given Samsara ID.
         * @summary Retrieve a unit of equipment
         * @param {string} id Samsara ID of the Equipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipment(id: string, options?: any): AxiosPromise<EquipmentResponse> {
            return localVarFp.getEquipment(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns last known locations for all equipment. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get most recent locations for all equipment
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentLocations(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): AxiosPromise<EquipmentLocationsResponse> {
            return localVarFp.getEquipmentLocations(after, parentTagIds, tagIds, equipmentIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Follow a continuous feed of all equipment locations from Samsara AG24s.  Your first call to this endpoint will provide you with the most recent location for each unit of equipment and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment location updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. We\'d suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow feed of equipment locations
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentLocationsFeed(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): AxiosPromise<EquipmentLocationsListResponse> {
            return localVarFp.getEquipmentLocationsFeed(after, parentTagIds, tagIds, equipmentIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns historical equipment locations during the given time range. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get historical equipment locations
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentLocationsHistory(startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): AxiosPromise<EquipmentLocationsListResponse> {
            return localVarFp.getEquipmentLocationsHistory(startTime, endTime, after, parentTagIds, tagIds, equipmentIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the last known stats for all equipment. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get most recent stats for all equipment
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentStats(types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): AxiosPromise<EquipmentStatsResponse> {
            return localVarFp.getEquipmentStats(types, after, parentTagIds, tagIds, equipmentIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Follow a continuous feed of all equipment stats from Samsara AG24s.  Your first call to this endpoint will provide you with the most recent stats for each unit of equipment and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment stats updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. Each stat type has a different refresh rate, but in general we\'d suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow a feed of equipment stats
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentStatsFeed(types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): AxiosPromise<EquipmentStatsListResponse> {
            return localVarFp.getEquipmentStatsFeed(types, after, parentTagIds, tagIds, equipmentIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns historical equipment status during the given time range. This can be optionally filtered by tags or specific equipment IDs.
         * @summary Get historical equipment stats
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>} types The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [equipmentIds] A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEquipmentStatsHistory(startTime: string, endTime: string, types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, equipmentIds?: Array<string>, options?: any): AxiosPromise<EquipmentStatsListResponse> {
            return localVarFp.getEquipmentStatsHistory(startTime, endTime, types, after, parentTagIds, tagIds, equipmentIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all equipment in an organization. Equipment objects represent powered assets connected to a [Samsara AG24](https://www.samsara.com/products/models/ag24) via an APWR, CAT, or J1939 cable. They are automatically created with a unique Samsara Equipment ID whenever an AG24 is activated in your organization.
         * @summary List all equipment
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEquipment(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): AxiosPromise<EquipmentListResponse> {
            return localVarFp.listEquipment(limit, after, parentTagIds, tagIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getEquipment operation in EquipmentApi.
 * @export
 * @interface EquipmentApiGetEquipmentRequest
 */
export interface EquipmentApiGetEquipmentRequest {
    /**
     * Samsara ID of the Equipment.
     * @type {string}
     * @memberof EquipmentApiGetEquipment
     */
    readonly id: string
}

/**
 * Request parameters for getEquipmentLocations operation in EquipmentApi.
 * @export
 * @interface EquipmentApiGetEquipmentLocationsRequest
 */
export interface EquipmentApiGetEquipmentLocationsRequest {
    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof EquipmentApiGetEquipmentLocations
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocations
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocations
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocations
     */
    readonly equipmentIds?: Array<string>
}

/**
 * Request parameters for getEquipmentLocationsFeed operation in EquipmentApi.
 * @export
 * @interface EquipmentApiGetEquipmentLocationsFeedRequest
 */
export interface EquipmentApiGetEquipmentLocationsFeedRequest {
    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof EquipmentApiGetEquipmentLocationsFeed
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocationsFeed
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocationsFeed
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocationsFeed
     */
    readonly equipmentIds?: Array<string>
}

/**
 * Request parameters for getEquipmentLocationsHistory operation in EquipmentApi.
 * @export
 * @interface EquipmentApiGetEquipmentLocationsHistoryRequest
 */
export interface EquipmentApiGetEquipmentLocationsHistoryRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof EquipmentApiGetEquipmentLocationsHistory
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof EquipmentApiGetEquipmentLocationsHistory
     */
    readonly endTime: string

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof EquipmentApiGetEquipmentLocationsHistory
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocationsHistory
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocationsHistory
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentLocationsHistory
     */
    readonly equipmentIds?: Array<string>
}

/**
 * Request parameters for getEquipmentStats operation in EquipmentApi.
 * @export
 * @interface EquipmentApiGetEquipmentStatsRequest
 */
export interface EquipmentApiGetEquipmentStatsRequest {
    /**
     * The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
     * @type {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>}
     * @memberof EquipmentApiGetEquipmentStats
     */
    readonly types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof EquipmentApiGetEquipmentStats
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStats
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStats
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStats
     */
    readonly equipmentIds?: Array<string>
}

/**
 * Request parameters for getEquipmentStatsFeed operation in EquipmentApi.
 * @export
 * @interface EquipmentApiGetEquipmentStatsFeedRequest
 */
export interface EquipmentApiGetEquipmentStatsFeedRequest {
    /**
     * The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
     * @type {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>}
     * @memberof EquipmentApiGetEquipmentStatsFeed
     */
    readonly types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof EquipmentApiGetEquipmentStatsFeed
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStatsFeed
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStatsFeed
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStatsFeed
     */
    readonly equipmentIds?: Array<string>
}

/**
 * Request parameters for getEquipmentStatsHistory operation in EquipmentApi.
 * @export
 * @interface EquipmentApiGetEquipmentStatsHistoryRequest
 */
export interface EquipmentApiGetEquipmentStatsHistoryRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof EquipmentApiGetEquipmentStatsHistory
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof EquipmentApiGetEquipmentStatsHistory
     */
    readonly endTime: string

    /**
     * The type of equipment stat you want to query. Currently, you may only submit one type.  - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;fuelPercents&#x60;: The percent of fuel in the unit of equipment. - &#x60;obdEngineSeconds&#x60;: The number of seconds the engine has been running since it was new. This value is provided directly from on-board diagnostics. - &#x60;gatewayEngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via APWR/AOPEN cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;gatewayJ1939EngineSeconds&#x60;: An approximation of the number of seconds the engine has been running since it was new, based on the amount of time the AG24 device is receiving power via J1939/CAT cable and an offset provided manually through the Samsara cloud dashboard. - &#x60;obdEngineStates&#x60;: The state of the engine read from on-board diagnostics. Can be &#x60;Off&#x60;, &#x60;On&#x60;, or &#x60;Idle&#x60;. - &#x60;gatewayEngineStates&#x60;: An approximation of engine state based on readings the AG24 receives from the aux/digio cable. Can be &#x60;Off&#x60; or &#x60;On&#x60;. - &#x60;gpsOdometerMeters&#x60;: An approximation of odometer reading based on GPS calculations since the AG24 was activated, and a manual odometer offset provided in the Samsara cloud dashboard.
     * @type {Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>}
     * @memberof EquipmentApiGetEquipmentStatsHistory
     */
    readonly types: Array<'gatewayEngineStates' | 'obdEngineStates' | 'fuelPercents' | 'engineRpm' | 'gatewayEngineSeconds' | 'obdEngineSeconds' | 'gatewayJ1939EngineSeconds' | 'gpsOdometerMeters'>

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof EquipmentApiGetEquipmentStatsHistory
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStatsHistory
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStatsHistory
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of equipment IDs. Example: &#x60;equipmentIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiGetEquipmentStatsHistory
     */
    readonly equipmentIds?: Array<string>
}

/**
 * Request parameters for listEquipment operation in EquipmentApi.
 * @export
 * @interface EquipmentApiListEquipmentRequest
 */
export interface EquipmentApiListEquipmentRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof EquipmentApiListEquipment
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof EquipmentApiListEquipment
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiListEquipment
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof EquipmentApiListEquipment
     */
    readonly tagIds?: Array<string>
}

/**
 * EquipmentApi - object-oriented interface
 * @export
 * @class EquipmentApi
 * @extends {BaseAPI}
 */
export class EquipmentApi extends BaseAPI {
    /**
     * Retrieves the unit of equipment with the given Samsara ID.
     * @summary Retrieve a unit of equipment
     * @param {EquipmentApiGetEquipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public getEquipment(requestParameters: EquipmentApiGetEquipmentRequest, options?: any) {
        return EquipmentApiFp(this.configuration).getEquipment(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns last known locations for all equipment. This can be optionally filtered by tags or specific equipment IDs.
     * @summary Get most recent locations for all equipment
     * @param {EquipmentApiGetEquipmentLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public getEquipmentLocations(requestParameters: EquipmentApiGetEquipmentLocationsRequest = {}, options?: any) {
        return EquipmentApiFp(this.configuration).getEquipmentLocations(requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.equipmentIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Follow a continuous feed of all equipment locations from Samsara AG24s.  Your first call to this endpoint will provide you with the most recent location for each unit of equipment and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment location updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. We\'d suggest waiting a minimum of 5 seconds before requesting updates.
     * @summary Follow feed of equipment locations
     * @param {EquipmentApiGetEquipmentLocationsFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public getEquipmentLocationsFeed(requestParameters: EquipmentApiGetEquipmentLocationsFeedRequest = {}, options?: any) {
        return EquipmentApiFp(this.configuration).getEquipmentLocationsFeed(requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.equipmentIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns historical equipment locations during the given time range. This can be optionally filtered by tags or specific equipment IDs.
     * @summary Get historical equipment locations
     * @param {EquipmentApiGetEquipmentLocationsHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public getEquipmentLocationsHistory(requestParameters: EquipmentApiGetEquipmentLocationsHistoryRequest, options?: any) {
        return EquipmentApiFp(this.configuration).getEquipmentLocationsHistory(requestParameters.startTime, requestParameters.endTime, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.equipmentIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the last known stats for all equipment. This can be optionally filtered by tags or specific equipment IDs.
     * @summary Get most recent stats for all equipment
     * @param {EquipmentApiGetEquipmentStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public getEquipmentStats(requestParameters: EquipmentApiGetEquipmentStatsRequest, options?: any) {
        return EquipmentApiFp(this.configuration).getEquipmentStats(requestParameters.types, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.equipmentIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Follow a continuous feed of all equipment stats from Samsara AG24s.  Your first call to this endpoint will provide you with the most recent stats for each unit of equipment and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to subsequent calls via the `after` parameter. The response will contain any equipment stats updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. Each stat type has a different refresh rate, but in general we\'d suggest waiting a minimum of 5 seconds before requesting updates.
     * @summary Follow a feed of equipment stats
     * @param {EquipmentApiGetEquipmentStatsFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public getEquipmentStatsFeed(requestParameters: EquipmentApiGetEquipmentStatsFeedRequest, options?: any) {
        return EquipmentApiFp(this.configuration).getEquipmentStatsFeed(requestParameters.types, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.equipmentIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns historical equipment status during the given time range. This can be optionally filtered by tags or specific equipment IDs.
     * @summary Get historical equipment stats
     * @param {EquipmentApiGetEquipmentStatsHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public getEquipmentStatsHistory(requestParameters: EquipmentApiGetEquipmentStatsHistoryRequest, options?: any) {
        return EquipmentApiFp(this.configuration).getEquipmentStatsHistory(requestParameters.startTime, requestParameters.endTime, requestParameters.types, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.equipmentIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all equipment in an organization. Equipment objects represent powered assets connected to a [Samsara AG24](https://www.samsara.com/products/models/ag24) via an APWR, CAT, or J1939 cable. They are automatically created with a unique Samsara Equipment ID whenever an AG24 is activated in your organization.
     * @summary List all equipment
     * @param {EquipmentApiListEquipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EquipmentApi
     */
    public listEquipment(requestParameters: EquipmentApiListEquipmentRequest = {}, options?: any) {
        return EquipmentApiFp(this.configuration).listEquipment(requestParameters.limit, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * HoursOfServiceApi - axios parameter creator
 * @export
 */
export const HoursOfServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the current HOS status for all drivers. Note that this includes inactive as well as active drivers. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogsSummary).
         * @summary Get HOS clocks
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosClocks: async (tagIds?: Array<string>, parentTagIds?: Array<string>, driverIds?: Array<string>, after?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/hos/clocks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (driverIds) {
                localVarQueryParameter['driverIds'] = driverIds.join(COLLECTION_FORMATS.csv);
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get summarized daily Hours of Service charts for the specified drivers.  The time range for a log is defined by the `driver`\'s `eldDayStartHour`. This value is configurable per driver.  The `startDate` and `endDate` parameters indicate the date range you\'d like to retrieve daily logs for. A daily log will be returned if its `startTime` is on any of the days within in this date range (inclusive of `startDate` and `endDate`).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.  If you are using the legacy version of this endpoint and looking for its documentation, you can find it [here](https://www.samsara.com/api-legacy#operation/getFleetDriversHosDailyLogs).
         * @summary Get all driver HOS daily logs
         * @param {Array<string>} [driverIds]  A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: &#x60;driverIds&#x3D;1234,5678,payroll:4841&#x60;
         * @param {string} [startDate]  A start date in RFC 3339 format. This is a date only without an associated time. Example: &#x60;2019-06-13&#x60;
         * @param {string} [endDate]  An end date in RFC 3339 format. This is a date only without an associated time. Must be greater than or equal to the start date. Example: &#x60;2019-07-21&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {'vehicle'} [expand] Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.  Valid value: &#x60;vehicle&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosDailyLogs: async (driverIds?: Array<string>, startDate?: string, endDate?: string, tagIds?: string, parentTagIds?: string, driverActivationStatus?: 'active' | 'deactivated', after?: string, expand?: 'vehicle', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/hos/daily-logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (driverIds) {
                localVarQueryParameter['driverIds'] = driverIds.join(COLLECTION_FORMATS.csv);
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = endDate;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (driverActivationStatus !== undefined) {
                localVarQueryParameter['driverActivationStatus'] = driverActivationStatus;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns HOS logs between a given `startTime` and `endTime`. The logs can be further filtered using tags or by providing a list of driver IDs (including external IDs). The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogs).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
         * @summary Get HOS logs
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [startTime] A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [endTime] An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosLogs: async (tagIds?: Array<string>, parentTagIds?: Array<string>, driverIds?: Array<string>, startTime?: string, endTime?: string, after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/hos/logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (driverIds) {
                localVarQueryParameter['driverIds'] = driverIds.join(COLLECTION_FORMATS.csv);
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Set an individual driver’s current duty status to \'On Duty\' or \'Off Duty\'.   To ensure compliance with the ELD Mandate, only  authenticated drivers can make direct duty status changes on their own logbook. Any system external to the Samsara Driver App using this endpoint to trigger duty status changes must ensure that such changes are only triggered directly by the driver in question and that the driver has been properly authenticated. This endpoint should not be used to algorithmically trigger duty status changes nor should it be used by personnel besides the driver to trigger duty status changes on the driver’s behalf. Carriers and their drivers are ultimately responsible for maintaining accurate logs and should confirm that their use of the endpoint is compliant with the ELD Mandate.
         * @summary Set a duty status for a specific driver
         * @param {number} driverId ID of the driver for whom the duty status is being set.
         * @param {InlineObject1} [dutyStatusParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentDutyStatus: async (driverId: number, dutyStatusParams?: InlineObject1, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('setCurrentDutyStatus', 'driverId', driverId)
            const localVarPath = `/v1/fleet/drivers/{driver_id}/duty_status`
                .replace(`{${"driver_id"}}`, encodeURIComponent(String(driverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dutyStatusParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
         * @summary Get HOS signin and signout
         * @param {number} driverId Driver ID to query.
         * @param {number} startMs Beginning of the time range, specified in milliseconds UNIX time.
         * @param {number} endMs End of the time range, specified in milliseconds UNIX time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getFleetHosAuthenticationLogs: async (driverId: number, startMs: number, endMs: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('v1getFleetHosAuthenticationLogs', 'driverId', driverId)
            // verify required parameter 'startMs' is not null or undefined
            assertParamExists('v1getFleetHosAuthenticationLogs', 'startMs', startMs)
            // verify required parameter 'endMs' is not null or undefined
            assertParamExists('v1getFleetHosAuthenticationLogs', 'endMs', endMs)
            const localVarPath = `/v1/fleet/hos_authentication_logs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (driverId !== undefined) {
                localVarQueryParameter['driverId'] = driverId;
            }

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * HoursOfServiceApi - functional programming interface
 * @export
 */
export const HoursOfServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = HoursOfServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * Get the current HOS status for all drivers. Note that this includes inactive as well as active drivers. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogsSummary).
         * @summary Get HOS clocks
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHosClocks(tagIds?: Array<string>, parentTagIds?: Array<string>, driverIds?: Array<string>, after?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HosClocksResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHosClocks(tagIds, parentTagIds, driverIds, after, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get summarized daily Hours of Service charts for the specified drivers.  The time range for a log is defined by the `driver`\'s `eldDayStartHour`. This value is configurable per driver.  The `startDate` and `endDate` parameters indicate the date range you\'d like to retrieve daily logs for. A daily log will be returned if its `startTime` is on any of the days within in this date range (inclusive of `startDate` and `endDate`).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.  If you are using the legacy version of this endpoint and looking for its documentation, you can find it [here](https://www.samsara.com/api-legacy#operation/getFleetDriversHosDailyLogs).
         * @summary Get all driver HOS daily logs
         * @param {Array<string>} [driverIds]  A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: &#x60;driverIds&#x3D;1234,5678,payroll:4841&#x60;
         * @param {string} [startDate]  A start date in RFC 3339 format. This is a date only without an associated time. Example: &#x60;2019-06-13&#x60;
         * @param {string} [endDate]  An end date in RFC 3339 format. This is a date only without an associated time. Must be greater than or equal to the start date. Example: &#x60;2019-07-21&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {'vehicle'} [expand] Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.  Valid value: &#x60;vehicle&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHosDailyLogs(driverIds?: Array<string>, startDate?: string, endDate?: string, tagIds?: string, parentTagIds?: string, driverActivationStatus?: 'active' | 'deactivated', after?: string, expand?: 'vehicle', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HosDailyLogsGetHosDailyLogsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHosDailyLogs(driverIds, startDate, endDate, tagIds, parentTagIds, driverActivationStatus, after, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns HOS logs between a given `startTime` and `endTime`. The logs can be further filtered using tags or by providing a list of driver IDs (including external IDs). The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogs).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
         * @summary Get HOS logs
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [startTime] A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [endTime] An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHosLogs(tagIds?: Array<string>, parentTagIds?: Array<string>, driverIds?: Array<string>, startTime?: string, endTime?: string, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HosLogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHosLogs(tagIds, parentTagIds, driverIds, startTime, endTime, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Set an individual driver’s current duty status to \'On Duty\' or \'Off Duty\'.   To ensure compliance with the ELD Mandate, only  authenticated drivers can make direct duty status changes on their own logbook. Any system external to the Samsara Driver App using this endpoint to trigger duty status changes must ensure that such changes are only triggered directly by the driver in question and that the driver has been properly authenticated. This endpoint should not be used to algorithmically trigger duty status changes nor should it be used by personnel besides the driver to trigger duty status changes on the driver’s behalf. Carriers and their drivers are ultimately responsible for maintaining accurate logs and should confirm that their use of the endpoint is compliant with the ELD Mandate.
         * @summary Set a duty status for a specific driver
         * @param {number} driverId ID of the driver for whom the duty status is being set.
         * @param {InlineObject1} [dutyStatusParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setCurrentDutyStatus(driverId: number, dutyStatusParams?: InlineObject1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setCurrentDutyStatus(driverId, dutyStatusParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
         * @summary Get HOS signin and signout
         * @param {number} driverId Driver ID to query.
         * @param {number} startMs Beginning of the time range, specified in milliseconds UNIX time.
         * @param {number} endMs End of the time range, specified in milliseconds UNIX time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getFleetHosAuthenticationLogs(driverId: number, startMs: number, endMs: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1HosAuthenticationLogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getFleetHosAuthenticationLogs(driverId, startMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * HoursOfServiceApi - factory interface
 * @export
 */
export const HoursOfServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = HoursOfServiceApiFp(configuration)
    return {
        /**
         * Get the current HOS status for all drivers. Note that this includes inactive as well as active drivers. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogsSummary).
         * @summary Get HOS clocks
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosClocks(tagIds?: Array<string>, parentTagIds?: Array<string>, driverIds?: Array<string>, after?: string, limit?: number, options?: any): AxiosPromise<HosClocksResponse> {
            return localVarFp.getHosClocks(tagIds, parentTagIds, driverIds, after, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get summarized daily Hours of Service charts for the specified drivers.  The time range for a log is defined by the `driver`\'s `eldDayStartHour`. This value is configurable per driver.  The `startDate` and `endDate` parameters indicate the date range you\'d like to retrieve daily logs for. A daily log will be returned if its `startTime` is on any of the days within in this date range (inclusive of `startDate` and `endDate`).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.  If you are using the legacy version of this endpoint and looking for its documentation, you can find it [here](https://www.samsara.com/api-legacy#operation/getFleetDriversHosDailyLogs).
         * @summary Get all driver HOS daily logs
         * @param {Array<string>} [driverIds]  A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: &#x60;driverIds&#x3D;1234,5678,payroll:4841&#x60;
         * @param {string} [startDate]  A start date in RFC 3339 format. This is a date only without an associated time. Example: &#x60;2019-06-13&#x60;
         * @param {string} [endDate]  An end date in RFC 3339 format. This is a date only without an associated time. Must be greater than or equal to the start date. Example: &#x60;2019-07-21&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {'active' | 'deactivated'} [driverActivationStatus] If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {'vehicle'} [expand] Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.  Valid value: &#x60;vehicle&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosDailyLogs(driverIds?: Array<string>, startDate?: string, endDate?: string, tagIds?: string, parentTagIds?: string, driverActivationStatus?: 'active' | 'deactivated', after?: string, expand?: 'vehicle', options?: any): AxiosPromise<HosDailyLogsGetHosDailyLogsResponseBody> {
            return localVarFp.getHosDailyLogs(driverIds, startDate, endDate, tagIds, parentTagIds, driverActivationStatus, after, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns HOS logs between a given `startTime` and `endTime`. The logs can be further filtered using tags or by providing a list of driver IDs (including external IDs). The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogs).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
         * @summary Get HOS logs
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {string} [startTime] A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [endTime] An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHosLogs(tagIds?: Array<string>, parentTagIds?: Array<string>, driverIds?: Array<string>, startTime?: string, endTime?: string, after?: string, options?: any): AxiosPromise<HosLogsResponse> {
            return localVarFp.getHosLogs(tagIds, parentTagIds, driverIds, startTime, endTime, after, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Set an individual driver’s current duty status to \'On Duty\' or \'Off Duty\'.   To ensure compliance with the ELD Mandate, only  authenticated drivers can make direct duty status changes on their own logbook. Any system external to the Samsara Driver App using this endpoint to trigger duty status changes must ensure that such changes are only triggered directly by the driver in question and that the driver has been properly authenticated. This endpoint should not be used to algorithmically trigger duty status changes nor should it be used by personnel besides the driver to trigger duty status changes on the driver’s behalf. Carriers and their drivers are ultimately responsible for maintaining accurate logs and should confirm that their use of the endpoint is compliant with the ELD Mandate.
         * @summary Set a duty status for a specific driver
         * @param {number} driverId ID of the driver for whom the duty status is being set.
         * @param {InlineObject1} [dutyStatusParams] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setCurrentDutyStatus(driverId: number, dutyStatusParams?: InlineObject1, options?: any): AxiosPromise<void> {
            return localVarFp.setCurrentDutyStatus(driverId, dutyStatusParams, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
         * @summary Get HOS signin and signout
         * @param {number} driverId Driver ID to query.
         * @param {number} startMs Beginning of the time range, specified in milliseconds UNIX time.
         * @param {number} endMs End of the time range, specified in milliseconds UNIX time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getFleetHosAuthenticationLogs(driverId: number, startMs: number, endMs: number, options?: any): AxiosPromise<V1HosAuthenticationLogsResponse> {
            return localVarFp.v1getFleetHosAuthenticationLogs(driverId, startMs, endMs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getHosClocks operation in HoursOfServiceApi.
 * @export
 * @interface HoursOfServiceApiGetHosClocksRequest
 */
export interface HoursOfServiceApiGetHosClocksRequest {
    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof HoursOfServiceApiGetHosClocks
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof HoursOfServiceApiGetHosClocks
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof HoursOfServiceApiGetHosClocks
     */
    readonly driverIds?: Array<string>

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof HoursOfServiceApiGetHosClocks
     */
    readonly after?: string

    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof HoursOfServiceApiGetHosClocks
     */
    readonly limit?: number
}

/**
 * Request parameters for getHosDailyLogs operation in HoursOfServiceApi.
 * @export
 * @interface HoursOfServiceApiGetHosDailyLogsRequest
 */
export interface HoursOfServiceApiGetHosDailyLogsRequest {
    /**
     *  A filter on the data based on this comma-separated list of driver IDs and externalIds. Example: &#x60;driverIds&#x3D;1234,5678,payroll:4841&#x60;
     * @type {Array<string>}
     * @memberof HoursOfServiceApiGetHosDailyLogs
     */
    readonly driverIds?: Array<string>

    /**
     *  A start date in RFC 3339 format. This is a date only without an associated time. Example: &#x60;2019-06-13&#x60;
     * @type {string}
     * @memberof HoursOfServiceApiGetHosDailyLogs
     */
    readonly startDate?: string

    /**
     *  An end date in RFC 3339 format. This is a date only without an associated time. Must be greater than or equal to the start date. Example: &#x60;2019-07-21&#x60;
     * @type {string}
     * @memberof HoursOfServiceApiGetHosDailyLogs
     */
    readonly endDate?: string

    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof HoursOfServiceApiGetHosDailyLogs
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof HoursOfServiceApiGetHosDailyLogs
     */
    readonly parentTagIds?: string

    /**
     * If value is &#x60;deactivated&#x60;, only drivers that are deactivated will appear in the response. This parameter will default to &#x60;active&#x60; if not provided (fetching only active drivers).
     * @type {'active' | 'deactivated'}
     * @memberof HoursOfServiceApiGetHosDailyLogs
     */
    readonly driverActivationStatus?: 'active' | 'deactivated'

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof HoursOfServiceApiGetHosDailyLogs
     */
    readonly after?: string

    /**
     * Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.  Valid value: &#x60;vehicle&#x60;
     * @type {'vehicle'}
     * @memberof HoursOfServiceApiGetHosDailyLogs
     */
    readonly expand?: 'vehicle'
}

/**
 * Request parameters for getHosLogs operation in HoursOfServiceApi.
 * @export
 * @interface HoursOfServiceApiGetHosLogsRequest
 */
export interface HoursOfServiceApiGetHosLogsRequest {
    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof HoursOfServiceApiGetHosLogs
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof HoursOfServiceApiGetHosLogs
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof HoursOfServiceApiGetHosLogs
     */
    readonly driverIds?: Array<string>

    /**
     * A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof HoursOfServiceApiGetHosLogs
     */
    readonly startTime?: string

    /**
     * An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof HoursOfServiceApiGetHosLogs
     */
    readonly endTime?: string

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof HoursOfServiceApiGetHosLogs
     */
    readonly after?: string
}

/**
 * Request parameters for setCurrentDutyStatus operation in HoursOfServiceApi.
 * @export
 * @interface HoursOfServiceApiSetCurrentDutyStatusRequest
 */
export interface HoursOfServiceApiSetCurrentDutyStatusRequest {
    /**
     * ID of the driver for whom the duty status is being set.
     * @type {number}
     * @memberof HoursOfServiceApiSetCurrentDutyStatus
     */
    readonly driverId: number

    /**
     * 
     * @type {InlineObject1}
     * @memberof HoursOfServiceApiSetCurrentDutyStatus
     */
    readonly dutyStatusParams?: InlineObject1
}

/**
 * Request parameters for v1getFleetHosAuthenticationLogs operation in HoursOfServiceApi.
 * @export
 * @interface HoursOfServiceApiV1getFleetHosAuthenticationLogsRequest
 */
export interface HoursOfServiceApiV1getFleetHosAuthenticationLogsRequest {
    /**
     * Driver ID to query.
     * @type {number}
     * @memberof HoursOfServiceApiV1getFleetHosAuthenticationLogs
     */
    readonly driverId: number

    /**
     * Beginning of the time range, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof HoursOfServiceApiV1getFleetHosAuthenticationLogs
     */
    readonly startMs: number

    /**
     * End of the time range, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof HoursOfServiceApiV1getFleetHosAuthenticationLogs
     */
    readonly endMs: number
}

/**
 * HoursOfServiceApi - object-oriented interface
 * @export
 * @class HoursOfServiceApi
 * @extends {BaseAPI}
 */
export class HoursOfServiceApi extends BaseAPI {
    /**
     * Get the current HOS status for all drivers. Note that this includes inactive as well as active drivers. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogsSummary).
     * @summary Get HOS clocks
     * @param {HoursOfServiceApiGetHosClocksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HoursOfServiceApi
     */
    public getHosClocks(requestParameters: HoursOfServiceApiGetHosClocksRequest = {}, options?: any) {
        return HoursOfServiceApiFp(this.configuration).getHosClocks(requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.driverIds, requestParameters.after, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get summarized daily Hours of Service charts for the specified drivers.  The time range for a log is defined by the `driver`\'s `eldDayStartHour`. This value is configurable per driver.  The `startDate` and `endDate` parameters indicate the date range you\'d like to retrieve daily logs for. A daily log will be returned if its `startTime` is on any of the days within in this date range (inclusive of `startDate` and `endDate`).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.  If you are using the legacy version of this endpoint and looking for its documentation, you can find it [here](https://www.samsara.com/api-legacy#operation/getFleetDriversHosDailyLogs).
     * @summary Get all driver HOS daily logs
     * @param {HoursOfServiceApiGetHosDailyLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HoursOfServiceApi
     */
    public getHosDailyLogs(requestParameters: HoursOfServiceApiGetHosDailyLogsRequest = {}, options?: any) {
        return HoursOfServiceApiFp(this.configuration).getHosDailyLogs(requestParameters.driverIds, requestParameters.startDate, requestParameters.endDate, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.driverActivationStatus, requestParameters.after, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns HOS logs between a given `startTime` and `endTime`. The logs can be further filtered using tags or by providing a list of driver IDs (including external IDs). The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getFleetHosLogs).  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
     * @summary Get HOS logs
     * @param {HoursOfServiceApiGetHosLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HoursOfServiceApi
     */
    public getHosLogs(requestParameters: HoursOfServiceApiGetHosLogsRequest = {}, options?: any) {
        return HoursOfServiceApiFp(this.configuration).getHosLogs(requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.driverIds, requestParameters.startTime, requestParameters.endTime, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Set an individual driver’s current duty status to \'On Duty\' or \'Off Duty\'.   To ensure compliance with the ELD Mandate, only  authenticated drivers can make direct duty status changes on their own logbook. Any system external to the Samsara Driver App using this endpoint to trigger duty status changes must ensure that such changes are only triggered directly by the driver in question and that the driver has been properly authenticated. This endpoint should not be used to algorithmically trigger duty status changes nor should it be used by personnel besides the driver to trigger duty status changes on the driver’s behalf. Carriers and their drivers are ultimately responsible for maintaining accurate logs and should confirm that their use of the endpoint is compliant with the ELD Mandate.
     * @summary Set a duty status for a specific driver
     * @param {HoursOfServiceApiSetCurrentDutyStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HoursOfServiceApi
     */
    public setCurrentDutyStatus(requestParameters: HoursOfServiceApiSetCurrentDutyStatusRequest, options?: any) {
        return HoursOfServiceApiFp(this.configuration).setCurrentDutyStatus(requestParameters.driverId, requestParameters.dutyStatusParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get the HOS (hours of service) signin and signout logs for the specified driver. The response includes 4 fields that are now deprecated.  **Note:** If data is still being uploaded from the Samsara Driver App, it may not be completely reflected in the response from this endpoint. The best practice is to wait a couple of days before querying this endpoint to make sure that all data from the Samsara Driver App has been uploaded.
     * @summary Get HOS signin and signout
     * @param {HoursOfServiceApiV1getFleetHosAuthenticationLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HoursOfServiceApi
     */
    public v1getFleetHosAuthenticationLogs(requestParameters: HoursOfServiceApiV1getFleetHosAuthenticationLogsRequest, options?: any) {
        return HoursOfServiceApiFp(this.configuration).v1getFleetHosAuthenticationLogs(requestParameters.driverId, requestParameters.startMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IFTAApi - axios parameter creator
 * @export
 */
export const IFTAApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all jurisdiction IFTA reports for the requested time duration. Data is returned in your organization\'s defined timezone.
         * @summary Get IFTA jurisdiction reports.
         * @param {number} year  The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: &#x60;year&#x3D;2021&#x60;
         * @param {'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'} [month]  The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: &#x60;month&#x3D;January&#x60;
         * @param {'Q1' | 'Q2' | 'Q3' | 'Q4'} [quarter]  The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: &#x60;quarter&#x3D;Q1&#x60;
         * @param {string} [jurisdictions]  A filter on the data based on this comma-separated list of jurisdictions. Example: &#x60;jurisdictions&#x3D;GA&#x60;
         * @param {'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'} [fuelType]  A filter on the data based on this comma-separated list of IFTA fuel types. Example: &#x60;fuelType&#x3D;Diesel&#x60;
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIftaJurisdictionReports: async (year: number, month?: 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December', quarter?: 'Q1' | 'Q2' | 'Q3' | 'Q4', jurisdictions?: string, fuelType?: 'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other', vehicleIds?: string, tagIds?: string, parentTagIds?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getIftaJurisdictionReports', 'year', year)
            const localVarPath = `/fleet/reports/ifta/jurisdiction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (quarter !== undefined) {
                localVarQueryParameter['quarter'] = quarter;
            }

            if (jurisdictions !== undefined) {
                localVarQueryParameter['jurisdictions'] = jurisdictions;
            }

            if (fuelType !== undefined) {
                localVarQueryParameter['fuelType'] = fuelType;
            }

            if (vehicleIds !== undefined) {
                localVarQueryParameter['vehicleIds'] = vehicleIds;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all vehicle IFTA reports for the requested time duration. Data is returned in your organization\'s defined timezone.
         * @summary Get IFTA vehicle reports.
         * @param {number} year  The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: &#x60;year&#x3D;2021&#x60;
         * @param {'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'} [month]  The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: &#x60;month&#x3D;January&#x60;
         * @param {'Q1' | 'Q2' | 'Q3' | 'Q4'} [quarter]  The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: &#x60;quarter&#x3D;Q1&#x60;
         * @param {string} [jurisdictions]  A filter on the data based on this comma-separated list of jurisdictions. Example: &#x60;jurisdictions&#x3D;GA&#x60;
         * @param {'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'} [fuelType]  A filter on the data based on this comma-separated list of IFTA fuel types. Example: &#x60;fuelType&#x3D;Diesel&#x60;
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIftaVehicleReports: async (year: number, month?: 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December', quarter?: 'Q1' | 'Q2' | 'Q3' | 'Q4', jurisdictions?: string, fuelType?: 'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other', vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('getIftaVehicleReports', 'year', year)
            const localVarPath = `/fleet/reports/ifta/vehicle`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (year !== undefined) {
                localVarQueryParameter['year'] = year;
            }

            if (month !== undefined) {
                localVarQueryParameter['month'] = month;
            }

            if (quarter !== undefined) {
                localVarQueryParameter['quarter'] = quarter;
            }

            if (jurisdictions !== undefined) {
                localVarQueryParameter['jurisdictions'] = jurisdictions;
            }

            if (fuelType !== undefined) {
                localVarQueryParameter['fuelType'] = fuelType;
            }

            if (vehicleIds !== undefined) {
                localVarQueryParameter['vehicleIds'] = vehicleIds;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IFTAApi - functional programming interface
 * @export
 */
export const IFTAApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IFTAApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all jurisdiction IFTA reports for the requested time duration. Data is returned in your organization\'s defined timezone.
         * @summary Get IFTA jurisdiction reports.
         * @param {number} year  The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: &#x60;year&#x3D;2021&#x60;
         * @param {'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'} [month]  The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: &#x60;month&#x3D;January&#x60;
         * @param {'Q1' | 'Q2' | 'Q3' | 'Q4'} [quarter]  The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: &#x60;quarter&#x3D;Q1&#x60;
         * @param {string} [jurisdictions]  A filter on the data based on this comma-separated list of jurisdictions. Example: &#x60;jurisdictions&#x3D;GA&#x60;
         * @param {'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'} [fuelType]  A filter on the data based on this comma-separated list of IFTA fuel types. Example: &#x60;fuelType&#x3D;Diesel&#x60;
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIftaJurisdictionReports(year: number, month?: 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December', quarter?: 'Q1' | 'Q2' | 'Q3' | 'Q4', jurisdictions?: string, fuelType?: 'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other', vehicleIds?: string, tagIds?: string, parentTagIds?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IFTAGetIftaJurisdictionReportsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIftaJurisdictionReports(year, month, quarter, jurisdictions, fuelType, vehicleIds, tagIds, parentTagIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all vehicle IFTA reports for the requested time duration. Data is returned in your organization\'s defined timezone.
         * @summary Get IFTA vehicle reports.
         * @param {number} year  The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: &#x60;year&#x3D;2021&#x60;
         * @param {'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'} [month]  The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: &#x60;month&#x3D;January&#x60;
         * @param {'Q1' | 'Q2' | 'Q3' | 'Q4'} [quarter]  The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: &#x60;quarter&#x3D;Q1&#x60;
         * @param {string} [jurisdictions]  A filter on the data based on this comma-separated list of jurisdictions. Example: &#x60;jurisdictions&#x3D;GA&#x60;
         * @param {'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'} [fuelType]  A filter on the data based on this comma-separated list of IFTA fuel types. Example: &#x60;fuelType&#x3D;Diesel&#x60;
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIftaVehicleReports(year: number, month?: 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December', quarter?: 'Q1' | 'Q2' | 'Q3' | 'Q4', jurisdictions?: string, fuelType?: 'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other', vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IFTAGetIftaVehicleReportsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIftaVehicleReports(year, month, quarter, jurisdictions, fuelType, vehicleIds, tagIds, parentTagIds, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IFTAApi - factory interface
 * @export
 */
export const IFTAApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IFTAApiFp(configuration)
    return {
        /**
         * Get all jurisdiction IFTA reports for the requested time duration. Data is returned in your organization\'s defined timezone.
         * @summary Get IFTA jurisdiction reports.
         * @param {number} year  The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: &#x60;year&#x3D;2021&#x60;
         * @param {'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'} [month]  The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: &#x60;month&#x3D;January&#x60;
         * @param {'Q1' | 'Q2' | 'Q3' | 'Q4'} [quarter]  The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: &#x60;quarter&#x3D;Q1&#x60;
         * @param {string} [jurisdictions]  A filter on the data based on this comma-separated list of jurisdictions. Example: &#x60;jurisdictions&#x3D;GA&#x60;
         * @param {'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'} [fuelType]  A filter on the data based on this comma-separated list of IFTA fuel types. Example: &#x60;fuelType&#x3D;Diesel&#x60;
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIftaJurisdictionReports(year: number, month?: 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December', quarter?: 'Q1' | 'Q2' | 'Q3' | 'Q4', jurisdictions?: string, fuelType?: 'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other', vehicleIds?: string, tagIds?: string, parentTagIds?: string, options?: any): AxiosPromise<IFTAGetIftaJurisdictionReportsResponseBody> {
            return localVarFp.getIftaJurisdictionReports(year, month, quarter, jurisdictions, fuelType, vehicleIds, tagIds, parentTagIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all vehicle IFTA reports for the requested time duration. Data is returned in your organization\'s defined timezone.
         * @summary Get IFTA vehicle reports.
         * @param {number} year  The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: &#x60;year&#x3D;2021&#x60;
         * @param {'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'} [month]  The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: &#x60;month&#x3D;January&#x60;
         * @param {'Q1' | 'Q2' | 'Q3' | 'Q4'} [quarter]  The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: &#x60;quarter&#x3D;Q1&#x60;
         * @param {string} [jurisdictions]  A filter on the data based on this comma-separated list of jurisdictions. Example: &#x60;jurisdictions&#x3D;GA&#x60;
         * @param {'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'} [fuelType]  A filter on the data based on this comma-separated list of IFTA fuel types. Example: &#x60;fuelType&#x3D;Diesel&#x60;
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIftaVehicleReports(year: number, month?: 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December', quarter?: 'Q1' | 'Q2' | 'Q3' | 'Q4', jurisdictions?: string, fuelType?: 'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other', vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options?: any): AxiosPromise<IFTAGetIftaVehicleReportsResponseBody> {
            return localVarFp.getIftaVehicleReports(year, month, quarter, jurisdictions, fuelType, vehicleIds, tagIds, parentTagIds, after, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getIftaJurisdictionReports operation in IFTAApi.
 * @export
 * @interface IFTAApiGetIftaJurisdictionReportsRequest
 */
export interface IFTAApiGetIftaJurisdictionReportsRequest {
    /**
     *  The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: &#x60;year&#x3D;2021&#x60;
     * @type {number}
     * @memberof IFTAApiGetIftaJurisdictionReports
     */
    readonly year: number

    /**
     *  The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: &#x60;month&#x3D;January&#x60;
     * @type {'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'}
     * @memberof IFTAApiGetIftaJurisdictionReports
     */
    readonly month?: 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'

    /**
     *  The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: &#x60;quarter&#x3D;Q1&#x60;
     * @type {'Q1' | 'Q2' | 'Q3' | 'Q4'}
     * @memberof IFTAApiGetIftaJurisdictionReports
     */
    readonly quarter?: 'Q1' | 'Q2' | 'Q3' | 'Q4'

    /**
     *  A filter on the data based on this comma-separated list of jurisdictions. Example: &#x60;jurisdictions&#x3D;GA&#x60;
     * @type {string}
     * @memberof IFTAApiGetIftaJurisdictionReports
     */
    readonly jurisdictions?: string

    /**
     *  A filter on the data based on this comma-separated list of IFTA fuel types. Example: &#x60;fuelType&#x3D;Diesel&#x60;
     * @type {'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'}
     * @memberof IFTAApiGetIftaJurisdictionReports
     */
    readonly fuelType?: 'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'

    /**
     *  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
     * @type {string}
     * @memberof IFTAApiGetIftaJurisdictionReports
     */
    readonly vehicleIds?: string

    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof IFTAApiGetIftaJurisdictionReports
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof IFTAApiGetIftaJurisdictionReports
     */
    readonly parentTagIds?: string
}

/**
 * Request parameters for getIftaVehicleReports operation in IFTAApi.
 * @export
 * @interface IFTAApiGetIftaVehicleReportsRequest
 */
export interface IFTAApiGetIftaVehicleReportsRequest {
    /**
     *  The year of the requested IFTA report summary. Must be provided with a month or quarter param. Example: &#x60;year&#x3D;2021&#x60;
     * @type {number}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly year: number

    /**
     *  The month of the requested IFTA report summary. Can not be provided with the quarter param. Example: &#x60;month&#x3D;January&#x60;
     * @type {'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly month?: 'January' | 'February' | 'March' | 'April' | 'May' | 'June' | 'July' | 'August' | 'September' | 'October' | 'November' | 'December'

    /**
     *  The quarter of the requested IFTA report summary. Can not be provided with the month param. Q1: January, February, March. Q2: April, May, June. Q3: July, August, September. Q4: October, November, December. Example: &#x60;quarter&#x3D;Q1&#x60;
     * @type {'Q1' | 'Q2' | 'Q3' | 'Q4'}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly quarter?: 'Q1' | 'Q2' | 'Q3' | 'Q4'

    /**
     *  A filter on the data based on this comma-separated list of jurisdictions. Example: &#x60;jurisdictions&#x3D;GA&#x60;
     * @type {string}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly jurisdictions?: string

    /**
     *  A filter on the data based on this comma-separated list of IFTA fuel types. Example: &#x60;fuelType&#x3D;Diesel&#x60;
     * @type {'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly fuelType?: 'Unspecified' | 'A55' | 'Biodiesel' | 'CompressedNaturalGas' | 'Diesel' | 'E85' | 'Electricity' | 'Ethanol' | 'Gasohol' | 'Gasoline' | 'Hydrogen' | 'LiquifiedNaturalGas' | 'M85' | 'Methanol' | 'Propane' | 'Other'

    /**
     *  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
     * @type {string}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly vehicleIds?: string

    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly parentTagIds?: string

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof IFTAApiGetIftaVehicleReports
     */
    readonly after?: string
}

/**
 * IFTAApi - object-oriented interface
 * @export
 * @class IFTAApi
 * @extends {BaseAPI}
 */
export class IFTAApi extends BaseAPI {
    /**
     * Get all jurisdiction IFTA reports for the requested time duration. Data is returned in your organization\'s defined timezone.
     * @summary Get IFTA jurisdiction reports.
     * @param {IFTAApiGetIftaJurisdictionReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IFTAApi
     */
    public getIftaJurisdictionReports(requestParameters: IFTAApiGetIftaJurisdictionReportsRequest, options?: any) {
        return IFTAApiFp(this.configuration).getIftaJurisdictionReports(requestParameters.year, requestParameters.month, requestParameters.quarter, requestParameters.jurisdictions, requestParameters.fuelType, requestParameters.vehicleIds, requestParameters.tagIds, requestParameters.parentTagIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all vehicle IFTA reports for the requested time duration. Data is returned in your organization\'s defined timezone.
     * @summary Get IFTA vehicle reports.
     * @param {IFTAApiGetIftaVehicleReportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IFTAApi
     */
    public getIftaVehicleReports(requestParameters: IFTAApiGetIftaVehicleReportsRequest, options?: any) {
        return IFTAApiFp(this.configuration).getIftaVehicleReports(requestParameters.year, requestParameters.month, requestParameters.quarter, requestParameters.jurisdictions, requestParameters.fuelType, requestParameters.vehicleIds, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * IndustrialApi - axios parameter creator
 * @export
 */
export const IndustrialApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an asset with optional configuration parameters.
         * @summary Create an asset
         * @param {AssetCreate} [asset] The asset to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndustrialAsset: async (asset?: AssetCreate, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/industrial/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(asset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete asset.
         * @summary Delete an existing asset
         * @param {string} id Id of the asset to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIndustrialAsset: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteIndustrialAsset', 'id', id)
            const localVarPath = `/industrial/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Follow a continuous feed of all data input data points.  Your first call to this endpoint will provide you with the most recent data points for each data input and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to the `after` parameter of this endpoint to get data point updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. We suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow a real-time feed of data points for data inputs
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataInputDataFeed: async (after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/industrial/data-inputs/data-points/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (dataInputIds) {
                localVarQueryParameter['dataInputIds'] = dataInputIds.join(COLLECTION_FORMATS.csv);
            }

            if (assetIds) {
                localVarQueryParameter['assetIds'] = assetIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all known data points during the given time range for all data inputs. This can be filtered by optional tags, specific data input IDs or asset IDs.
         * @summary List historical data points for data inputs
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataInputDataHistory: async (startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDataInputDataHistory', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDataInputDataHistory', 'endTime', endTime)
            const localVarPath = `/industrial/data-inputs/data-points/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (dataInputIds) {
                localVarQueryParameter['dataInputIds'] = dataInputIds.join(COLLECTION_FORMATS.csv);
            }

            if (assetIds) {
                localVarQueryParameter['assetIds'] = assetIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns last known data points for all data inputs. This can be filtered by optional tags, specific data input IDs or asset IDs.
         * @summary List most recent data points for data inputs
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataInputDataSnapshot: async (after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/industrial/data-inputs/data-points`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (dataInputIds) {
                localVarQueryParameter['dataInputIds'] = dataInputIds.join(COLLECTION_FORMATS.csv);
            }

            if (assetIds) {
                localVarQueryParameter['assetIds'] = assetIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all data inputs, optionally filtered by tags or asset ids.
         * @summary List all data inputs
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataInputs: async (limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, assetIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/industrial/data-inputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (assetIds) {
                localVarQueryParameter['assetIds'] = assetIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all assets in the organization.
         * @summary List all assets
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndustrialAssets: async (limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, assetIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/industrial/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (assetIds) {
                localVarQueryParameter['assetIds'] = assetIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs by camera.
         * @summary Fetch runs by camera
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} durationMs DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched
         * @param {number} [endMs] EndMs is an optional param. It will default to the current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisionRunsByCamera: async (cameraId: number, durationMs: number, endMs?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('getVisionRunsByCamera', 'cameraId', cameraId)
            // verify required parameter 'durationMs' is not null or undefined
            assertParamExists('getVisionRunsByCamera', 'durationMs', durationMs)
            const localVarPath = `/v1/industrial/vision/runs/{camera_id}`
                .replace(`{${"camera_id"}}`, encodeURIComponent(String(cameraId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (durationMs !== undefined) {
                localVarQueryParameter['durationMs'] = durationMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Writes values to multiple data outputs on an asset simultaneously. Only the provided data outputs will be updated.
         * @summary Writes to data outputs on an asset
         * @param {string} id Asset ID
         * @param {AssetDataOutputsPatchAssetDataOutputsRequestBody} patchAssetDataOutputsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetDataOutputs: async (id: string, patchAssetDataOutputsRequestBody: AssetDataOutputsPatchAssetDataOutputsRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchAssetDataOutputs', 'id', id)
            // verify required parameter 'patchAssetDataOutputsRequestBody' is not null or undefined
            assertParamExists('patchAssetDataOutputs', 'patchAssetDataOutputsRequestBody', patchAssetDataOutputsRequestBody)
            const localVarPath = `/industrial/assets/{id}/data-outputs`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchAssetDataOutputsRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing asset. Only the provided fields will be updated.
         * @summary Update an asset
         * @param {string} id Id of the asset to be updated
         * @param {AssetPatch} [asset] The updated asset fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIndustrialAsset: async (id: string, asset?: AssetPatch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchIndustrialAsset', 'id', id)
            const localVarPath = `/industrial/assets/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(asset, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all cameras.
         * @summary Fetch industrial cameras
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getCameras: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/industrial/vision/cameras`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
         * @summary Get machines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getMachines: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/machines/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for machine objects. This method returns a set of historical data for all machines.
         * @summary Get machine history
         * @param {InlineObject3} historyParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getMachinesHistory: async (historyParam: InlineObject3, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyParam' is not null or undefined
            assertParamExists('v1getMachinesHistory', 'historyParam', historyParam)
            const localVarPath = `/v1/machines/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(historyParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch the latest run for a camera or program by default. If startedAtMs is supplied, fetch the specific run that corresponds to that start time.
         * @summary Fetch the latest run for a camera or program
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} [programId] The configured program\&#39;s ID on the camera.
         * @param {number} [startedAtMs] EndMs is an optional param. It will default to the current time.
         * @param {string} [include] Include is a filter parameter. Accepts \&#39;pass\&#39;, \&#39;reject\&#39; or \&#39;no_read\&#39;.
         * @param {number} [limit] Limit is an integer value from 1 to 1,000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVisionLatestRunCamera: async (cameraId: number, programId?: number, startedAtMs?: number, include?: string, limit?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('v1getVisionLatestRunCamera', 'cameraId', cameraId)
            const localVarPath = `/v1/industrial/vision/run/camera/{camera_id}`
                .replace(`{${"camera_id"}}`, encodeURIComponent(String(cameraId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (programId !== undefined) {
                localVarQueryParameter['program_id'] = programId;
            }

            if (startedAtMs !== undefined) {
                localVarQueryParameter['startedAtMs'] = startedAtMs;
            }

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch configured programs on the camera.
         * @summary Fetch industrial camera programs
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVisionProgramsByCamera: async (cameraId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('v1getVisionProgramsByCamera', 'cameraId', cameraId)
            const localVarPath = `/v1/industrial/vision/cameras/{camera_id}/programs`
                .replace(`{${"camera_id"}}`, encodeURIComponent(String(cameraId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs.
         * @summary Fetch runs
         * @param {number} durationMs DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched
         * @param {number} [endMs] EndMs is an optional param. It will default to the current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVisionRuns: async (durationMs: number, endMs?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'durationMs' is not null or undefined
            assertParamExists('v1getVisionRuns', 'durationMs', durationMs)
            const localVarPath = `/v1/industrial/vision/runs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (durationMs !== undefined) {
                localVarQueryParameter['durationMs'] = durationMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs by camera and program.
         * @summary Fetch runs by camera and program
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} programId The configured program\&#39;s ID on the camera.
         * @param {number} startedAtMs Started_at_ms is a required param. Indicates the start time of the run to be fetched.
         * @param {string} [include] Include is a filter parameter. Accepts \&#39;pass\&#39;, \&#39;reject\&#39; or \&#39;no_read\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVisionRunsByCameraAndProgram: async (cameraId: number, programId: number, startedAtMs: number, include?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cameraId' is not null or undefined
            assertParamExists('v1getVisionRunsByCameraAndProgram', 'cameraId', cameraId)
            // verify required parameter 'programId' is not null or undefined
            assertParamExists('v1getVisionRunsByCameraAndProgram', 'programId', programId)
            // verify required parameter 'startedAtMs' is not null or undefined
            assertParamExists('v1getVisionRunsByCameraAndProgram', 'startedAtMs', startedAtMs)
            const localVarPath = `/v1/industrial/vision/runs/{camera_id}/{program_id}/{started_at_ms}`
                .replace(`{${"camera_id"}}`, encodeURIComponent(String(cameraId)))
                .replace(`{${"program_id"}}`, encodeURIComponent(String(programId)))
                .replace(`{${"started_at_ms"}}`, encodeURIComponent(String(startedAtMs)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (include !== undefined) {
                localVarQueryParameter['include'] = include;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * IndustrialApi - functional programming interface
 * @export
 */
export const IndustrialApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = IndustrialApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an asset with optional configuration parameters.
         * @summary Create an asset
         * @param {AssetCreate} [asset] The asset to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createIndustrialAsset(asset?: AssetCreate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createIndustrialAsset(asset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete asset.
         * @summary Delete an existing asset
         * @param {string} id Id of the asset to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIndustrialAsset(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIndustrialAsset(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Follow a continuous feed of all data input data points.  Your first call to this endpoint will provide you with the most recent data points for each data input and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to the `after` parameter of this endpoint to get data point updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. We suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow a real-time feed of data points for data inputs
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataInputDataFeed(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataInputListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataInputDataFeed(after, parentTagIds, tagIds, dataInputIds, assetIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all known data points during the given time range for all data inputs. This can be filtered by optional tags, specific data input IDs or asset IDs.
         * @summary List historical data points for data inputs
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataInputDataHistory(startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataInputListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataInputDataHistory(startTime, endTime, after, parentTagIds, tagIds, dataInputIds, assetIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns last known data points for all data inputs. This can be filtered by optional tags, specific data input IDs or asset IDs.
         * @summary List most recent data points for data inputs
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataInputDataSnapshot(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataInputSnapshotResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataInputDataSnapshot(after, parentTagIds, tagIds, dataInputIds, assetIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all data inputs, optionally filtered by tags or asset ids.
         * @summary List all data inputs
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDataInputs(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, assetIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DataInputsTinyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDataInputs(limit, after, parentTagIds, tagIds, assetIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List all assets in the organization.
         * @summary List all assets
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIndustrialAssets(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, assetIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListIndustrialAssetsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIndustrialAssets(limit, after, parentTagIds, tagIds, assetIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs by camera.
         * @summary Fetch runs by camera
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} durationMs DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched
         * @param {number} [endMs] EndMs is an optional param. It will default to the current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVisionRunsByCamera(cameraId: number, durationMs: number, endMs?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVisionRunsByCamera(cameraId, durationMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Writes values to multiple data outputs on an asset simultaneously. Only the provided data outputs will be updated.
         * @summary Writes to data outputs on an asset
         * @param {string} id Asset ID
         * @param {AssetDataOutputsPatchAssetDataOutputsRequestBody} patchAssetDataOutputsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchAssetDataOutputs(id: string, patchAssetDataOutputsRequestBody: AssetDataOutputsPatchAssetDataOutputsRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssetDataOutputsPatchAssetDataOutputsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchAssetDataOutputs(id, patchAssetDataOutputsRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing asset. Only the provided fields will be updated.
         * @summary Update an asset
         * @param {string} id Id of the asset to be updated
         * @param {AssetPatch} [asset] The updated asset fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchIndustrialAsset(id: string, asset?: AssetPatch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchIndustrialAsset(id, asset, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all cameras.
         * @summary Fetch industrial cameras
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getCameras(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getCameras(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
         * @summary Get machines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getMachines(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2008>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getMachines(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for machine objects. This method returns a set of historical data for all machines.
         * @summary Get machine history
         * @param {InlineObject3} historyParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getMachinesHistory(historyParam: InlineObject3, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1MachineHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getMachinesHistory(historyParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch the latest run for a camera or program by default. If startedAtMs is supplied, fetch the specific run that corresponds to that start time.
         * @summary Fetch the latest run for a camera or program
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} [programId] The configured program\&#39;s ID on the camera.
         * @param {number} [startedAtMs] EndMs is an optional param. It will default to the current time.
         * @param {string} [include] Include is a filter parameter. Accepts \&#39;pass\&#39;, \&#39;reject\&#39; or \&#39;no_read\&#39;.
         * @param {number} [limit] Limit is an integer value from 1 to 1,000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getVisionLatestRunCamera(cameraId: number, programId?: number, startedAtMs?: number, include?: string, limit?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1VisionRunByCameraResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getVisionLatestRunCamera(cameraId, programId, startedAtMs, include, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch configured programs on the camera.
         * @summary Fetch industrial camera programs
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getVisionProgramsByCamera(cameraId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getVisionProgramsByCamera(cameraId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs.
         * @summary Fetch runs
         * @param {number} durationMs DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched
         * @param {number} [endMs] EndMs is an optional param. It will default to the current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getVisionRuns(durationMs: number, endMs?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1VisionRunsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getVisionRuns(durationMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs by camera and program.
         * @summary Fetch runs by camera and program
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} programId The configured program\&#39;s ID on the camera.
         * @param {number} startedAtMs Started_at_ms is a required param. Indicates the start time of the run to be fetched.
         * @param {string} [include] Include is a filter parameter. Accepts \&#39;pass\&#39;, \&#39;reject\&#39; or \&#39;no_read\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getVisionRunsByCameraAndProgram(cameraId: number, programId: number, startedAtMs: number, include?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1VisionRunsByCameraAndProgramResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getVisionRunsByCameraAndProgram(cameraId, programId, startedAtMs, include, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * IndustrialApi - factory interface
 * @export
 */
export const IndustrialApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = IndustrialApiFp(configuration)
    return {
        /**
         * Create an asset with optional configuration parameters.
         * @summary Create an asset
         * @param {AssetCreate} [asset] The asset to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createIndustrialAsset(asset?: AssetCreate, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.createIndustrialAsset(asset, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete asset.
         * @summary Delete an existing asset
         * @param {string} id Id of the asset to be deleted.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIndustrialAsset(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteIndustrialAsset(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Follow a continuous feed of all data input data points.  Your first call to this endpoint will provide you with the most recent data points for each data input and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to the `after` parameter of this endpoint to get data point updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. We suggest waiting a minimum of 5 seconds before requesting updates.
         * @summary Follow a real-time feed of data points for data inputs
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataInputDataFeed(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options?: any): AxiosPromise<DataInputListResponse> {
            return localVarFp.getDataInputDataFeed(after, parentTagIds, tagIds, dataInputIds, assetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all known data points during the given time range for all data inputs. This can be filtered by optional tags, specific data input IDs or asset IDs.
         * @summary List historical data points for data inputs
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataInputDataHistory(startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options?: any): AxiosPromise<DataInputListResponse> {
            return localVarFp.getDataInputDataHistory(startTime, endTime, after, parentTagIds, tagIds, dataInputIds, assetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns last known data points for all data inputs. This can be filtered by optional tags, specific data input IDs or asset IDs.
         * @summary List most recent data points for data inputs
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [dataInputIds] A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataInputDataSnapshot(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, dataInputIds?: Array<string>, assetIds?: Array<string>, options?: any): AxiosPromise<DataInputSnapshotResponse> {
            return localVarFp.getDataInputDataSnapshot(after, parentTagIds, tagIds, dataInputIds, assetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all data inputs, optionally filtered by tags or asset ids.
         * @summary List all data inputs
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDataInputs(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, assetIds?: Array<string>, options?: any): AxiosPromise<DataInputsTinyResponse> {
            return localVarFp.getDataInputs(limit, after, parentTagIds, tagIds, assetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * List all assets in the organization.
         * @summary List all assets
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [assetIds] A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIndustrialAssets(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, assetIds?: Array<string>, options?: any): AxiosPromise<ListIndustrialAssetsResponse> {
            return localVarFp.getIndustrialAssets(limit, after, parentTagIds, tagIds, assetIds, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs by camera.
         * @summary Fetch runs by camera
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} durationMs DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched
         * @param {number} [endMs] EndMs is an optional param. It will default to the current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVisionRunsByCamera(cameraId: number, durationMs: number, endMs?: number, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.getVisionRunsByCamera(cameraId, durationMs, endMs, options).then((request) => request(axios, basePath));
        },
        /**
         * Writes values to multiple data outputs on an asset simultaneously. Only the provided data outputs will be updated.
         * @summary Writes to data outputs on an asset
         * @param {string} id Asset ID
         * @param {AssetDataOutputsPatchAssetDataOutputsRequestBody} patchAssetDataOutputsRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchAssetDataOutputs(id: string, patchAssetDataOutputsRequestBody: AssetDataOutputsPatchAssetDataOutputsRequestBody, options?: any): AxiosPromise<AssetDataOutputsPatchAssetDataOutputsResponseBody> {
            return localVarFp.patchAssetDataOutputs(id, patchAssetDataOutputsRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing asset. Only the provided fields will be updated.
         * @summary Update an asset
         * @param {string} id Id of the asset to be updated
         * @param {AssetPatch} [asset] The updated asset fields
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchIndustrialAsset(id: string, asset?: AssetPatch, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.patchIndustrialAsset(id, asset, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all cameras.
         * @summary Fetch industrial cameras
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getCameras(options?: any): AxiosPromise<Array<object>> {
            return localVarFp.v1getCameras(options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
         * @summary Get machines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getMachines(options?: any): AxiosPromise<InlineResponse2008> {
            return localVarFp.v1getMachines(options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for machine objects. This method returns a set of historical data for all machines.
         * @summary Get machine history
         * @param {InlineObject3} historyParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getMachinesHistory(historyParam: InlineObject3, options?: any): AxiosPromise<V1MachineHistoryResponse> {
            return localVarFp.v1getMachinesHistory(historyParam, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch the latest run for a camera or program by default. If startedAtMs is supplied, fetch the specific run that corresponds to that start time.
         * @summary Fetch the latest run for a camera or program
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} [programId] The configured program\&#39;s ID on the camera.
         * @param {number} [startedAtMs] EndMs is an optional param. It will default to the current time.
         * @param {string} [include] Include is a filter parameter. Accepts \&#39;pass\&#39;, \&#39;reject\&#39; or \&#39;no_read\&#39;.
         * @param {number} [limit] Limit is an integer value from 1 to 1,000.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVisionLatestRunCamera(cameraId: number, programId?: number, startedAtMs?: number, include?: string, limit?: number, options?: any): AxiosPromise<V1VisionRunByCameraResponse> {
            return localVarFp.v1getVisionLatestRunCamera(cameraId, programId, startedAtMs, include, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch configured programs on the camera.
         * @summary Fetch industrial camera programs
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVisionProgramsByCamera(cameraId: number, options?: any): AxiosPromise<Array<object>> {
            return localVarFp.v1getVisionProgramsByCamera(cameraId, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs.
         * @summary Fetch runs
         * @param {number} durationMs DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched
         * @param {number} [endMs] EndMs is an optional param. It will default to the current time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVisionRuns(durationMs: number, endMs?: number, options?: any): AxiosPromise<V1VisionRunsResponse> {
            return localVarFp.v1getVisionRuns(durationMs, endMs, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs by camera and program.
         * @summary Fetch runs by camera and program
         * @param {number} cameraId The camera_id should be valid for the given accessToken.
         * @param {number} programId The configured program\&#39;s ID on the camera.
         * @param {number} startedAtMs Started_at_ms is a required param. Indicates the start time of the run to be fetched.
         * @param {string} [include] Include is a filter parameter. Accepts \&#39;pass\&#39;, \&#39;reject\&#39; or \&#39;no_read\&#39;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVisionRunsByCameraAndProgram(cameraId: number, programId: number, startedAtMs: number, include?: string, options?: any): AxiosPromise<V1VisionRunsByCameraAndProgramResponse> {
            return localVarFp.v1getVisionRunsByCameraAndProgram(cameraId, programId, startedAtMs, include, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createIndustrialAsset operation in IndustrialApi.
 * @export
 * @interface IndustrialApiCreateIndustrialAssetRequest
 */
export interface IndustrialApiCreateIndustrialAssetRequest {
    /**
     * The asset to create
     * @type {AssetCreate}
     * @memberof IndustrialApiCreateIndustrialAsset
     */
    readonly asset?: AssetCreate
}

/**
 * Request parameters for deleteIndustrialAsset operation in IndustrialApi.
 * @export
 * @interface IndustrialApiDeleteIndustrialAssetRequest
 */
export interface IndustrialApiDeleteIndustrialAssetRequest {
    /**
     * Id of the asset to be deleted.
     * @type {string}
     * @memberof IndustrialApiDeleteIndustrialAsset
     */
    readonly id: string
}

/**
 * Request parameters for getDataInputDataFeed operation in IndustrialApi.
 * @export
 * @interface IndustrialApiGetDataInputDataFeedRequest
 */
export interface IndustrialApiGetDataInputDataFeedRequest {
    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof IndustrialApiGetDataInputDataFeed
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataFeed
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataFeed
     */
    readonly tagIds?: Array<string>

    /**
     * A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataFeed
     */
    readonly dataInputIds?: Array<string>

    /**
     * A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataFeed
     */
    readonly assetIds?: Array<string>
}

/**
 * Request parameters for getDataInputDataHistory operation in IndustrialApi.
 * @export
 * @interface IndustrialApiGetDataInputDataHistoryRequest
 */
export interface IndustrialApiGetDataInputDataHistoryRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof IndustrialApiGetDataInputDataHistory
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof IndustrialApiGetDataInputDataHistory
     */
    readonly endTime: string

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof IndustrialApiGetDataInputDataHistory
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataHistory
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataHistory
     */
    readonly tagIds?: Array<string>

    /**
     * A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataHistory
     */
    readonly dataInputIds?: Array<string>

    /**
     * A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataHistory
     */
    readonly assetIds?: Array<string>
}

/**
 * Request parameters for getDataInputDataSnapshot operation in IndustrialApi.
 * @export
 * @interface IndustrialApiGetDataInputDataSnapshotRequest
 */
export interface IndustrialApiGetDataInputDataSnapshotRequest {
    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof IndustrialApiGetDataInputDataSnapshot
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataSnapshot
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataSnapshot
     */
    readonly tagIds?: Array<string>

    /**
     * A comma-separated list of data input IDs. Example: &#x60;dataInputIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataSnapshot
     */
    readonly dataInputIds?: Array<string>

    /**
     * A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputDataSnapshot
     */
    readonly assetIds?: Array<string>
}

/**
 * Request parameters for getDataInputs operation in IndustrialApi.
 * @export
 * @interface IndustrialApiGetDataInputsRequest
 */
export interface IndustrialApiGetDataInputsRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof IndustrialApiGetDataInputs
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof IndustrialApiGetDataInputs
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputs
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputs
     */
    readonly tagIds?: Array<string>

    /**
     * A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetDataInputs
     */
    readonly assetIds?: Array<string>
}

/**
 * Request parameters for getIndustrialAssets operation in IndustrialApi.
 * @export
 * @interface IndustrialApiGetIndustrialAssetsRequest
 */
export interface IndustrialApiGetIndustrialAssetsRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof IndustrialApiGetIndustrialAssets
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof IndustrialApiGetIndustrialAssets
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetIndustrialAssets
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetIndustrialAssets
     */
    readonly tagIds?: Array<string>

    /**
     * A comma-separated list of industrial asset UUIDs. Example: &#x60;assetIds&#x3D;076efac2-83b5-47aa-ba36-18428436dcac,6707b3f0-23b9-4fe3-b7be-11be34aea544&#x60;
     * @type {Array<string>}
     * @memberof IndustrialApiGetIndustrialAssets
     */
    readonly assetIds?: Array<string>
}

/**
 * Request parameters for getVisionRunsByCamera operation in IndustrialApi.
 * @export
 * @interface IndustrialApiGetVisionRunsByCameraRequest
 */
export interface IndustrialApiGetVisionRunsByCameraRequest {
    /**
     * The camera_id should be valid for the given accessToken.
     * @type {number}
     * @memberof IndustrialApiGetVisionRunsByCamera
     */
    readonly cameraId: number

    /**
     * DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched
     * @type {number}
     * @memberof IndustrialApiGetVisionRunsByCamera
     */
    readonly durationMs: number

    /**
     * EndMs is an optional param. It will default to the current time.
     * @type {number}
     * @memberof IndustrialApiGetVisionRunsByCamera
     */
    readonly endMs?: number
}

/**
 * Request parameters for patchAssetDataOutputs operation in IndustrialApi.
 * @export
 * @interface IndustrialApiPatchAssetDataOutputsRequest
 */
export interface IndustrialApiPatchAssetDataOutputsRequest {
    /**
     * Asset ID
     * @type {string}
     * @memberof IndustrialApiPatchAssetDataOutputs
     */
    readonly id: string

    /**
     * 
     * @type {AssetDataOutputsPatchAssetDataOutputsRequestBody}
     * @memberof IndustrialApiPatchAssetDataOutputs
     */
    readonly patchAssetDataOutputsRequestBody: AssetDataOutputsPatchAssetDataOutputsRequestBody
}

/**
 * Request parameters for patchIndustrialAsset operation in IndustrialApi.
 * @export
 * @interface IndustrialApiPatchIndustrialAssetRequest
 */
export interface IndustrialApiPatchIndustrialAssetRequest {
    /**
     * Id of the asset to be updated
     * @type {string}
     * @memberof IndustrialApiPatchIndustrialAsset
     */
    readonly id: string

    /**
     * The updated asset fields
     * @type {AssetPatch}
     * @memberof IndustrialApiPatchIndustrialAsset
     */
    readonly asset?: AssetPatch
}

/**
 * Request parameters for v1getMachinesHistory operation in IndustrialApi.
 * @export
 * @interface IndustrialApiV1getMachinesHistoryRequest
 */
export interface IndustrialApiV1getMachinesHistoryRequest {
    /**
     * 
     * @type {InlineObject3}
     * @memberof IndustrialApiV1getMachinesHistory
     */
    readonly historyParam: InlineObject3
}

/**
 * Request parameters for v1getVisionLatestRunCamera operation in IndustrialApi.
 * @export
 * @interface IndustrialApiV1getVisionLatestRunCameraRequest
 */
export interface IndustrialApiV1getVisionLatestRunCameraRequest {
    /**
     * The camera_id should be valid for the given accessToken.
     * @type {number}
     * @memberof IndustrialApiV1getVisionLatestRunCamera
     */
    readonly cameraId: number

    /**
     * The configured program\&#39;s ID on the camera.
     * @type {number}
     * @memberof IndustrialApiV1getVisionLatestRunCamera
     */
    readonly programId?: number

    /**
     * EndMs is an optional param. It will default to the current time.
     * @type {number}
     * @memberof IndustrialApiV1getVisionLatestRunCamera
     */
    readonly startedAtMs?: number

    /**
     * Include is a filter parameter. Accepts \&#39;pass\&#39;, \&#39;reject\&#39; or \&#39;no_read\&#39;.
     * @type {string}
     * @memberof IndustrialApiV1getVisionLatestRunCamera
     */
    readonly include?: string

    /**
     * Limit is an integer value from 1 to 1,000.
     * @type {number}
     * @memberof IndustrialApiV1getVisionLatestRunCamera
     */
    readonly limit?: number
}

/**
 * Request parameters for v1getVisionProgramsByCamera operation in IndustrialApi.
 * @export
 * @interface IndustrialApiV1getVisionProgramsByCameraRequest
 */
export interface IndustrialApiV1getVisionProgramsByCameraRequest {
    /**
     * The camera_id should be valid for the given accessToken.
     * @type {number}
     * @memberof IndustrialApiV1getVisionProgramsByCamera
     */
    readonly cameraId: number
}

/**
 * Request parameters for v1getVisionRuns operation in IndustrialApi.
 * @export
 * @interface IndustrialApiV1getVisionRunsRequest
 */
export interface IndustrialApiV1getVisionRunsRequest {
    /**
     * DurationMs is a required param. This works with the EndMs parameter. Indicates the duration in which the visionRuns will be fetched
     * @type {number}
     * @memberof IndustrialApiV1getVisionRuns
     */
    readonly durationMs: number

    /**
     * EndMs is an optional param. It will default to the current time.
     * @type {number}
     * @memberof IndustrialApiV1getVisionRuns
     */
    readonly endMs?: number
}

/**
 * Request parameters for v1getVisionRunsByCameraAndProgram operation in IndustrialApi.
 * @export
 * @interface IndustrialApiV1getVisionRunsByCameraAndProgramRequest
 */
export interface IndustrialApiV1getVisionRunsByCameraAndProgramRequest {
    /**
     * The camera_id should be valid for the given accessToken.
     * @type {number}
     * @memberof IndustrialApiV1getVisionRunsByCameraAndProgram
     */
    readonly cameraId: number

    /**
     * The configured program\&#39;s ID on the camera.
     * @type {number}
     * @memberof IndustrialApiV1getVisionRunsByCameraAndProgram
     */
    readonly programId: number

    /**
     * Started_at_ms is a required param. Indicates the start time of the run to be fetched.
     * @type {number}
     * @memberof IndustrialApiV1getVisionRunsByCameraAndProgram
     */
    readonly startedAtMs: number

    /**
     * Include is a filter parameter. Accepts \&#39;pass\&#39;, \&#39;reject\&#39; or \&#39;no_read\&#39;.
     * @type {string}
     * @memberof IndustrialApiV1getVisionRunsByCameraAndProgram
     */
    readonly include?: string
}

/**
 * IndustrialApi - object-oriented interface
 * @export
 * @class IndustrialApi
 * @extends {BaseAPI}
 */
export class IndustrialApi extends BaseAPI {
    /**
     * Create an asset with optional configuration parameters.
     * @summary Create an asset
     * @param {IndustrialApiCreateIndustrialAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public createIndustrialAsset(requestParameters: IndustrialApiCreateIndustrialAssetRequest = {}, options?: any) {
        return IndustrialApiFp(this.configuration).createIndustrialAsset(requestParameters.asset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete asset.
     * @summary Delete an existing asset
     * @param {IndustrialApiDeleteIndustrialAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public deleteIndustrialAsset(requestParameters: IndustrialApiDeleteIndustrialAssetRequest, options?: any) {
        return IndustrialApiFp(this.configuration).deleteIndustrialAsset(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Follow a continuous feed of all data input data points.  Your first call to this endpoint will provide you with the most recent data points for each data input and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to the `after` parameter of this endpoint to get data point updates since that `endCursor`.  If `hasNextPage` is `false`, no updates are readily available yet. We suggest waiting a minimum of 5 seconds before requesting updates.
     * @summary Follow a real-time feed of data points for data inputs
     * @param {IndustrialApiGetDataInputDataFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public getDataInputDataFeed(requestParameters: IndustrialApiGetDataInputDataFeedRequest = {}, options?: any) {
        return IndustrialApiFp(this.configuration).getDataInputDataFeed(requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.dataInputIds, requestParameters.assetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all known data points during the given time range for all data inputs. This can be filtered by optional tags, specific data input IDs or asset IDs.
     * @summary List historical data points for data inputs
     * @param {IndustrialApiGetDataInputDataHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public getDataInputDataHistory(requestParameters: IndustrialApiGetDataInputDataHistoryRequest, options?: any) {
        return IndustrialApiFp(this.configuration).getDataInputDataHistory(requestParameters.startTime, requestParameters.endTime, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.dataInputIds, requestParameters.assetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns last known data points for all data inputs. This can be filtered by optional tags, specific data input IDs or asset IDs.
     * @summary List most recent data points for data inputs
     * @param {IndustrialApiGetDataInputDataSnapshotRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public getDataInputDataSnapshot(requestParameters: IndustrialApiGetDataInputDataSnapshotRequest = {}, options?: any) {
        return IndustrialApiFp(this.configuration).getDataInputDataSnapshot(requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.dataInputIds, requestParameters.assetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all data inputs, optionally filtered by tags or asset ids.
     * @summary List all data inputs
     * @param {IndustrialApiGetDataInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public getDataInputs(requestParameters: IndustrialApiGetDataInputsRequest = {}, options?: any) {
        return IndustrialApiFp(this.configuration).getDataInputs(requestParameters.limit, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.assetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List all assets in the organization.
     * @summary List all assets
     * @param {IndustrialApiGetIndustrialAssetsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public getIndustrialAssets(requestParameters: IndustrialApiGetIndustrialAssetsRequest = {}, options?: any) {
        return IndustrialApiFp(this.configuration).getIndustrialAssets(requestParameters.limit, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.assetIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs by camera.
     * @summary Fetch runs by camera
     * @param {IndustrialApiGetVisionRunsByCameraRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public getVisionRunsByCamera(requestParameters: IndustrialApiGetVisionRunsByCameraRequest, options?: any) {
        return IndustrialApiFp(this.configuration).getVisionRunsByCamera(requestParameters.cameraId, requestParameters.durationMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Writes values to multiple data outputs on an asset simultaneously. Only the provided data outputs will be updated.
     * @summary Writes to data outputs on an asset
     * @param {IndustrialApiPatchAssetDataOutputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public patchAssetDataOutputs(requestParameters: IndustrialApiPatchAssetDataOutputsRequest, options?: any) {
        return IndustrialApiFp(this.configuration).patchAssetDataOutputs(requestParameters.id, requestParameters.patchAssetDataOutputsRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing asset. Only the provided fields will be updated.
     * @summary Update an asset
     * @param {IndustrialApiPatchIndustrialAssetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public patchIndustrialAsset(requestParameters: IndustrialApiPatchIndustrialAssetRequest, options?: any) {
        return IndustrialApiFp(this.configuration).patchIndustrialAsset(requestParameters.id, requestParameters.asset, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch all cameras.
     * @summary Fetch industrial cameras
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public v1getCameras(options?: any) {
        return IndustrialApiFp(this.configuration).v1getCameras(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get machine objects. This method returns a list of the machine objects in the Samsara Cloud and information about them.
     * @summary Get machines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public v1getMachines(options?: any) {
        return IndustrialApiFp(this.configuration).v1getMachines(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for machine objects. This method returns a set of historical data for all machines.
     * @summary Get machine history
     * @param {IndustrialApiV1getMachinesHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public v1getMachinesHistory(requestParameters: IndustrialApiV1getMachinesHistoryRequest, options?: any) {
        return IndustrialApiFp(this.configuration).v1getMachinesHistory(requestParameters.historyParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch the latest run for a camera or program by default. If startedAtMs is supplied, fetch the specific run that corresponds to that start time.
     * @summary Fetch the latest run for a camera or program
     * @param {IndustrialApiV1getVisionLatestRunCameraRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public v1getVisionLatestRunCamera(requestParameters: IndustrialApiV1getVisionLatestRunCameraRequest, options?: any) {
        return IndustrialApiFp(this.configuration).v1getVisionLatestRunCamera(requestParameters.cameraId, requestParameters.programId, requestParameters.startedAtMs, requestParameters.include, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch configured programs on the camera.
     * @summary Fetch industrial camera programs
     * @param {IndustrialApiV1getVisionProgramsByCameraRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public v1getVisionProgramsByCamera(requestParameters: IndustrialApiV1getVisionProgramsByCameraRequest, options?: any) {
        return IndustrialApiFp(this.configuration).v1getVisionProgramsByCamera(requestParameters.cameraId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs.
     * @summary Fetch runs
     * @param {IndustrialApiV1getVisionRunsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public v1getVisionRuns(requestParameters: IndustrialApiV1getVisionRunsRequest, options?: any) {
        return IndustrialApiFp(this.configuration).v1getVisionRuns(requestParameters.durationMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch runs by camera and program.
     * @summary Fetch runs by camera and program
     * @param {IndustrialApiV1getVisionRunsByCameraAndProgramRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof IndustrialApi
     */
    public v1getVisionRunsByCameraAndProgram(requestParameters: IndustrialApiV1getVisionRunsByCameraAndProgramRequest, options?: any) {
        return IndustrialApiFp(this.configuration).v1getVisionRunsByCameraAndProgram(requestParameters.cameraId, requestParameters.programId, requestParameters.startedAtMs, requestParameters.include, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MaintenanceApi - axios parameter creator
 * @export
 */
export const MaintenanceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new mechanic DVIR in the organization.
         * @summary Create a mechanic DVIR
         * @param {CreateDvirRequest} [dvir] The DVIR to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDvir: async (dvir?: CreateDvirRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/dvirs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dvir, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of DVIR defects in an organization, filtered by creation time. The maximum time period you can query for is 30 days.
         * @summary Get all defects
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {boolean} [isResolved] A filter on the data based on resolution status. Example: &#x60;isResolved&#x3D;true&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDvirDefects: async (startTime: string, endTime: string, limit?: number, after?: string, isResolved?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDvirDefects', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDvirDefects', 'endTime', endTime)
            const localVarPath = `/fleet/defects/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (isResolved !== undefined) {
                localVarQueryParameter['isResolved'] = isResolved;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all DVIRs in an organization.
         * @summary Get all DVIRs
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDvirHistory: async (startTime: string, endTime: string, limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDvirHistory', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDvirHistory', 'endTime', endTime)
            const localVarPath = `/fleet/dvirs/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Resolves a given DVIR by marking its `isResolved` field to `true`.
         * @summary Resolve a DVIR
         * @param {string} id ID of the DVIR.
         * @param {UpdateDvirRequest} [dvir] The dvir fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDvir: async (id: string, dvir?: UpdateDvirRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDvir', 'id', id)
            const localVarPath = `/fleet/dvirs/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(dvir, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a given defect. Can be used to resolve a defect by marking its `isResolved` field to `true`.
         * @summary Update a defect
         * @param {string} id ID of the defect.
         * @param {DefectPatch} [defect] The DVIR defect fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDvirDefect: async (id: string, defect?: DefectPatch, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateDvirDefect', 'id', id)
            const localVarPath = `/fleet/defects/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(defect, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get list of the vehicles with any engine faults or check light data.
         * @summary Get vehicles with engine faults or check lights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getFleetMaintenanceList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/fleet/maintenance/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MaintenanceApi - functional programming interface
 * @export
 */
export const MaintenanceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MaintenanceApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new mechanic DVIR in the organization.
         * @summary Create a mechanic DVIR
         * @param {CreateDvirRequest} [dvir] The DVIR to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDvir(dvir?: CreateDvirRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DvirResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDvir(dvir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of DVIR defects in an organization, filtered by creation time. The maximum time period you can query for is 30 days.
         * @summary Get all defects
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {boolean} [isResolved] A filter on the data based on resolution status. Example: &#x60;isResolved&#x3D;true&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDvirDefects(startTime: string, endTime: string, limit?: number, after?: string, isResolved?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDvirDefects(startTime, endTime, limit, after, isResolved, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all DVIRs in an organization.
         * @summary Get all DVIRs
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDvirHistory(startTime: string, endTime: string, limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DvirsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDvirHistory(startTime, endTime, limit, after, parentTagIds, tagIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Resolves a given DVIR by marking its `isResolved` field to `true`.
         * @summary Resolve a DVIR
         * @param {string} id ID of the DVIR.
         * @param {UpdateDvirRequest} [dvir] The dvir fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDvir(id: string, dvir?: UpdateDvirRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DvirResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDvir(id, dvir, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a given defect. Can be used to resolve a defect by marking its `isResolved` field to `true`.
         * @summary Update a defect
         * @param {string} id ID of the defect.
         * @param {DefectPatch} [defect] The DVIR defect fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDvirDefect(id: string, defect?: DefectPatch, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DefectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDvirDefect(id, defect, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get list of the vehicles with any engine faults or check light data.
         * @summary Get vehicles with engine faults or check lights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getFleetMaintenanceList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2004>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getFleetMaintenanceList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MaintenanceApi - factory interface
 * @export
 */
export const MaintenanceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MaintenanceApiFp(configuration)
    return {
        /**
         * Creates a new mechanic DVIR in the organization.
         * @summary Create a mechanic DVIR
         * @param {CreateDvirRequest} [dvir] The DVIR to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDvir(dvir?: CreateDvirRequest, options?: any): AxiosPromise<DvirResponse> {
            return localVarFp.createDvir(dvir, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of DVIR defects in an organization, filtered by creation time. The maximum time period you can query for is 30 days.
         * @summary Get all defects
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {boolean} [isResolved] A filter on the data based on resolution status. Example: &#x60;isResolved&#x3D;true&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDvirDefects(startTime: string, endTime: string, limit?: number, after?: string, isResolved?: boolean, options?: any): AxiosPromise<DefectsResponse> {
            return localVarFp.getDvirDefects(startTime, endTime, limit, after, isResolved, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all DVIRs in an organization.
         * @summary Get all DVIRs
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDvirHistory(startTime: string, endTime: string, limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): AxiosPromise<DvirsListResponse> {
            return localVarFp.getDvirHistory(startTime, endTime, limit, after, parentTagIds, tagIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Resolves a given DVIR by marking its `isResolved` field to `true`.
         * @summary Resolve a DVIR
         * @param {string} id ID of the DVIR.
         * @param {UpdateDvirRequest} [dvir] The dvir fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDvir(id: string, dvir?: UpdateDvirRequest, options?: any): AxiosPromise<DvirResponse> {
            return localVarFp.updateDvir(id, dvir, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a given defect. Can be used to resolve a defect by marking its `isResolved` field to `true`.
         * @summary Update a defect
         * @param {string} id ID of the defect.
         * @param {DefectPatch} [defect] The DVIR defect fields to update.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDvirDefect(id: string, defect?: DefectPatch, options?: any): AxiosPromise<DefectResponse> {
            return localVarFp.updateDvirDefect(id, defect, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get list of the vehicles with any engine faults or check light data.
         * @summary Get vehicles with engine faults or check lights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getFleetMaintenanceList(options?: any): AxiosPromise<InlineResponse2004> {
            return localVarFp.v1getFleetMaintenanceList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createDvir operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiCreateDvirRequest
 */
export interface MaintenanceApiCreateDvirRequest {
    /**
     * The DVIR to create.
     * @type {CreateDvirRequest}
     * @memberof MaintenanceApiCreateDvir
     */
    readonly dvir?: CreateDvirRequest
}

/**
 * Request parameters for getDvirDefects operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiGetDvirDefectsRequest
 */
export interface MaintenanceApiGetDvirDefectsRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*
     * @type {string}
     * @memberof MaintenanceApiGetDvirDefects
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). *The maximum time period you can query for is 30 days.*
     * @type {string}
     * @memberof MaintenanceApiGetDvirDefects
     */
    readonly endTime: string

    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof MaintenanceApiGetDvirDefects
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof MaintenanceApiGetDvirDefects
     */
    readonly after?: string

    /**
     * A filter on the data based on resolution status. Example: &#x60;isResolved&#x3D;true&#x60;
     * @type {boolean}
     * @memberof MaintenanceApiGetDvirDefects
     */
    readonly isResolved?: boolean
}

/**
 * Request parameters for getDvirHistory operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiGetDvirHistoryRequest
 */
export interface MaintenanceApiGetDvirHistoryRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof MaintenanceApiGetDvirHistory
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof MaintenanceApiGetDvirHistory
     */
    readonly endTime: string

    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof MaintenanceApiGetDvirHistory
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof MaintenanceApiGetDvirHistory
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof MaintenanceApiGetDvirHistory
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof MaintenanceApiGetDvirHistory
     */
    readonly tagIds?: Array<string>
}

/**
 * Request parameters for updateDvir operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiUpdateDvirRequest
 */
export interface MaintenanceApiUpdateDvirRequest {
    /**
     * ID of the DVIR.
     * @type {string}
     * @memberof MaintenanceApiUpdateDvir
     */
    readonly id: string

    /**
     * The dvir fields to update.
     * @type {UpdateDvirRequest}
     * @memberof MaintenanceApiUpdateDvir
     */
    readonly dvir?: UpdateDvirRequest
}

/**
 * Request parameters for updateDvirDefect operation in MaintenanceApi.
 * @export
 * @interface MaintenanceApiUpdateDvirDefectRequest
 */
export interface MaintenanceApiUpdateDvirDefectRequest {
    /**
     * ID of the defect.
     * @type {string}
     * @memberof MaintenanceApiUpdateDvirDefect
     */
    readonly id: string

    /**
     * The DVIR defect fields to update.
     * @type {DefectPatch}
     * @memberof MaintenanceApiUpdateDvirDefect
     */
    readonly defect?: DefectPatch
}

/**
 * MaintenanceApi - object-oriented interface
 * @export
 * @class MaintenanceApi
 * @extends {BaseAPI}
 */
export class MaintenanceApi extends BaseAPI {
    /**
     * Creates a new mechanic DVIR in the organization.
     * @summary Create a mechanic DVIR
     * @param {MaintenanceApiCreateDvirRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public createDvir(requestParameters: MaintenanceApiCreateDvirRequest = {}, options?: any) {
        return MaintenanceApiFp(this.configuration).createDvir(requestParameters.dvir, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of DVIR defects in an organization, filtered by creation time. The maximum time period you can query for is 30 days.
     * @summary Get all defects
     * @param {MaintenanceApiGetDvirDefectsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public getDvirDefects(requestParameters: MaintenanceApiGetDvirDefectsRequest, options?: any) {
        return MaintenanceApiFp(this.configuration).getDvirDefects(requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.after, requestParameters.isResolved, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all DVIRs in an organization.
     * @summary Get all DVIRs
     * @param {MaintenanceApiGetDvirHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public getDvirHistory(requestParameters: MaintenanceApiGetDvirHistoryRequest, options?: any) {
        return MaintenanceApiFp(this.configuration).getDvirHistory(requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Resolves a given DVIR by marking its `isResolved` field to `true`.
     * @summary Resolve a DVIR
     * @param {MaintenanceApiUpdateDvirRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public updateDvir(requestParameters: MaintenanceApiUpdateDvirRequest, options?: any) {
        return MaintenanceApiFp(this.configuration).updateDvir(requestParameters.id, requestParameters.dvir, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a given defect. Can be used to resolve a defect by marking its `isResolved` field to `true`.
     * @summary Update a defect
     * @param {MaintenanceApiUpdateDvirDefectRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public updateDvirDefect(requestParameters: MaintenanceApiUpdateDvirDefectRequest, options?: any) {
        return MaintenanceApiFp(this.configuration).updateDvirDefect(requestParameters.id, requestParameters.defect, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get list of the vehicles with any engine faults or check light data.
     * @summary Get vehicles with engine faults or check lights
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MaintenanceApi
     */
    public v1getFleetMaintenanceList(options?: any) {
        return MaintenanceApiFp(this.configuration).v1getFleetMaintenanceList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Send a message to a list of driver ids.
         * @summary Send a message to a list of driver ids.
         * @param {InlineObject2} createMessages 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1createMessages: async (createMessages: InlineObject2, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createMessages' is not null or undefined
            assertParamExists('v1createMessages', 'createMessages', createMessages)
            const localVarPath = `/v1/fleet/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createMessages, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get all messages.
         * @summary Get all messages.
         * @param {number} [endMs] Time in unix milliseconds that represents the end of time range of messages to return. Used in combination with durationMs. Defaults to now.
         * @param {number} [durationMs] Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getMessages: async (endMs?: number, durationMs?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/fleet/messages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }

            if (durationMs !== undefined) {
                localVarQueryParameter['durationMs'] = durationMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagesApiAxiosParamCreator(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Send a message to a list of driver ids.
         * @summary Send a message to a list of driver ids.
         * @param {InlineObject2} createMessages 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1createMessages(createMessages: InlineObject2, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2006>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1createMessages(createMessages, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get all messages.
         * @summary Get all messages.
         * @param {number} [endMs] Time in unix milliseconds that represents the end of time range of messages to return. Used in combination with durationMs. Defaults to now.
         * @param {number} [durationMs] Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getMessages(endMs?: number, durationMs?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2005>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getMessages(endMs, durationMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagesApiFp(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Send a message to a list of driver ids.
         * @summary Send a message to a list of driver ids.
         * @param {InlineObject2} createMessages 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1createMessages(createMessages: InlineObject2, options?: any): AxiosPromise<InlineResponse2006> {
            return localVarFp.v1createMessages(createMessages, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get all messages.
         * @summary Get all messages.
         * @param {number} [endMs] Time in unix milliseconds that represents the end of time range of messages to return. Used in combination with durationMs. Defaults to now.
         * @param {number} [durationMs] Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getMessages(endMs?: number, durationMs?: number, options?: any): AxiosPromise<InlineResponse2005> {
            return localVarFp.v1getMessages(endMs, durationMs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1createMessages operation in MessagesApi.
 * @export
 * @interface MessagesApiV1createMessagesRequest
 */
export interface MessagesApiV1createMessagesRequest {
    /**
     * 
     * @type {InlineObject2}
     * @memberof MessagesApiV1createMessages
     */
    readonly createMessages: InlineObject2
}

/**
 * Request parameters for v1getMessages operation in MessagesApi.
 * @export
 * @interface MessagesApiV1getMessagesRequest
 */
export interface MessagesApiV1getMessagesRequest {
    /**
     * Time in unix milliseconds that represents the end of time range of messages to return. Used in combination with durationMs. Defaults to now.
     * @type {number}
     * @memberof MessagesApiV1getMessages
     */
    readonly endMs?: number

    /**
     * Time in milliseconds that represents the duration before endMs to query. Defaults to 24 hours.
     * @type {number}
     * @memberof MessagesApiV1getMessages
     */
    readonly durationMs?: number
}

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Send a message to a list of driver ids.
     * @summary Send a message to a list of driver ids.
     * @param {MessagesApiV1createMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public v1createMessages(requestParameters: MessagesApiV1createMessagesRequest, options?: any) {
        return MessagesApiFp(this.configuration).v1createMessages(requestParameters.createMessages, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get all messages.
     * @summary Get all messages.
     * @param {MessagesApiV1getMessagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public v1getMessages(requestParameters: MessagesApiV1getMessagesRequest = {}, options?: any) {
        return MessagesApiFp(this.configuration).v1getMessages(requestParameters.endMs, requestParameters.durationMs, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrganizationInfoApi - axios parameter creator
 * @export
 */
export const OrganizationInfoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get information about your organization.
         * @summary Get information about your organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationInfo: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrganizationInfoApi - functional programming interface
 * @export
 */
export const OrganizationInfoApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrganizationInfoApiAxiosParamCreator(configuration)
    return {
        /**
         * Get information about your organization.
         * @summary Get information about your organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrganizationInfo(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrganizationInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrganizationInfoApi - factory interface
 * @export
 */
export const OrganizationInfoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrganizationInfoApiFp(configuration)
    return {
        /**
         * Get information about your organization.
         * @summary Get information about your organization
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrganizationInfo(options?: any): AxiosPromise<OrganizationInfoResponse> {
            return localVarFp.getOrganizationInfo(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrganizationInfoApi - object-oriented interface
 * @export
 * @class OrganizationInfoApi
 * @extends {BaseAPI}
 */
export class OrganizationInfoApi extends BaseAPI {
    /**
     * Get information about your organization.
     * @summary Get information about your organization
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrganizationInfoApi
     */
    public getOrganizationInfo(options?: any) {
        return OrganizationInfoApiFp(this.configuration).getOrganizationInfo(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoutesApi - axios parameter creator
 * @export
 */
export const RoutesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a route. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/createDispatchRoute).
         * @summary Create a route
         * @param {RoutesCreateRouteRequestBody} createRouteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoute: async (createRouteRequestBody: RoutesCreateRouteRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createRouteRequestBody' is not null or undefined
            assertParamExists('createRoute', 'createRouteRequestBody', createRouteRequestBody)
            const localVarPath = `/fleet/routes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createRouteRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a single route. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getDispatchRouteById).
         * @summary Fetch a route
         * @param {string} id ID of the route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRoute: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('fetchRoute', 'id', id)
            const localVarPath = `/fleet/routes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns multiple routes. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllDispatchRoutes).
         * @summary Fetch all routes
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRoutes: async (startTime: string, endTime: string, limit?: number, after?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('fetchRoutes', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('fetchRoutes', 'endTime', endTime)
            const localVarPath = `/fleet/routes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscribes to a feed of immutable, append-only updates for routes. The initial request to this feed endpoint returns a cursor, which can be used on the next request to fetch updated routes that have had state changes since that request.  The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllRouteJobUpdates).
         * @summary Get route updates
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {'route'} [expand] Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.  Valid value: &#x60;route&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoutesFeed: async (after?: string, expand?: 'route', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/routes/audit-logs/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a route.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array.  The legacy version of this endpoint (which uses PUT instead of PATCH) can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/updateDispatchRouteById).
         * @summary Update a route
         * @param {string} id id of the route to update
         * @param {RoutesPatchRouteRequestBody} patchRouteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoute: async (id: string, patchRouteRequestBody: RoutesPatchRouteRequestBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchRoute', 'id', id)
            // verify required parameter 'patchRouteRequestBody' is not null or undefined
            assertParamExists('patchRoute', 'patchRouteRequestBody', patchRouteRequestBody)
            const localVarPath = `/fleet/routes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchRouteRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Delete a dispatch route and its associated jobs.
         * @summary Delete a route
         * @param {string} routeIdOrExternalId ID of the route. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {InlineObject} [applyToFutureRoutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1deleteDispatchRouteById: async (routeIdOrExternalId: string, applyToFutureRoutes?: InlineObject, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'routeIdOrExternalId' is not null or undefined
            assertParamExists('v1deleteDispatchRouteById', 'routeIdOrExternalId', routeIdOrExternalId)
            const localVarPath = `/v1/fleet/dispatch/routes/{route_id_or_external_id}`
                .replace(`{${"route_id_or_external_id"}}`, encodeURIComponent(String(routeIdOrExternalId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(applyToFutureRoutes, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoutesApi - functional programming interface
 * @export
 */
export const RoutesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoutesApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a route. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/createDispatchRoute).
         * @summary Create a route
         * @param {RoutesCreateRouteRequestBody} createRouteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRoute(createRouteRequestBody: RoutesCreateRouteRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoutesCreateRouteResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRoute(createRouteRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a single route. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getDispatchRouteById).
         * @summary Fetch a route
         * @param {string} id ID of the route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRoute(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoutesFetchRouteResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRoute(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns multiple routes. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllDispatchRoutes).
         * @summary Fetch all routes
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async fetchRoutes(startTime: string, endTime: string, limit?: number, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoutesFetchRoutesResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.fetchRoutes(startTime, endTime, limit, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Subscribes to a feed of immutable, append-only updates for routes. The initial request to this feed endpoint returns a cursor, which can be used on the next request to fetch updated routes that have had state changes since that request.  The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllRouteJobUpdates).
         * @summary Get route updates
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {'route'} [expand] Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.  Valid value: &#x60;route&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRoutesFeed(after?: string, expand?: 'route', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoutesGetRoutesFeedResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRoutesFeed(after, expand, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a route.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array.  The legacy version of this endpoint (which uses PUT instead of PATCH) can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/updateDispatchRouteById).
         * @summary Update a route
         * @param {string} id id of the route to update
         * @param {RoutesPatchRouteRequestBody} patchRouteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchRoute(id: string, patchRouteRequestBody: RoutesPatchRouteRequestBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoutesPatchRouteResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchRoute(id, patchRouteRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Delete a dispatch route and its associated jobs.
         * @summary Delete a route
         * @param {string} routeIdOrExternalId ID of the route. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {InlineObject} [applyToFutureRoutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1deleteDispatchRouteById(routeIdOrExternalId: string, applyToFutureRoutes?: InlineObject, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1deleteDispatchRouteById(routeIdOrExternalId, applyToFutureRoutes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoutesApi - factory interface
 * @export
 */
export const RoutesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoutesApiFp(configuration)
    return {
        /**
         * Create a route. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/createDispatchRoute).
         * @summary Create a route
         * @param {RoutesCreateRouteRequestBody} createRouteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRoute(createRouteRequestBody: RoutesCreateRouteRequestBody, options?: any): AxiosPromise<RoutesCreateRouteResponseBody> {
            return localVarFp.createRoute(createRouteRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a single route. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getDispatchRouteById).
         * @summary Fetch a route
         * @param {string} id ID of the route
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRoute(id: string, options?: any): AxiosPromise<RoutesFetchRouteResponseBody> {
            return localVarFp.fetchRoute(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns multiple routes. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllDispatchRoutes).
         * @summary Fetch all routes
         * @param {string} startTime  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        fetchRoutes(startTime: string, endTime: string, limit?: number, after?: string, options?: any): AxiosPromise<RoutesFetchRoutesResponseBody> {
            return localVarFp.fetchRoutes(startTime, endTime, limit, after, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscribes to a feed of immutable, append-only updates for routes. The initial request to this feed endpoint returns a cursor, which can be used on the next request to fetch updated routes that have had state changes since that request.  The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllRouteJobUpdates).
         * @summary Get route updates
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {'route'} [expand] Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.  Valid value: &#x60;route&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRoutesFeed(after?: string, expand?: 'route', options?: any): AxiosPromise<RoutesGetRoutesFeedResponseBody> {
            return localVarFp.getRoutesFeed(after, expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a route.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array.  The legacy version of this endpoint (which uses PUT instead of PATCH) can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/updateDispatchRouteById).
         * @summary Update a route
         * @param {string} id id of the route to update
         * @param {RoutesPatchRouteRequestBody} patchRouteRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchRoute(id: string, patchRouteRequestBody: RoutesPatchRouteRequestBody, options?: any): AxiosPromise<RoutesPatchRouteResponseBody> {
            return localVarFp.patchRoute(id, patchRouteRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Delete a dispatch route and its associated jobs.
         * @summary Delete a route
         * @param {string} routeIdOrExternalId ID of the route. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
         * @param {InlineObject} [applyToFutureRoutes] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1deleteDispatchRouteById(routeIdOrExternalId: string, applyToFutureRoutes?: InlineObject, options?: any): AxiosPromise<void> {
            return localVarFp.v1deleteDispatchRouteById(routeIdOrExternalId, applyToFutureRoutes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createRoute operation in RoutesApi.
 * @export
 * @interface RoutesApiCreateRouteRequest
 */
export interface RoutesApiCreateRouteRequest {
    /**
     * 
     * @type {RoutesCreateRouteRequestBody}
     * @memberof RoutesApiCreateRoute
     */
    readonly createRouteRequestBody: RoutesCreateRouteRequestBody
}

/**
 * Request parameters for fetchRoute operation in RoutesApi.
 * @export
 * @interface RoutesApiFetchRouteRequest
 */
export interface RoutesApiFetchRouteRequest {
    /**
     * ID of the route
     * @type {string}
     * @memberof RoutesApiFetchRoute
     */
    readonly id: string
}

/**
 * Request parameters for fetchRoutes operation in RoutesApi.
 * @export
 * @interface RoutesApiFetchRoutesRequest
 */
export interface RoutesApiFetchRoutesRequest {
    /**
     *  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof RoutesApiFetchRoutes
     */
    readonly startTime: string

    /**
     *  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof RoutesApiFetchRoutes
     */
    readonly endTime: string

    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof RoutesApiFetchRoutes
     */
    readonly limit?: number

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof RoutesApiFetchRoutes
     */
    readonly after?: string
}

/**
 * Request parameters for getRoutesFeed operation in RoutesApi.
 * @export
 * @interface RoutesApiGetRoutesFeedRequest
 */
export interface RoutesApiGetRoutesFeedRequest {
    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof RoutesApiGetRoutesFeed
     */
    readonly after?: string

    /**
     * Expands the specified value(s) in the response object. Expansion populates additional fields in an object, if supported. Unsupported fields are ignored. To expand multiple fields, input a comma-separated list.  Valid value: &#x60;route&#x60;
     * @type {'route'}
     * @memberof RoutesApiGetRoutesFeed
     */
    readonly expand?: 'route'
}

/**
 * Request parameters for patchRoute operation in RoutesApi.
 * @export
 * @interface RoutesApiPatchRouteRequest
 */
export interface RoutesApiPatchRouteRequest {
    /**
     * id of the route to update
     * @type {string}
     * @memberof RoutesApiPatchRoute
     */
    readonly id: string

    /**
     * 
     * @type {RoutesPatchRouteRequestBody}
     * @memberof RoutesApiPatchRoute
     */
    readonly patchRouteRequestBody: RoutesPatchRouteRequestBody
}

/**
 * Request parameters for v1deleteDispatchRouteById operation in RoutesApi.
 * @export
 * @interface RoutesApiV1deleteDispatchRouteByIdRequest
 */
export interface RoutesApiV1deleteDispatchRouteByIdRequest {
    /**
     * ID of the route. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;payrollId:ABFS18600&#x60;
     * @type {string}
     * @memberof RoutesApiV1deleteDispatchRouteById
     */
    readonly routeIdOrExternalId: string

    /**
     * 
     * @type {InlineObject}
     * @memberof RoutesApiV1deleteDispatchRouteById
     */
    readonly applyToFutureRoutes?: InlineObject
}

/**
 * RoutesApi - object-oriented interface
 * @export
 * @class RoutesApi
 * @extends {BaseAPI}
 */
export class RoutesApi extends BaseAPI {
    /**
     * Create a route. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/createDispatchRoute).
     * @summary Create a route
     * @param {RoutesApiCreateRouteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public createRoute(requestParameters: RoutesApiCreateRouteRequest, options?: any) {
        return RoutesApiFp(this.configuration).createRoute(requestParameters.createRouteRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a single route. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/getDispatchRouteById).
     * @summary Fetch a route
     * @param {RoutesApiFetchRouteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public fetchRoute(requestParameters: RoutesApiFetchRouteRequest, options?: any) {
        return RoutesApiFp(this.configuration).fetchRoute(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns multiple routes. The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllDispatchRoutes).
     * @summary Fetch all routes
     * @param {RoutesApiFetchRoutesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public fetchRoutes(requestParameters: RoutesApiFetchRoutesRequest, options?: any) {
        return RoutesApiFp(this.configuration).fetchRoutes(requestParameters.startTime, requestParameters.endTime, requestParameters.limit, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Subscribes to a feed of immutable, append-only updates for routes. The initial request to this feed endpoint returns a cursor, which can be used on the next request to fetch updated routes that have had state changes since that request.  The legacy version of this endpoint can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/fetchAllRouteJobUpdates).
     * @summary Get route updates
     * @param {RoutesApiGetRoutesFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public getRoutesFeed(requestParameters: RoutesApiGetRoutesFeedRequest = {}, options?: any) {
        return RoutesApiFp(this.configuration).getRoutesFeed(requestParameters.after, requestParameters.expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a route.  **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.  This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.  For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array.  The legacy version of this endpoint (which uses PUT instead of PATCH) can be found at [samsara.com/api-legacy](https://www.samsara.com/api-legacy#operation/updateDispatchRouteById).
     * @summary Update a route
     * @param {RoutesApiPatchRouteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public patchRoute(requestParameters: RoutesApiPatchRouteRequest, options?: any) {
        return RoutesApiFp(this.configuration).patchRoute(requestParameters.id, requestParameters.patchRouteRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Delete a dispatch route and its associated jobs.
     * @summary Delete a route
     * @param {RoutesApiV1deleteDispatchRouteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoutesApi
     */
    public v1deleteDispatchRouteById(requestParameters: RoutesApiV1deleteDispatchRouteByIdRequest, options?: any) {
        return RoutesApiFp(this.configuration).v1deleteDispatchRouteById(requestParameters.routeIdOrExternalId, requestParameters.applyToFutureRoutes, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SafetyApi - axios parameter creator
 * @export
 */
export const SafetyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch safety events for the organization in a given time period.
         * @summary List all safety events.
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSafetyEvents: async (startTime: string, endTime: string, after?: string, tagIds?: Array<string>, parentTagIds?: Array<string>, vehicleIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getSafetyEvents', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getSafetyEvents', 'endTime', endTime)
            const localVarPath = `/fleet/safety-events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (vehicleIds) {
                localVarQueryParameter['vehicleIds'] = vehicleIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the safety score for the driver.
         * @summary Fetch driver safety score
         * @param {number} driverId ID of the driver. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getDriverSafetyScore: async (driverId: number, startMs: number, endMs: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'driverId' is not null or undefined
            assertParamExists('v1getDriverSafetyScore', 'driverId', driverId)
            // verify required parameter 'startMs' is not null or undefined
            assertParamExists('v1getDriverSafetyScore', 'startMs', startMs)
            // verify required parameter 'endMs' is not null or undefined
            assertParamExists('v1getDriverSafetyScore', 'endMs', endMs)
            const localVarPath = `/v1/fleet/drivers/{driverId}/safety/score`
                .replace(`{${"driverId"}}`, encodeURIComponent(String(driverId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch harsh event details for a vehicle.
         * @summary Fetch harsh events
         * @param {number} vehicleId ID of the vehicle. Must contain only digits 0-9.
         * @param {number} timestamp Timestamp in milliseconds representing the timestamp of a harsh event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVehicleHarshEvent: async (vehicleId: number, timestamp: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('v1getVehicleHarshEvent', 'vehicleId', vehicleId)
            // verify required parameter 'timestamp' is not null or undefined
            assertParamExists('v1getVehicleHarshEvent', 'timestamp', timestamp)
            const localVarPath = `/v1/fleet/vehicles/{vehicleId}/safety/harsh_event`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the safety score for the vehicle.
         * @summary Fetch vehicle safety scores
         * @param {number} vehicleId ID of the vehicle. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVehicleSafetyScore: async (vehicleId: number, startMs: number, endMs: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('v1getVehicleSafetyScore', 'vehicleId', vehicleId)
            // verify required parameter 'startMs' is not null or undefined
            assertParamExists('v1getVehicleSafetyScore', 'startMs', startMs)
            // verify required parameter 'endMs' is not null or undefined
            assertParamExists('v1getVehicleSafetyScore', 'endMs', endMs)
            const localVarPath = `/v1/fleet/vehicles/{vehicleId}/safety/score`
                .replace(`{${"vehicleId"}}`, encodeURIComponent(String(vehicleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SafetyApi - functional programming interface
 * @export
 */
export const SafetyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SafetyApiAxiosParamCreator(configuration)
    return {
        /**
         * Fetch safety events for the organization in a given time period.
         * @summary List all safety events.
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSafetyEvents(startTime: string, endTime: string, after?: string, tagIds?: Array<string>, parentTagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SafetyEventsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSafetyEvents(startTime, endTime, after, tagIds, parentTagIds, vehicleIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the safety score for the driver.
         * @summary Fetch driver safety score
         * @param {number} driverId ID of the driver. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getDriverSafetyScore(driverId: number, startMs: number, endMs: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DriverSafetyScoreResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getDriverSafetyScore(driverId, startMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch harsh event details for a vehicle.
         * @summary Fetch harsh events
         * @param {number} vehicleId ID of the vehicle. Must contain only digits 0-9.
         * @param {number} timestamp Timestamp in milliseconds representing the timestamp of a harsh event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getVehicleHarshEvent(vehicleId: number, timestamp: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1VehicleHarshEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getVehicleHarshEvent(vehicleId, timestamp, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the safety score for the vehicle.
         * @summary Fetch vehicle safety scores
         * @param {number} vehicleId ID of the vehicle. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getVehicleSafetyScore(vehicleId: number, startMs: number, endMs: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1VehicleSafetyScoreResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getVehicleSafetyScore(vehicleId, startMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SafetyApi - factory interface
 * @export
 */
export const SafetyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SafetyApiFp(configuration)
    return {
        /**
         * Fetch safety events for the organization in a given time period.
         * @summary List all safety events.
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSafetyEvents(startTime: string, endTime: string, after?: string, tagIds?: Array<string>, parentTagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): AxiosPromise<SafetyEventsListResponse> {
            return localVarFp.getSafetyEvents(startTime, endTime, after, tagIds, parentTagIds, vehicleIds, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the safety score for the driver.
         * @summary Fetch driver safety score
         * @param {number} driverId ID of the driver. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getDriverSafetyScore(driverId: number, startMs: number, endMs: number, options?: any): AxiosPromise<V1DriverSafetyScoreResponse> {
            return localVarFp.v1getDriverSafetyScore(driverId, startMs, endMs, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch harsh event details for a vehicle.
         * @summary Fetch harsh events
         * @param {number} vehicleId ID of the vehicle. Must contain only digits 0-9.
         * @param {number} timestamp Timestamp in milliseconds representing the timestamp of a harsh event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVehicleHarshEvent(vehicleId: number, timestamp: number, options?: any): AxiosPromise<V1VehicleHarshEventResponse> {
            return localVarFp.v1getVehicleHarshEvent(vehicleId, timestamp, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the safety score for the vehicle.
         * @summary Fetch vehicle safety scores
         * @param {number} vehicleId ID of the vehicle. Must contain only digits 0-9.
         * @param {number} startMs Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {number} endMs Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getVehicleSafetyScore(vehicleId: number, startMs: number, endMs: number, options?: any): AxiosPromise<V1VehicleSafetyScoreResponse> {
            return localVarFp.v1getVehicleSafetyScore(vehicleId, startMs, endMs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSafetyEvents operation in SafetyApi.
 * @export
 * @interface SafetyApiGetSafetyEventsRequest
 */
export interface SafetyApiGetSafetyEventsRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof SafetyApiGetSafetyEvents
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof SafetyApiGetSafetyEvents
     */
    readonly endTime: string

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof SafetyApiGetSafetyEvents
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof SafetyApiGetSafetyEvents
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof SafetyApiGetSafetyEvents
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof SafetyApiGetSafetyEvents
     */
    readonly vehicleIds?: Array<string>
}

/**
 * Request parameters for v1getDriverSafetyScore operation in SafetyApi.
 * @export
 * @interface SafetyApiV1getDriverSafetyScoreRequest
 */
export interface SafetyApiV1getDriverSafetyScoreRequest {
    /**
     * ID of the driver. Must contain only digits 0-9.
     * @type {number}
     * @memberof SafetyApiV1getDriverSafetyScore
     */
    readonly driverId: number

    /**
     * Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
     * @type {number}
     * @memberof SafetyApiV1getDriverSafetyScore
     */
    readonly startMs: number

    /**
     * Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
     * @type {number}
     * @memberof SafetyApiV1getDriverSafetyScore
     */
    readonly endMs: number
}

/**
 * Request parameters for v1getVehicleHarshEvent operation in SafetyApi.
 * @export
 * @interface SafetyApiV1getVehicleHarshEventRequest
 */
export interface SafetyApiV1getVehicleHarshEventRequest {
    /**
     * ID of the vehicle. Must contain only digits 0-9.
     * @type {number}
     * @memberof SafetyApiV1getVehicleHarshEvent
     */
    readonly vehicleId: number

    /**
     * Timestamp in milliseconds representing the timestamp of a harsh event.
     * @type {number}
     * @memberof SafetyApiV1getVehicleHarshEvent
     */
    readonly timestamp: number
}

/**
 * Request parameters for v1getVehicleSafetyScore operation in SafetyApi.
 * @export
 * @interface SafetyApiV1getVehicleSafetyScoreRequest
 */
export interface SafetyApiV1getVehicleSafetyScoreRequest {
    /**
     * ID of the vehicle. Must contain only digits 0-9.
     * @type {number}
     * @memberof SafetyApiV1getVehicleSafetyScore
     */
    readonly vehicleId: number

    /**
     * Timestamp in milliseconds representing the start of the period to fetch, inclusive. Used in combination with endMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
     * @type {number}
     * @memberof SafetyApiV1getVehicleSafetyScore
     */
    readonly startMs: number

    /**
     * Timestamp in milliseconds representing the end of the period to fetch, inclusive. Used in combination with startMs. Total duration (endMs - startMs) must be greater than or equal to 1 hour.
     * @type {number}
     * @memberof SafetyApiV1getVehicleSafetyScore
     */
    readonly endMs: number
}

/**
 * SafetyApi - object-oriented interface
 * @export
 * @class SafetyApi
 * @extends {BaseAPI}
 */
export class SafetyApi extends BaseAPI {
    /**
     * Fetch safety events for the organization in a given time period.
     * @summary List all safety events.
     * @param {SafetyApiGetSafetyEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SafetyApi
     */
    public getSafetyEvents(requestParameters: SafetyApiGetSafetyEventsRequest, options?: any) {
        return SafetyApiFp(this.configuration).getSafetyEvents(requestParameters.startTime, requestParameters.endTime, requestParameters.after, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.vehicleIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the safety score for the driver.
     * @summary Fetch driver safety score
     * @param {SafetyApiV1getDriverSafetyScoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SafetyApi
     */
    public v1getDriverSafetyScore(requestParameters: SafetyApiV1getDriverSafetyScoreRequest, options?: any) {
        return SafetyApiFp(this.configuration).v1getDriverSafetyScore(requestParameters.driverId, requestParameters.startMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch harsh event details for a vehicle.
     * @summary Fetch harsh events
     * @param {SafetyApiV1getVehicleHarshEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SafetyApi
     */
    public v1getVehicleHarshEvent(requestParameters: SafetyApiV1getVehicleHarshEventRequest, options?: any) {
        return SafetyApiFp(this.configuration).v1getVehicleHarshEvent(requestParameters.vehicleId, requestParameters.timestamp, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch the safety score for the vehicle.
     * @summary Fetch vehicle safety scores
     * @param {SafetyApiV1getVehicleSafetyScoreRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SafetyApi
     */
    public v1getVehicleSafetyScore(requestParameters: SafetyApiV1getVehicleSafetyScoreRequest, options?: any) {
        return SafetyApiFp(this.configuration).v1getVehicleSafetyScore(requestParameters.vehicleId, requestParameters.startMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SensorsApi - axios parameter creator
 * @export
 */
export const SensorsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
         * @summary Get all sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensors: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/sensors/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get cargo monitor status (empty / full) for requested sensors.
         * @summary Get cargo status
         * @param {InlineObject4} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsCargo: async (v1sensorParam: InlineObject4, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1sensorParam' is not null or undefined
            assertParamExists('v1getSensorsCargo', 'v1sensorParam', v1sensorParam)
            const localVarPath = `/v1/sensors/cargo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1sensorParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get door monitor status (closed / open) for requested sensors.
         * @summary Get door status
         * @param {InlineObject5} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsDoor: async (v1sensorParam: InlineObject5, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1sensorParam' is not null or undefined
            assertParamExists('v1getSensorsDoor', 'v1sensorParam', v1sensorParam)
            const localVarPath = `/v1/sensors/door`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1sensorParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
         * @summary Get sensor history
         * @param {InlineObject6} historyParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsHistory: async (historyParam: InlineObject6, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'historyParam' is not null or undefined
            assertParamExists('v1getSensorsHistory', 'historyParam', historyParam)
            const localVarPath = `/v1/sensors/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(historyParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
         * @summary Get humidity
         * @param {InlineObject7} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsHumidity: async (v1sensorParam: InlineObject7, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1sensorParam' is not null or undefined
            assertParamExists('v1getSensorsHumidity', 'v1sensorParam', v1sensorParam)
            const localVarPath = `/v1/sensors/humidity`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1sensorParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
         * @summary Get temperature
         * @param {InlineObject8} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsTemperature: async (v1sensorParam: InlineObject8, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'v1sensorParam' is not null or undefined
            assertParamExists('v1getSensorsTemperature', 'v1sensorParam', v1sensorParam)
            const localVarPath = `/v1/sensors/temperature`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(v1sensorParam, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SensorsApi - functional programming interface
 * @export
 */
export const SensorsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SensorsApiAxiosParamCreator(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
         * @summary Get all sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getSensors(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2009>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getSensors(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get cargo monitor status (empty / full) for requested sensors.
         * @summary Get cargo status
         * @param {InlineObject4} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getSensorsCargo(v1sensorParam: InlineObject4, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1CargoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getSensorsCargo(v1sensorParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get door monitor status (closed / open) for requested sensors.
         * @summary Get door status
         * @param {InlineObject5} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getSensorsDoor(v1sensorParam: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1DoorResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getSensorsDoor(v1sensorParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
         * @summary Get sensor history
         * @param {InlineObject6} historyParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getSensorsHistory(historyParam: InlineObject6, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1SensorHistoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getSensorsHistory(historyParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
         * @summary Get humidity
         * @param {InlineObject7} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getSensorsHumidity(v1sensorParam: InlineObject7, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1HumidityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getSensorsHumidity(v1sensorParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
         * @summary Get temperature
         * @param {InlineObject8} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getSensorsTemperature(v1sensorParam: InlineObject8, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TemperatureResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getSensorsTemperature(v1sensorParam, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SensorsApi - factory interface
 * @export
 */
export const SensorsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SensorsApiFp(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
         * @summary Get all sensors
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensors(options?: any): AxiosPromise<InlineResponse2009> {
            return localVarFp.v1getSensors(options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get cargo monitor status (empty / full) for requested sensors.
         * @summary Get cargo status
         * @param {InlineObject4} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsCargo(v1sensorParam: InlineObject4, options?: any): AxiosPromise<V1CargoResponse> {
            return localVarFp.v1getSensorsCargo(v1sensorParam, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get door monitor status (closed / open) for requested sensors.
         * @summary Get door status
         * @param {InlineObject5} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsDoor(v1sensorParam: InlineObject5, options?: any): AxiosPromise<V1DoorResponse> {
            return localVarFp.v1getSensorsDoor(v1sensorParam, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
         * @summary Get sensor history
         * @param {InlineObject6} historyParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsHistory(historyParam: InlineObject6, options?: any): AxiosPromise<V1SensorHistoryResponse> {
            return localVarFp.v1getSensorsHistory(historyParam, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
         * @summary Get humidity
         * @param {InlineObject7} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsHumidity(v1sensorParam: InlineObject7, options?: any): AxiosPromise<V1HumidityResponse> {
            return localVarFp.v1getSensorsHumidity(v1sensorParam, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
         * @summary Get temperature
         * @param {InlineObject8} v1sensorParam 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getSensorsTemperature(v1sensorParam: InlineObject8, options?: any): AxiosPromise<V1TemperatureResponse> {
            return localVarFp.v1getSensorsTemperature(v1sensorParam, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1getSensorsCargo operation in SensorsApi.
 * @export
 * @interface SensorsApiV1getSensorsCargoRequest
 */
export interface SensorsApiV1getSensorsCargoRequest {
    /**
     * 
     * @type {InlineObject4}
     * @memberof SensorsApiV1getSensorsCargo
     */
    readonly v1sensorParam: InlineObject4
}

/**
 * Request parameters for v1getSensorsDoor operation in SensorsApi.
 * @export
 * @interface SensorsApiV1getSensorsDoorRequest
 */
export interface SensorsApiV1getSensorsDoorRequest {
    /**
     * 
     * @type {InlineObject5}
     * @memberof SensorsApiV1getSensorsDoor
     */
    readonly v1sensorParam: InlineObject5
}

/**
 * Request parameters for v1getSensorsHistory operation in SensorsApi.
 * @export
 * @interface SensorsApiV1getSensorsHistoryRequest
 */
export interface SensorsApiV1getSensorsHistoryRequest {
    /**
     * 
     * @type {InlineObject6}
     * @memberof SensorsApiV1getSensorsHistory
     */
    readonly historyParam: InlineObject6
}

/**
 * Request parameters for v1getSensorsHumidity operation in SensorsApi.
 * @export
 * @interface SensorsApiV1getSensorsHumidityRequest
 */
export interface SensorsApiV1getSensorsHumidityRequest {
    /**
     * 
     * @type {InlineObject7}
     * @memberof SensorsApiV1getSensorsHumidity
     */
    readonly v1sensorParam: InlineObject7
}

/**
 * Request parameters for v1getSensorsTemperature operation in SensorsApi.
 * @export
 * @interface SensorsApiV1getSensorsTemperatureRequest
 */
export interface SensorsApiV1getSensorsTemperatureRequest {
    /**
     * 
     * @type {InlineObject8}
     * @memberof SensorsApiV1getSensorsTemperature
     */
    readonly v1sensorParam: InlineObject8
}

/**
 * SensorsApi - object-oriented interface
 * @export
 * @class SensorsApi
 * @extends {BaseAPI}
 */
export class SensorsApi extends BaseAPI {
    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get sensor objects. This method returns a list of the sensor objects in the Samsara Cloud and information about them.
     * @summary Get all sensors
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v1getSensors(options?: any) {
        return SensorsApiFp(this.configuration).v1getSensors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get cargo monitor status (empty / full) for requested sensors.
     * @summary Get cargo status
     * @param {SensorsApiV1getSensorsCargoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v1getSensorsCargo(requestParameters: SensorsApiV1getSensorsCargoRequest, options?: any) {
        return SensorsApiFp(this.configuration).v1getSensorsCargo(requestParameters.v1sensorParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get door monitor status (closed / open) for requested sensors.
     * @summary Get door status
     * @param {SensorsApiV1getSensorsDoorRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v1getSensorsDoor(requestParameters: SensorsApiV1getSensorsDoorRequest, options?: any) {
        return SensorsApiFp(this.configuration).v1getSensorsDoor(requestParameters.v1sensorParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical data for specified sensors. This method returns a set of historical data for the specified sensors in the specified time range and at the specified time resolution.
     * @summary Get sensor history
     * @param {SensorsApiV1getSensorsHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v1getSensorsHistory(requestParameters: SensorsApiV1getSensorsHistoryRequest, options?: any) {
        return SensorsApiFp(this.configuration).v1getSensorsHistory(requestParameters.historyParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get humidity for requested sensors. This method returns the current relative humidity for the requested sensors.
     * @summary Get humidity
     * @param {SensorsApiV1getSensorsHumidityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v1getSensorsHumidity(requestParameters: SensorsApiV1getSensorsHumidityRequest, options?: any) {
        return SensorsApiFp(this.configuration).v1getSensorsHumidity(requestParameters.v1sensorParam, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get temperature for requested sensors. This method returns the current ambient temperature (and probe temperature if applicable) for the requested sensors.
     * @summary Get temperature
     * @param {SensorsApiV1getSensorsTemperatureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SensorsApi
     */
    public v1getSensorsTemperature(requestParameters: SensorsApiV1getSensorsTemperatureRequest, options?: any) {
        return SensorsApiFp(this.configuration).v1getSensorsTemperature(requestParameters.v1sensorParam, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TachographEUOnlyApi - axios parameter creator
 * @export
 */
export const TachographEUOnlyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns all known tachograph activity for all specified drivers in the time range.
         * @summary Get driver tachograph activity
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. It can\&#39;t be more than 30 days past startTime. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriverTachographActivity: async (startTime: string, endTime: string, after?: string, driverIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDriverTachographActivity', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDriverTachographActivity', 'endTime', endTime)
            const localVarPath = `/fleet/drivers/tachograph-activity/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (driverIds) {
                localVarQueryParameter['driverIds'] = driverIds.join(COLLECTION_FORMATS.csv);
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all known tachograph files for all specified drivers in the time range.
         * @summary Get tachograph driver files
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriverTachographFiles: async (startTime: string, endTime: string, after?: string, driverIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getDriverTachographFiles', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getDriverTachographFiles', 'endTime', endTime)
            const localVarPath = `/fleet/drivers/tachograph-files/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (driverIds) {
                localVarQueryParameter['driverIds'] = driverIds.join(COLLECTION_FORMATS.csv);
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all known tachograph files for all specified vehicles in the time range.
         * @summary Get tachograph vehicle files
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleTachographFiles: async (startTime: string, endTime: string, after?: string, vehicleIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getVehicleTachographFiles', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getVehicleTachographFiles', 'endTime', endTime)
            const localVarPath = `/fleet/vehicles/tachograph-files/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (vehicleIds) {
                localVarQueryParameter['vehicleIds'] = vehicleIds.join(COLLECTION_FORMATS.csv);
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TachographEUOnlyApi - functional programming interface
 * @export
 */
export const TachographEUOnlyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TachographEUOnlyApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns all known tachograph activity for all specified drivers in the time range.
         * @summary Get driver tachograph activity
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. It can\&#39;t be more than 30 days past startTime. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriverTachographActivity(startTime: string, endTime: string, after?: string, driverIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DriverTachographActivityResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriverTachographActivity(startTime, endTime, after, driverIds, parentTagIds, tagIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all known tachograph files for all specified drivers in the time range.
         * @summary Get tachograph driver files
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDriverTachographFiles(startTime: string, endTime: string, after?: string, driverIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TachographDriverFilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDriverTachographFiles(startTime, endTime, after, driverIds, parentTagIds, tagIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all known tachograph files for all specified vehicles in the time range.
         * @summary Get tachograph vehicle files
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicleTachographFiles(startTime: string, endTime: string, after?: string, vehicleIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TachographVehicleFilesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicleTachographFiles(startTime, endTime, after, vehicleIds, parentTagIds, tagIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TachographEUOnlyApi - factory interface
 * @export
 */
export const TachographEUOnlyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TachographEUOnlyApiFp(configuration)
    return {
        /**
         * Returns all known tachograph activity for all specified drivers in the time range.
         * @summary Get driver tachograph activity
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. It can\&#39;t be more than 30 days past startTime. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriverTachographActivity(startTime: string, endTime: string, after?: string, driverIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): AxiosPromise<DriverTachographActivityResponse> {
            return localVarFp.getDriverTachographActivity(startTime, endTime, after, driverIds, parentTagIds, tagIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all known tachograph files for all specified drivers in the time range.
         * @summary Get tachograph driver files
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [driverIds] A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDriverTachographFiles(startTime: string, endTime: string, after?: string, driverIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): AxiosPromise<TachographDriverFilesResponse> {
            return localVarFp.getDriverTachographFiles(startTime, endTime, after, driverIds, parentTagIds, tagIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all known tachograph files for all specified vehicles in the time range.
         * @summary Get tachograph vehicle files
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleTachographFiles(startTime: string, endTime: string, after?: string, vehicleIds?: Array<string>, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): AxiosPromise<TachographVehicleFilesResponse> {
            return localVarFp.getVehicleTachographFiles(startTime, endTime, after, vehicleIds, parentTagIds, tagIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getDriverTachographActivity operation in TachographEUOnlyApi.
 * @export
 * @interface TachographEUOnlyApiGetDriverTachographActivityRequest
 */
export interface TachographEUOnlyApiGetDriverTachographActivityRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof TachographEUOnlyApiGetDriverTachographActivity
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. It can\&#39;t be more than 30 days past startTime. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof TachographEUOnlyApiGetDriverTachographActivity
     */
    readonly endTime: string

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof TachographEUOnlyApiGetDriverTachographActivity
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetDriverTachographActivity
     */
    readonly driverIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetDriverTachographActivity
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetDriverTachographActivity
     */
    readonly tagIds?: Array<string>
}

/**
 * Request parameters for getDriverTachographFiles operation in TachographEUOnlyApi.
 * @export
 * @interface TachographEUOnlyApiGetDriverTachographFilesRequest
 */
export interface TachographEUOnlyApiGetDriverTachographFilesRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof TachographEUOnlyApiGetDriverTachographFiles
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof TachographEUOnlyApiGetDriverTachographFiles
     */
    readonly endTime: string

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof TachographEUOnlyApiGetDriverTachographFiles
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of driver IDs. Example: &#x60;driverIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetDriverTachographFiles
     */
    readonly driverIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetDriverTachographFiles
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetDriverTachographFiles
     */
    readonly tagIds?: Array<string>
}

/**
 * Request parameters for getVehicleTachographFiles operation in TachographEUOnlyApi.
 * @export
 * @interface TachographEUOnlyApiGetVehicleTachographFilesRequest
 */
export interface TachographEUOnlyApiGetVehicleTachographFilesRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof TachographEUOnlyApiGetVehicleTachographFiles
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof TachographEUOnlyApiGetVehicleTachographFiles
     */
    readonly endTime: string

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof TachographEUOnlyApiGetVehicleTachographFiles
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetVehicleTachographFiles
     */
    readonly vehicleIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetVehicleTachographFiles
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof TachographEUOnlyApiGetVehicleTachographFiles
     */
    readonly tagIds?: Array<string>
}

/**
 * TachographEUOnlyApi - object-oriented interface
 * @export
 * @class TachographEUOnlyApi
 * @extends {BaseAPI}
 */
export class TachographEUOnlyApi extends BaseAPI {
    /**
     * Returns all known tachograph activity for all specified drivers in the time range.
     * @summary Get driver tachograph activity
     * @param {TachographEUOnlyApiGetDriverTachographActivityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TachographEUOnlyApi
     */
    public getDriverTachographActivity(requestParameters: TachographEUOnlyApiGetDriverTachographActivityRequest, options?: any) {
        return TachographEUOnlyApiFp(this.configuration).getDriverTachographActivity(requestParameters.startTime, requestParameters.endTime, requestParameters.after, requestParameters.driverIds, requestParameters.parentTagIds, requestParameters.tagIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all known tachograph files for all specified drivers in the time range.
     * @summary Get tachograph driver files
     * @param {TachographEUOnlyApiGetDriverTachographFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TachographEUOnlyApi
     */
    public getDriverTachographFiles(requestParameters: TachographEUOnlyApiGetDriverTachographFilesRequest, options?: any) {
        return TachographEUOnlyApiFp(this.configuration).getDriverTachographFiles(requestParameters.startTime, requestParameters.endTime, requestParameters.after, requestParameters.driverIds, requestParameters.parentTagIds, requestParameters.tagIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all known tachograph files for all specified vehicles in the time range.
     * @summary Get tachograph vehicle files
     * @param {TachographEUOnlyApiGetVehicleTachographFilesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TachographEUOnlyApi
     */
    public getVehicleTachographFiles(requestParameters: TachographEUOnlyApiGetVehicleTachographFilesRequest, options?: any) {
        return TachographEUOnlyApiFp(this.configuration).getVehicleTachographFiles(requestParameters.startTime, requestParameters.endTime, requestParameters.after, requestParameters.vehicleIds, requestParameters.parentTagIds, requestParameters.tagIds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new tag for the organization.
         * @summary Create a tag
         * @param {CreateTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag: async (tag: CreateTagRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('createTag', 'tag', tag)
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tag, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Permanently deletes a tag.
         * @summary Delete a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteTag', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch a tag by id.
         * @summary Retrieve a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTag', 'id', id)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all of the tags for an organization.
         * @summary List all tags
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags: async (limit?: number, after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tags`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing tag. **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.    This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.    For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array.
         * @summary Update a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {PatchTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTag: async (id: string, tag: PatchTagRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchTag', 'id', id)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('patchTag', 'tag', tag)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tag, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body.
         * @summary Update a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {ReplaceTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTag: async (id: string, tag: ReplaceTagRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('replaceTag', 'id', id)
            // verify required parameter 'tag' is not null or undefined
            assertParamExists('replaceTag', 'tag', tag)
            const localVarPath = `/tags/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tag, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TagsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new tag for the organization.
         * @summary Create a tag
         * @param {CreateTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTag(tag: CreateTagRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTag(tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Permanently deletes a tag.
         * @summary Delete a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTag(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTag(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetch a tag by id.
         * @summary Retrieve a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTag(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTag(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all of the tags for an organization.
         * @summary List all tags
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTags(limit?: number, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTagsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTags(limit, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing tag. **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.    This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.    For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array.
         * @summary Update a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {PatchTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTag(id: string, tag: PatchTagRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTag(id, tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body.
         * @summary Update a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {ReplaceTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async replaceTag(id: string, tag: ReplaceTagRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.replaceTag(id, tag, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TagsApiFp(configuration)
    return {
        /**
         * Create a new tag for the organization.
         * @summary Create a tag
         * @param {CreateTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(tag: CreateTagRequest, options?: any): AxiosPromise<TagResponse> {
            return localVarFp.createTag(tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Permanently deletes a tag.
         * @summary Delete a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteTag(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch a tag by id.
         * @summary Retrieve a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(id: string, options?: any): AxiosPromise<TagResponse> {
            return localVarFp.getTag(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Return all of the tags for an organization.
         * @summary List all tags
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(limit?: number, after?: string, options?: any): AxiosPromise<ListTagsResponse> {
            return localVarFp.listTags(limit, after, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing tag. **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.    This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.    For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array.
         * @summary Update a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {PatchTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTag(id: string, tag: PatchTagRequest, options?: any): AxiosPromise<TagResponse> {
            return localVarFp.patchTag(id, tag, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body.
         * @summary Update a tag
         * @param {string} id ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
         * @param {ReplaceTagRequest} tag 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        replaceTag(id: string, tag: ReplaceTagRequest, options?: any): AxiosPromise<TagResponse> {
            return localVarFp.replaceTag(id, tag, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createTag operation in TagsApi.
 * @export
 * @interface TagsApiCreateTagRequest
 */
export interface TagsApiCreateTagRequest {
    /**
     * 
     * @type {CreateTagRequest}
     * @memberof TagsApiCreateTag
     */
    readonly tag: CreateTagRequest
}

/**
 * Request parameters for deleteTag operation in TagsApi.
 * @export
 * @interface TagsApiDeleteTagRequest
 */
export interface TagsApiDeleteTagRequest {
    /**
     * ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
     * @type {string}
     * @memberof TagsApiDeleteTag
     */
    readonly id: string
}

/**
 * Request parameters for getTag operation in TagsApi.
 * @export
 * @interface TagsApiGetTagRequest
 */
export interface TagsApiGetTagRequest {
    /**
     * ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
     * @type {string}
     * @memberof TagsApiGetTag
     */
    readonly id: string
}

/**
 * Request parameters for listTags operation in TagsApi.
 * @export
 * @interface TagsApiListTagsRequest
 */
export interface TagsApiListTagsRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof TagsApiListTags
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof TagsApiListTags
     */
    readonly after?: string
}

/**
 * Request parameters for patchTag operation in TagsApi.
 * @export
 * @interface TagsApiPatchTagRequest
 */
export interface TagsApiPatchTagRequest {
    /**
     * ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
     * @type {string}
     * @memberof TagsApiPatchTag
     */
    readonly id: string

    /**
     * 
     * @type {PatchTagRequest}
     * @memberof TagsApiPatchTag
     */
    readonly tag: PatchTagRequest
}

/**
 * Request parameters for replaceTag operation in TagsApi.
 * @export
 * @interface TagsApiReplaceTagRequest
 */
export interface TagsApiReplaceTagRequest {
    /**
     * ID of the Tag. This can either be the Samsara-provided ID or an external ID. External IDs are customer-specified key-value pairs created in the POST or PATCH requests of this resource. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;crmId:abc123&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.name:ELD-exempt&#x60;.
     * @type {string}
     * @memberof TagsApiReplaceTag
     */
    readonly id: string

    /**
     * 
     * @type {ReplaceTagRequest}
     * @memberof TagsApiReplaceTag
     */
    readonly tag: ReplaceTagRequest
}

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * Create a new tag for the organization.
     * @summary Create a tag
     * @param {TagsApiCreateTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public createTag(requestParameters: TagsApiCreateTagRequest, options?: any) {
        return TagsApiFp(this.configuration).createTag(requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Permanently deletes a tag.
     * @summary Delete a tag
     * @param {TagsApiDeleteTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public deleteTag(requestParameters: TagsApiDeleteTagRequest, options?: any) {
        return TagsApiFp(this.configuration).deleteTag(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetch a tag by id.
     * @summary Retrieve a tag
     * @param {TagsApiGetTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTag(requestParameters: TagsApiGetTagRequest, options?: any) {
        return TagsApiFp(this.configuration).getTag(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all of the tags for an organization.
     * @summary List all tags
     * @param {TagsApiListTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public listTags(requestParameters: TagsApiListTagsRequest = {}, options?: any) {
        return TagsApiFp(this.configuration).listTags(requestParameters.limit, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing tag. **Note** this implementation of patch uses [the JSON merge patch](https://tools.ietf.org/html/rfc7396) proposed standard.    This means that any fields included in the patch request will _overwrite_ fields which exist on the target resource.    For arrays, this means any array included in the request will _replace_ the array that exists at the specified path, it will not _add_ to the existing array.
     * @summary Update a tag
     * @param {TagsApiPatchTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public patchTag(requestParameters: TagsApiPatchTagRequest, options?: any) {
        return TagsApiFp(this.configuration).patchTag(requestParameters.id, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a tag with a new name and new members. This API call would replace all old members of a tag with new members specified in the request body.
     * @summary Update a tag
     * @param {TagsApiReplaceTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public replaceTag(requestParameters: TagsApiReplaceTagRequest, options?: any) {
        return TagsApiFp(this.configuration).replaceTag(requestParameters.id, requestParameters.tag, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TrailerAssignmentsApi - axios parameter creator
 * @export
 */
export const TrailerAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch trailer assignment data for all trailers in your organization.
         * @summary List trailer assignments for all trailers
         * @param {number} [startMs] Timestamp in Unix epoch miliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.
         * @param {number} [endMs] Timestamp in Unix epoch miliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAllTrailerAssignments: async (startMs?: number, endMs?: number, limit?: number, startingAfter?: string, endingBefore?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/fleet/trailers/assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['startingAfter'] = startingAfter;
            }

            if (endingBefore !== undefined) {
                localVarQueryParameter['endingBefore'] = endingBefore;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch trailer assignment data for a single trailer.
         * @summary List trailer assignments for a given trailer
         * @param {number} trailerId ID of trailer. Must contain only digits 0-9.
         * @param {number} [startMs] Timestamp in Unix epoch milliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.
         * @param {number} [endMs] Timestamp in Unix epoch milliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getFleetTrailerAssignments: async (trailerId: number, startMs?: number, endMs?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'trailerId' is not null or undefined
            assertParamExists('v1getFleetTrailerAssignments', 'trailerId', trailerId)
            const localVarPath = `/v1/fleet/trailers/{trailerId}/assignments`
                .replace(`{${"trailerId"}}`, encodeURIComponent(String(trailerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrailerAssignmentsApi - functional programming interface
 * @export
 */
export const TrailerAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrailerAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch trailer assignment data for all trailers in your organization.
         * @summary List trailer assignments for all trailers
         * @param {number} [startMs] Timestamp in Unix epoch miliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.
         * @param {number} [endMs] Timestamp in Unix epoch miliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getAllTrailerAssignments(startMs?: number, endMs?: number, limit?: number, startingAfter?: string, endingBefore?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2007>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getAllTrailerAssignments(startMs, endMs, limit, startingAfter, endingBefore, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch trailer assignment data for a single trailer.
         * @summary List trailer assignments for a given trailer
         * @param {number} trailerId ID of trailer. Must contain only digits 0-9.
         * @param {number} [startMs] Timestamp in Unix epoch milliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.
         * @param {number} [endMs] Timestamp in Unix epoch milliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getFleetTrailerAssignments(trailerId: number, startMs?: number, endMs?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TrailerAssignmentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getFleetTrailerAssignments(trailerId, startMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrailerAssignmentsApi - factory interface
 * @export
 */
export const TrailerAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrailerAssignmentsApiFp(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch trailer assignment data for all trailers in your organization.
         * @summary List trailer assignments for all trailers
         * @param {number} [startMs] Timestamp in Unix epoch miliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.
         * @param {number} [endMs] Timestamp in Unix epoch miliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time
         * @param {number} [limit] Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
         * @param {string} [startingAfter] Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
         * @param {string} [endingBefore] Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getAllTrailerAssignments(startMs?: number, endMs?: number, limit?: number, startingAfter?: string, endingBefore?: string, options?: any): AxiosPromise<InlineResponse2007> {
            return localVarFp.v1getAllTrailerAssignments(startMs, endMs, limit, startingAfter, endingBefore, options).then((request) => request(axios, basePath));
        },
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch trailer assignment data for a single trailer.
         * @summary List trailer assignments for a given trailer
         * @param {number} trailerId ID of trailer. Must contain only digits 0-9.
         * @param {number} [startMs] Timestamp in Unix epoch milliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.
         * @param {number} [endMs] Timestamp in Unix epoch milliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getFleetTrailerAssignments(trailerId: number, startMs?: number, endMs?: number, options?: any): AxiosPromise<V1TrailerAssignmentsResponse> {
            return localVarFp.v1getFleetTrailerAssignments(trailerId, startMs, endMs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1getAllTrailerAssignments operation in TrailerAssignmentsApi.
 * @export
 * @interface TrailerAssignmentsApiV1getAllTrailerAssignmentsRequest
 */
export interface TrailerAssignmentsApiV1getAllTrailerAssignmentsRequest {
    /**
     * Timestamp in Unix epoch miliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.
     * @type {number}
     * @memberof TrailerAssignmentsApiV1getAllTrailerAssignments
     */
    readonly startMs?: number

    /**
     * Timestamp in Unix epoch miliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time
     * @type {number}
     * @memberof TrailerAssignmentsApiV1getAllTrailerAssignments
     */
    readonly endMs?: number

    /**
     * Pagination parameter indicating the number of results to return in this request. Used in conjunction with either \&#39;startingAfter\&#39; or \&#39;endingBefore\&#39;.
     * @type {number}
     * @memberof TrailerAssignmentsApiV1getAllTrailerAssignments
     */
    readonly limit?: number

    /**
     * Pagination parameter indicating the cursor position to continue returning results after. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;endingBefore\&#39; parameter.
     * @type {string}
     * @memberof TrailerAssignmentsApiV1getAllTrailerAssignments
     */
    readonly startingAfter?: string

    /**
     * Pagination parameter indicating the cursor position to return results before. Used in conjunction with the \&#39;limit\&#39; parameter. Mutually exclusive with \&#39;startingAfter\&#39; parameter.
     * @type {string}
     * @memberof TrailerAssignmentsApiV1getAllTrailerAssignments
     */
    readonly endingBefore?: string
}

/**
 * Request parameters for v1getFleetTrailerAssignments operation in TrailerAssignmentsApi.
 * @export
 * @interface TrailerAssignmentsApiV1getFleetTrailerAssignmentsRequest
 */
export interface TrailerAssignmentsApiV1getFleetTrailerAssignmentsRequest {
    /**
     * ID of trailer. Must contain only digits 0-9.
     * @type {number}
     * @memberof TrailerAssignmentsApiV1getFleetTrailerAssignments
     */
    readonly trailerId: number

    /**
     * Timestamp in Unix epoch milliseconds representing the start of the period to fetch. Omitting both startMs and endMs only returns current assignments.
     * @type {number}
     * @memberof TrailerAssignmentsApiV1getFleetTrailerAssignments
     */
    readonly startMs?: number

    /**
     * Timestamp in Unix epoch milliseconds representing the end of the period to fetch. Omitting endMs sets endMs as the current time
     * @type {number}
     * @memberof TrailerAssignmentsApiV1getFleetTrailerAssignments
     */
    readonly endMs?: number
}

/**
 * TrailerAssignmentsApi - object-oriented interface
 * @export
 * @class TrailerAssignmentsApi
 * @extends {BaseAPI}
 */
export class TrailerAssignmentsApi extends BaseAPI {
    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch trailer assignment data for all trailers in your organization.
     * @summary List trailer assignments for all trailers
     * @param {TrailerAssignmentsApiV1getAllTrailerAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrailerAssignmentsApi
     */
    public v1getAllTrailerAssignments(requestParameters: TrailerAssignmentsApiV1getAllTrailerAssignmentsRequest = {}, options?: any) {
        return TrailerAssignmentsApiFp(this.configuration).v1getAllTrailerAssignments(requestParameters.startMs, requestParameters.endMs, requestParameters.limit, requestParameters.startingAfter, requestParameters.endingBefore, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Fetch trailer assignment data for a single trailer.
     * @summary List trailer assignments for a given trailer
     * @param {TrailerAssignmentsApiV1getFleetTrailerAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrailerAssignmentsApi
     */
    public v1getFleetTrailerAssignments(requestParameters: TrailerAssignmentsApiV1getFleetTrailerAssignmentsRequest, options?: any) {
        return TrailerAssignmentsApiFp(this.configuration).v1getFleetTrailerAssignments(requestParameters.trailerId, requestParameters.startMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TripsApi - axios parameter creator
 * @export
 */
export const TripsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
         * @summary Get vehicle trips
         * @param {number} vehicleId Vehicle ID to query.
         * @param {number} startMs Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs
         * @param {number} endMs End of the time range, specified in milliseconds UNIX time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getFleetTrips: async (vehicleId: number, startMs: number, endMs: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'vehicleId' is not null or undefined
            assertParamExists('v1getFleetTrips', 'vehicleId', vehicleId)
            // verify required parameter 'startMs' is not null or undefined
            assertParamExists('v1getFleetTrips', 'startMs', startMs)
            // verify required parameter 'endMs' is not null or undefined
            assertParamExists('v1getFleetTrips', 'endMs', endMs)
            const localVarPath = `/v1/fleet/trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (vehicleId !== undefined) {
                localVarQueryParameter['vehicleId'] = vehicleId;
            }

            if (startMs !== undefined) {
                localVarQueryParameter['startMs'] = startMs;
            }

            if (endMs !== undefined) {
                localVarQueryParameter['endMs'] = endMs;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TripsApi - functional programming interface
 * @export
 */
export const TripsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TripsApiAxiosParamCreator(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
         * @summary Get vehicle trips
         * @param {number} vehicleId Vehicle ID to query.
         * @param {number} startMs Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs
         * @param {number} endMs End of the time range, specified in milliseconds UNIX time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1getFleetTrips(vehicleId: number, startMs: number, endMs: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<V1TripResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.v1getFleetTrips(vehicleId, startMs, endMs, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TripsApi - factory interface
 * @export
 */
export const TripsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TripsApiFp(configuration)
    return {
        /**
         * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
         * @summary Get vehicle trips
         * @param {number} vehicleId Vehicle ID to query.
         * @param {number} startMs Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs
         * @param {number} endMs End of the time range, specified in milliseconds UNIX time.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1getFleetTrips(vehicleId: number, startMs: number, endMs: number, options?: any): AxiosPromise<V1TripResponse> {
            return localVarFp.v1getFleetTrips(vehicleId, startMs, endMs, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for v1getFleetTrips operation in TripsApi.
 * @export
 * @interface TripsApiV1getFleetTripsRequest
 */
export interface TripsApiV1getFleetTripsRequest {
    /**
     * Vehicle ID to query.
     * @type {number}
     * @memberof TripsApiV1getFleetTrips
     */
    readonly vehicleId: number

    /**
     * Beginning of the time range, specified in milliseconds UNIX time. Limited to a 90 day window with respect to startMs and endMs
     * @type {number}
     * @memberof TripsApiV1getFleetTrips
     */
    readonly startMs: number

    /**
     * End of the time range, specified in milliseconds UNIX time.
     * @type {number}
     * @memberof TripsApiV1getFleetTrips
     */
    readonly endMs: number
}

/**
 * TripsApi - object-oriented interface
 * @export
 * @class TripsApi
 * @extends {BaseAPI}
 */
export class TripsApi extends BaseAPI {
    /**
     * <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> This endpoint is still on our legacy API. </nh> </n>  Get historical trips data for specified vehicle. This method returns a set of historical trips data for the specified vehicle in the specified time range.
     * @summary Get vehicle trips
     * @param {TripsApiV1getFleetTripsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public v1getFleetTrips(requestParameters: TripsApiV1getFleetTripsRequest, options?: any) {
        return TripsApiFp(this.configuration).v1getFleetTrips(requestParameters.vehicleId, requestParameters.startMs, requestParameters.endMs, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add a user to the organization.
         * @summary Create a user
         * @param {CreateUserRequest} user The user to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (user: CreateUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'user' is not null or undefined
            assertParamExists('createUser', 'user', user)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete the given user.
         * @summary Delete a user
         * @param {string} id Unique identifier for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a specific user\'s information.
         * @summary Retrieve a user
         * @param {string} id Unique identifier for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all user roles in an organization.
         * @summary List all user roles
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRoles: async (limit?: number, after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user-roles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all users in an organization.
         * @summary List all users
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers: async (limit?: number, after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a specific user\'s information.
         * @summary Update a user
         * @param {string} id Unique identifier for the user.
         * @param {UpdateUserRequest} user Updates to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: string, user: UpdateUserRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'user' is not null or undefined
            assertParamExists('updateUser', 'user', user)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(user, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * Add a user to the organization.
         * @summary Create a user
         * @param {CreateUserRequest} user The user to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(user: CreateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete the given user.
         * @summary Delete a user
         * @param {string} id Unique identifier for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a specific user\'s information.
         * @summary Retrieve a user
         * @param {string} id Unique identifier for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all user roles in an organization.
         * @summary List all user roles
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUserRoles(limit?: number, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUserRolesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUserRoles(limit, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all users in an organization.
         * @summary List all users
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listUsers(limit?: number, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListUsersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listUsers(limit, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a specific user\'s information.
         * @summary Update a user
         * @param {string} id Unique identifier for the user.
         * @param {UpdateUserRequest} user Updates to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: string, user: UpdateUserRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, user, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * Add a user to the organization.
         * @summary Create a user
         * @param {CreateUserRequest} user The user to create.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(user: CreateUserRequest, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.createUser(user, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete the given user.
         * @summary Delete a user
         * @param {string} id Unique identifier for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a specific user\'s information.
         * @summary Retrieve a user
         * @param {string} id Unique identifier for the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: string, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all user roles in an organization.
         * @summary List all user roles
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUserRoles(limit?: number, after?: string, options?: any): AxiosPromise<ListUserRolesResponse> {
            return localVarFp.listUserRoles(limit, after, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all users in an organization.
         * @summary List all users
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listUsers(limit?: number, after?: string, options?: any): AxiosPromise<ListUsersResponse> {
            return localVarFp.listUsers(limit, after, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a specific user\'s information.
         * @summary Update a user
         * @param {string} id Unique identifier for the user.
         * @param {UpdateUserRequest} user Updates to the user.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: string, user: UpdateUserRequest, options?: any): AxiosPromise<UserResponse> {
            return localVarFp.updateUser(id, user, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createUser operation in UsersApi.
 * @export
 * @interface UsersApiCreateUserRequest
 */
export interface UsersApiCreateUserRequest {
    /**
     * The user to create.
     * @type {CreateUserRequest}
     * @memberof UsersApiCreateUser
     */
    readonly user: CreateUserRequest
}

/**
 * Request parameters for deleteUser operation in UsersApi.
 * @export
 * @interface UsersApiDeleteUserRequest
 */
export interface UsersApiDeleteUserRequest {
    /**
     * Unique identifier for the user.
     * @type {string}
     * @memberof UsersApiDeleteUser
     */
    readonly id: string
}

/**
 * Request parameters for getUser operation in UsersApi.
 * @export
 * @interface UsersApiGetUserRequest
 */
export interface UsersApiGetUserRequest {
    /**
     * Unique identifier for the user.
     * @type {string}
     * @memberof UsersApiGetUser
     */
    readonly id: string
}

/**
 * Request parameters for listUserRoles operation in UsersApi.
 * @export
 * @interface UsersApiListUserRolesRequest
 */
export interface UsersApiListUserRolesRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof UsersApiListUserRoles
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof UsersApiListUserRoles
     */
    readonly after?: string
}

/**
 * Request parameters for listUsers operation in UsersApi.
 * @export
 * @interface UsersApiListUsersRequest
 */
export interface UsersApiListUsersRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof UsersApiListUsers
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof UsersApiListUsers
     */
    readonly after?: string
}

/**
 * Request parameters for updateUser operation in UsersApi.
 * @export
 * @interface UsersApiUpdateUserRequest
 */
export interface UsersApiUpdateUserRequest {
    /**
     * Unique identifier for the user.
     * @type {string}
     * @memberof UsersApiUpdateUser
     */
    readonly id: string

    /**
     * Updates to the user.
     * @type {UpdateUserRequest}
     * @memberof UsersApiUpdateUser
     */
    readonly user: UpdateUserRequest
}

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * Add a user to the organization.
     * @summary Create a user
     * @param {UsersApiCreateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public createUser(requestParameters: UsersApiCreateUserRequest, options?: any) {
        return UsersApiFp(this.configuration).createUser(requestParameters.user, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete the given user.
     * @summary Delete a user
     * @param {UsersApiDeleteUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public deleteUser(requestParameters: UsersApiDeleteUserRequest, options?: any) {
        return UsersApiFp(this.configuration).deleteUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a specific user\'s information.
     * @summary Retrieve a user
     * @param {UsersApiGetUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public getUser(requestParameters: UsersApiGetUserRequest, options?: any) {
        return UsersApiFp(this.configuration).getUser(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all user roles in an organization.
     * @summary List all user roles
     * @param {UsersApiListUserRolesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUserRoles(requestParameters: UsersApiListUserRolesRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).listUserRoles(requestParameters.limit, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all users in an organization.
     * @summary List all users
     * @param {UsersApiListUsersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public listUsers(requestParameters: UsersApiListUsersRequest = {}, options?: any) {
        return UsersApiFp(this.configuration).listUsers(requestParameters.limit, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a specific user\'s information.
     * @summary Update a user
     * @param {UsersApiUpdateUserRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public updateUser(requestParameters: UsersApiUpdateUserRequest, options?: any) {
        return UsersApiFp(this.configuration).updateUser(requestParameters.id, requestParameters.user, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VehicleDriverAssignmentsApi - axios parameter creator
 * @export
 */
export const VehicleDriverAssignmentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all driver assignments for the requested vehicles in the requested time range. The only type of assignment supported right now are assignments created through the driver app.
         * @summary Get all drivers assigned to a set of vehicles
         * @param {string} [startTime]  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [endTime]  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehiclesDriverAssignments: async (startTime?: string, endTime?: string, vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/vehicles/driver-assignments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (vehicleIds !== undefined) {
                localVarQueryParameter['vehicleIds'] = vehicleIds;
            }

            if (tagIds !== undefined) {
                localVarQueryParameter['tagIds'] = tagIds;
            }

            if (parentTagIds !== undefined) {
                localVarQueryParameter['parentTagIds'] = parentTagIds;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleDriverAssignmentsApi - functional programming interface
 * @export
 */
export const VehicleDriverAssignmentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleDriverAssignmentsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get all driver assignments for the requested vehicles in the requested time range. The only type of assignment supported right now are assignments created through the driver app.
         * @summary Get all drivers assigned to a set of vehicles
         * @param {string} [startTime]  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [endTime]  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehiclesDriverAssignments(startTime?: string, endTime?: string, vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsResponseBody>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehiclesDriverAssignments(startTime, endTime, vehicleIds, tagIds, parentTagIds, after, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehicleDriverAssignmentsApi - factory interface
 * @export
 */
export const VehicleDriverAssignmentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleDriverAssignmentsApiFp(configuration)
    return {
        /**
         * Get all driver assignments for the requested vehicles in the requested time range. The only type of assignment supported right now are assignments created through the driver app.
         * @summary Get all drivers assigned to a set of vehicles
         * @param {string} [startTime]  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [endTime]  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
         * @param {string} [vehicleIds]  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
         * @param {string} [tagIds]  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {string} [parentTagIds]  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {string} [after]  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehiclesDriverAssignments(startTime?: string, endTime?: string, vehicleIds?: string, tagIds?: string, parentTagIds?: string, after?: string, options?: any): AxiosPromise<VehiclesDriverAssignmentsGetVehiclesDriverAssignmentsResponseBody> {
            return localVarFp.getVehiclesDriverAssignments(startTime, endTime, vehicleIds, tagIds, parentTagIds, after, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getVehiclesDriverAssignments operation in VehicleDriverAssignmentsApi.
 * @export
 * @interface VehicleDriverAssignmentsApiGetVehiclesDriverAssignmentsRequest
 */
export interface VehicleDriverAssignmentsApiGetVehiclesDriverAssignmentsRequest {
    /**
     *  A start time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
     * @type {string}
     * @memberof VehicleDriverAssignmentsApiGetVehiclesDriverAssignments
     */
    readonly startTime?: string

    /**
     *  An end time in RFC 3339 format. Defaults to now if not provided. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00). The maximum allowed startTime-endTime range is 7 days.
     * @type {string}
     * @memberof VehicleDriverAssignmentsApiGetVehiclesDriverAssignments
     */
    readonly endTime?: string

    /**
     *  A filter on the data based on this comma-separated list of vehicle IDs and externalIds. Example: &#x60;vehicleIds&#x3D;1234,5678,samsara.vin:1HGBH41JXMN109186&#x60;
     * @type {string}
     * @memberof VehicleDriverAssignmentsApiGetVehiclesDriverAssignments
     */
    readonly vehicleIds?: string

    /**
     *  A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {string}
     * @memberof VehicleDriverAssignmentsApiGetVehiclesDriverAssignments
     */
    readonly tagIds?: string

    /**
     *  A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {string}
     * @memberof VehicleDriverAssignmentsApiGetVehiclesDriverAssignments
     */
    readonly parentTagIds?: string

    /**
     *  If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof VehicleDriverAssignmentsApiGetVehiclesDriverAssignments
     */
    readonly after?: string
}

/**
 * VehicleDriverAssignmentsApi - object-oriented interface
 * @export
 * @class VehicleDriverAssignmentsApi
 * @extends {BaseAPI}
 */
export class VehicleDriverAssignmentsApi extends BaseAPI {
    /**
     * Get all driver assignments for the requested vehicles in the requested time range. The only type of assignment supported right now are assignments created through the driver app.
     * @summary Get all drivers assigned to a set of vehicles
     * @param {VehicleDriverAssignmentsApiGetVehiclesDriverAssignmentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleDriverAssignmentsApi
     */
    public getVehiclesDriverAssignments(requestParameters: VehicleDriverAssignmentsApiGetVehiclesDriverAssignmentsRequest = {}, options?: any) {
        return VehicleDriverAssignmentsApiFp(this.configuration).getVehiclesDriverAssignments(requestParameters.startTime, requestParameters.endTime, requestParameters.vehicleIds, requestParameters.tagIds, requestParameters.parentTagIds, requestParameters.after, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VehicleLocationsApi - axios parameter creator
 * @export
 */
export const VehicleLocationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestats) instead.***  Returns the last known location of all vehicles at the given `time`. If no `time` is specified, the current time is used. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Locations snapshot
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [time] A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: &#x60;2020-01-27T07:06:25Z&#x60;).
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleLocations: async (after?: string, time?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/vehicles/locations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (time !== undefined) {
                localVarQueryParameter['time'] = time;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (vehicleIds) {
                localVarQueryParameter['vehicleIds'] = vehicleIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestatsfeed) instead.***  Follow a continuous feed of all vehicle locations from Samsara Vehicle Gateways.  Your first call to this endpoint will provide you with the most recent location for each vehicle and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to the `after` parameter of this endpoint to get location updates since that `endCursor`.   If `hasNextPage` is `false`, no updates are readily available yet. We\'d suggest waiting a minimum of 5 seconds before requesting updates.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Locations feed
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleLocationsFeed: async (after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/vehicles/locations/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (vehicleIds) {
                localVarQueryParameter['vehicleIds'] = vehicleIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestatshistory) instead.***  Returns all known vehicle locations during the given time range. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Historical locations
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleLocationsHistory: async (startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getVehicleLocationsHistory', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getVehicleLocationsHistory', 'endTime', endTime)
            const localVarPath = `/fleet/vehicles/locations/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (vehicleIds) {
                localVarQueryParameter['vehicleIds'] = vehicleIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleLocationsApi - functional programming interface
 * @export
 */
export const VehicleLocationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleLocationsApiAxiosParamCreator(configuration)
    return {
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestats) instead.***  Returns the last known location of all vehicles at the given `time`. If no `time` is specified, the current time is used. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Locations snapshot
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [time] A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: &#x60;2020-01-27T07:06:25Z&#x60;).
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicleLocations(after?: string, time?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleLocationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicleLocations(after, time, parentTagIds, tagIds, vehicleIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestatsfeed) instead.***  Follow a continuous feed of all vehicle locations from Samsara Vehicle Gateways.  Your first call to this endpoint will provide you with the most recent location for each vehicle and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to the `after` parameter of this endpoint to get location updates since that `endCursor`.   If `hasNextPage` is `false`, no updates are readily available yet. We\'d suggest waiting a minimum of 5 seconds before requesting updates.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Locations feed
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicleLocationsFeed(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleLocationsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicleLocationsFeed(after, parentTagIds, tagIds, vehicleIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestatshistory) instead.***  Returns all known vehicle locations during the given time range. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Historical locations
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicleLocationsHistory(startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleLocationsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicleLocationsHistory(startTime, endTime, after, parentTagIds, tagIds, vehicleIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehicleLocationsApi - factory interface
 * @export
 */
export const VehicleLocationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleLocationsApiFp(configuration)
    return {
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestats) instead.***  Returns the last known location of all vehicles at the given `time`. If no `time` is specified, the current time is used. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Locations snapshot
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [time] A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: &#x60;2020-01-27T07:06:25Z&#x60;).
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleLocations(after?: string, time?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): AxiosPromise<VehicleLocationsResponse> {
            return localVarFp.getVehicleLocations(after, time, parentTagIds, tagIds, vehicleIds, options).then((request) => request(axios, basePath));
        },
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestatsfeed) instead.***  Follow a continuous feed of all vehicle locations from Samsara Vehicle Gateways.  Your first call to this endpoint will provide you with the most recent location for each vehicle and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to the `after` parameter of this endpoint to get location updates since that `endCursor`.   If `hasNextPage` is `false`, no updates are readily available yet. We\'d suggest waiting a minimum of 5 seconds before requesting updates.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Locations feed
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleLocationsFeed(after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): AxiosPromise<VehicleLocationsListResponse> {
            return localVarFp.getVehicleLocationsFeed(after, parentTagIds, tagIds, vehicleIds, options).then((request) => request(axios, basePath));
        },
        /**
         * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestatshistory) instead.***  Returns all known vehicle locations during the given time range. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
         * @summary Historical locations
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleLocationsHistory(startTime: string, endTime: string, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): AxiosPromise<VehicleLocationsListResponse> {
            return localVarFp.getVehicleLocationsHistory(startTime, endTime, after, parentTagIds, tagIds, vehicleIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getVehicleLocations operation in VehicleLocationsApi.
 * @export
 * @interface VehicleLocationsApiGetVehicleLocationsRequest
 */
export interface VehicleLocationsApiGetVehicleLocationsRequest {
    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof VehicleLocationsApiGetVehicleLocations
     */
    readonly after?: string

    /**
     * A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: &#x60;2020-01-27T07:06:25Z&#x60;).
     * @type {string}
     * @memberof VehicleLocationsApiGetVehicleLocations
     */
    readonly time?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocations
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocations
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocations
     */
    readonly vehicleIds?: Array<string>
}

/**
 * Request parameters for getVehicleLocationsFeed operation in VehicleLocationsApi.
 * @export
 * @interface VehicleLocationsApiGetVehicleLocationsFeedRequest
 */
export interface VehicleLocationsApiGetVehicleLocationsFeedRequest {
    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof VehicleLocationsApiGetVehicleLocationsFeed
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocationsFeed
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocationsFeed
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocationsFeed
     */
    readonly vehicleIds?: Array<string>
}

/**
 * Request parameters for getVehicleLocationsHistory operation in VehicleLocationsApi.
 * @export
 * @interface VehicleLocationsApiGetVehicleLocationsHistoryRequest
 */
export interface VehicleLocationsApiGetVehicleLocationsHistoryRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof VehicleLocationsApiGetVehicleLocationsHistory
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof VehicleLocationsApiGetVehicleLocationsHistory
     */
    readonly endTime: string

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof VehicleLocationsApiGetVehicleLocationsHistory
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocationsHistory
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocationsHistory
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleLocationsApiGetVehicleLocationsHistory
     */
    readonly vehicleIds?: Array<string>
}

/**
 * VehicleLocationsApi - object-oriented interface
 * @export
 * @class VehicleLocationsApi
 * @extends {BaseAPI}
 */
export class VehicleLocationsApi extends BaseAPI {
    /**
     * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestats) instead.***  Returns the last known location of all vehicles at the given `time`. If no `time` is specified, the current time is used. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
     * @summary Locations snapshot
     * @param {VehicleLocationsApiGetVehicleLocationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleLocationsApi
     */
    public getVehicleLocations(requestParameters: VehicleLocationsApiGetVehicleLocationsRequest = {}, options?: any) {
        return VehicleLocationsApiFp(this.configuration).getVehicleLocations(requestParameters.after, requestParameters.time, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.vehicleIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestatsfeed) instead.***  Follow a continuous feed of all vehicle locations from Samsara Vehicle Gateways.  Your first call to this endpoint will provide you with the most recent location for each vehicle and a `pagination` object that contains an `endCursor`.  You can provide the `endCursor` to the `after` parameter of this endpoint to get location updates since that `endCursor`.   If `hasNextPage` is `false`, no updates are readily available yet. We\'d suggest waiting a minimum of 5 seconds before requesting updates.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
     * @summary Locations feed
     * @param {VehicleLocationsApiGetVehicleLocationsFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleLocationsApi
     */
    public getVehicleLocationsFeed(requestParameters: VehicleLocationsApiGetVehicleLocationsFeedRequest = {}, options?: any) {
        return VehicleLocationsApiFp(this.configuration).getVehicleLocationsFeed(requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.vehicleIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * ***NOTE: The Vehicle Locations API is an older API that does not combine GPS data with onboard diagnostics. Try our new [Vehicle Stats API](ref:getvehiclestatshistory) instead.***  Returns all known vehicle locations during the given time range. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/vehicle-locations-1\" target=\"_blank\">Vehicle Locations</a>.
     * @summary Historical locations
     * @param {VehicleLocationsApiGetVehicleLocationsHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleLocationsApi
     */
    public getVehicleLocationsHistory(requestParameters: VehicleLocationsApiGetVehicleLocationsHistoryRequest, options?: any) {
        return VehicleLocationsApiFp(this.configuration).getVehicleLocationsHistory(requestParameters.startTime, requestParameters.endTime, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.vehicleIds, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VehicleStatsApi - axios parameter creator
 * @export
 */
export const VehicleStatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the last known stats of all vehicles at the given `time`. If no `time` is specified, the current time is used.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Stats snapshot
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [time] A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: &#x60;2020-01-27T07:06:25Z&#x60;).
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleStats: async (types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, time?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getVehicleStats', 'types', types)
            const localVarPath = `/fleet/vehicles/stats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (time !== undefined) {
                localVarQueryParameter['time'] = time;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (vehicleIds) {
                localVarQueryParameter['vehicleIds'] = vehicleIds.join(COLLECTION_FORMATS.csv);
            }

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Follow a feed of vehicle stats.   Your first call to this endpoint will provide you with the most recent stats for each vehicle and an `endCursor`.  You can the provide the `endCursor` value to the `after` query parameter to get all updates since the last call you made.  If `hasNextPage` is `false`, no new data is immediately available. You should wait a minimum of 5 seconds making a subsequent request.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Stats feed
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>} [decorations] Decorations to add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the vehicle\&#39;s location whenever the engine changes state, you may set &#x60;types&#x3D;engineStates&amp;decorations&#x3D;gps&#x60;.  You may list ***up to 2*** decorations using comma-separated format. If multiple stats are listed in the &#x60;types&#x60; parameter, the decorations will be added to each one. For example: &#x60;types&#x3D;engineStates,obdOdometerMeters,faultCodes&amp;decorations&#x3D;gps,fuelPercents&#x60; will list GPS and fuel decorations for each engine state change, each odometer reading, and each fault code. See the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  Note that decorations may significantly increase the response payload size.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleStatsFeed: async (types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, decorations?: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getVehicleStatsFeed', 'types', types)
            const localVarPath = `/fleet/vehicles/stats/feed`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (vehicleIds) {
                localVarQueryParameter['vehicleIds'] = vehicleIds.join(COLLECTION_FORMATS.csv);
            }

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS.csv);
            }

            if (decorations) {
                localVarQueryParameter['decorations'] = decorations.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns vehicle stats during the given time range for all vehicles. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Historical stats
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>} [decorations] Decorations to add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the vehicle\&#39;s location whenever the engine changes state, you may set &#x60;types&#x3D;engineStates&amp;decorations&#x3D;gps&#x60;.  You may list ***up to 2*** decorations using comma-separated format. If multiple stats are listed in the &#x60;types&#x60; parameter, the decorations will be added to each one. For example: &#x60;types&#x3D;engineStates,obdOdometerMeters,faultCodes&amp;decorations&#x3D;gps,fuelPercents&#x60; will list GPS and fuel decorations for each engine state change, each odometer reading, and each fault code. See the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  Note that decorations may significantly increase the response payload size.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleStatsHistory: async (startTime: string, endTime: string, types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, decorations?: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getVehicleStatsHistory', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getVehicleStatsHistory', 'endTime', endTime)
            // verify required parameter 'types' is not null or undefined
            assertParamExists('getVehicleStatsHistory', 'types', types)
            const localVarPath = `/fleet/vehicles/stats/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }

            if (vehicleIds) {
                localVarQueryParameter['vehicleIds'] = vehicleIds.join(COLLECTION_FORMATS.csv);
            }

            if (types) {
                localVarQueryParameter['types'] = types.join(COLLECTION_FORMATS.csv);
            }

            if (decorations) {
                localVarQueryParameter['decorations'] = decorations.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehicleStatsApi - functional programming interface
 * @export
 */
export const VehicleStatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehicleStatsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the last known stats of all vehicles at the given `time`. If no `time` is specified, the current time is used.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Stats snapshot
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [time] A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: &#x60;2020-01-27T07:06:25Z&#x60;).
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicleStats(types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, time?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleStatsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicleStats(types, after, time, parentTagIds, tagIds, vehicleIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Follow a feed of vehicle stats.   Your first call to this endpoint will provide you with the most recent stats for each vehicle and an `endCursor`.  You can the provide the `endCursor` value to the `after` query parameter to get all updates since the last call you made.  If `hasNextPage` is `false`, no new data is immediately available. You should wait a minimum of 5 seconds making a subsequent request.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Stats feed
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>} [decorations] Decorations to add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the vehicle\&#39;s location whenever the engine changes state, you may set &#x60;types&#x3D;engineStates&amp;decorations&#x3D;gps&#x60;.  You may list ***up to 2*** decorations using comma-separated format. If multiple stats are listed in the &#x60;types&#x60; parameter, the decorations will be added to each one. For example: &#x60;types&#x3D;engineStates,obdOdometerMeters,faultCodes&amp;decorations&#x3D;gps,fuelPercents&#x60; will list GPS and fuel decorations for each engine state change, each odometer reading, and each fault code. See the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  Note that decorations may significantly increase the response payload size.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicleStatsFeed(types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, decorations?: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleStatsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicleStatsFeed(types, after, parentTagIds, tagIds, vehicleIds, decorations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns vehicle stats during the given time range for all vehicles. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Historical stats
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>} [decorations] Decorations to add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the vehicle\&#39;s location whenever the engine changes state, you may set &#x60;types&#x3D;engineStates&amp;decorations&#x3D;gps&#x60;.  You may list ***up to 2*** decorations using comma-separated format. If multiple stats are listed in the &#x60;types&#x60; parameter, the decorations will be added to each one. For example: &#x60;types&#x3D;engineStates,obdOdometerMeters,faultCodes&amp;decorations&#x3D;gps,fuelPercents&#x60; will list GPS and fuel decorations for each engine state change, each odometer reading, and each fault code. See the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  Note that decorations may significantly increase the response payload size.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicleStatsHistory(startTime: string, endTime: string, types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, decorations?: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleStatsListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicleStatsHistory(startTime, endTime, types, after, parentTagIds, tagIds, vehicleIds, decorations, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehicleStatsApi - factory interface
 * @export
 */
export const VehicleStatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehicleStatsApiFp(configuration)
    return {
        /**
         * Returns the last known stats of all vehicles at the given `time`. If no `time` is specified, the current time is used.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Stats snapshot
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {string} [time] A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: &#x60;2020-01-27T07:06:25Z&#x60;).
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleStats(types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, time?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, options?: any): AxiosPromise<VehicleStatsResponse> {
            return localVarFp.getVehicleStats(types, after, time, parentTagIds, tagIds, vehicleIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Follow a feed of vehicle stats.   Your first call to this endpoint will provide you with the most recent stats for each vehicle and an `endCursor`.  You can the provide the `endCursor` value to the `after` query parameter to get all updates since the last call you made.  If `hasNextPage` is `false`, no new data is immediately available. You should wait a minimum of 5 seconds making a subsequent request.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Stats feed
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>} [decorations] Decorations to add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the vehicle\&#39;s location whenever the engine changes state, you may set &#x60;types&#x3D;engineStates&amp;decorations&#x3D;gps&#x60;.  You may list ***up to 2*** decorations using comma-separated format. If multiple stats are listed in the &#x60;types&#x60; parameter, the decorations will be added to each one. For example: &#x60;types&#x3D;engineStates,obdOdometerMeters,faultCodes&amp;decorations&#x3D;gps,fuelPercents&#x60; will list GPS and fuel decorations for each engine state change, each odometer reading, and each fault code. See the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  Note that decorations may significantly increase the response payload size.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleStatsFeed(types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, decorations?: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>, options?: any): AxiosPromise<VehicleStatsListResponse> {
            return localVarFp.getVehicleStatsFeed(types, after, parentTagIds, tagIds, vehicleIds, decorations, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns vehicle stats during the given time range for all vehicles. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
         * @summary Historical stats
         * @param {string} startTime A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {string} endTime An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>} types The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {Array<string>} [vehicleIds] A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
         * @param {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>} [decorations] Decorations to add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the vehicle\&#39;s location whenever the engine changes state, you may set &#x60;types&#x3D;engineStates&amp;decorations&#x3D;gps&#x60;.  You may list ***up to 2*** decorations using comma-separated format. If multiple stats are listed in the &#x60;types&#x60; parameter, the decorations will be added to each one. For example: &#x60;types&#x3D;engineStates,obdOdometerMeters,faultCodes&amp;decorations&#x3D;gps,fuelPercents&#x60; will list GPS and fuel decorations for each engine state change, each odometer reading, and each fault code. See the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  Note that decorations may significantly increase the response payload size.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.  
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicleStatsHistory(startTime: string, endTime: string, types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, vehicleIds?: Array<string>, decorations?: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>, options?: any): AxiosPromise<VehicleStatsListResponse> {
            return localVarFp.getVehicleStatsHistory(startTime, endTime, types, after, parentTagIds, tagIds, vehicleIds, decorations, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getVehicleStats operation in VehicleStatsApi.
 * @export
 * @interface VehicleStatsApiGetVehicleStatsRequest
 */
export interface VehicleStatsApiGetVehicleStatsRequest {
    /**
     * The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
     * @type {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>}
     * @memberof VehicleStatsApiGetVehicleStats
     */
    readonly types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof VehicleStatsApiGetVehicleStats
     */
    readonly after?: string

    /**
     * A filter on the data that returns the last known data points with timestamps less than or equal to this value. Defaults to now if not provided. Must be a string in RFC 3339 format. Millisecond precision and timezones are supported. (Example: &#x60;2020-01-27T07:06:25Z&#x60;).
     * @type {string}
     * @memberof VehicleStatsApiGetVehicleStats
     */
    readonly time?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStats
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStats
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStats
     */
    readonly vehicleIds?: Array<string>
}

/**
 * Request parameters for getVehicleStatsFeed operation in VehicleStatsApi.
 * @export
 * @interface VehicleStatsApiGetVehicleStatsFeedRequest
 */
export interface VehicleStatsApiGetVehicleStatsFeedRequest {
    /**
     * The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
     * @type {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>}
     * @memberof VehicleStatsApiGetVehicleStatsFeed
     */
    readonly types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof VehicleStatsApiGetVehicleStatsFeed
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStatsFeed
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStatsFeed
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStatsFeed
     */
    readonly vehicleIds?: Array<string>

    /**
     * Decorations to add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the vehicle\&#39;s location whenever the engine changes state, you may set &#x60;types&#x3D;engineStates&amp;decorations&#x3D;gps&#x60;.  You may list ***up to 2*** decorations using comma-separated format. If multiple stats are listed in the &#x60;types&#x60; parameter, the decorations will be added to each one. For example: &#x60;types&#x3D;engineStates,obdOdometerMeters,faultCodes&amp;decorations&#x3D;gps,fuelPercents&#x60; will list GPS and fuel decorations for each engine state change, each odometer reading, and each fault code. See the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  Note that decorations may significantly increase the response payload size.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.  
     * @type {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>}
     * @memberof VehicleStatsApiGetVehicleStatsFeed
     */
    readonly decorations?: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>
}

/**
 * Request parameters for getVehicleStatsHistory operation in VehicleStatsApi.
 * @export
 * @interface VehicleStatsApiGetVehicleStatsHistoryRequest
 */
export interface VehicleStatsApiGetVehicleStatsHistoryRequest {
    /**
     * A start time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof VehicleStatsApiGetVehicleStatsHistory
     */
    readonly startTime: string

    /**
     * An end time in RFC 3339 format. Millisecond precision and timezones are supported. (Examples: 2019-06-13T19:08:25Z, 2019-06-13T19:08:25.455Z, OR 2015-09-15T14:00:12-04:00).
     * @type {string}
     * @memberof VehicleStatsApiGetVehicleStatsHistory
     */
    readonly endTime: string

    /**
     * The stat types you want this endpoint to return information on. See also the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  You may list ***up to 3*** types using comma-separated format. For example: &#x60;types&#x3D;gps,engineStates,obdOdometerMeters&#x60;.  *Note:* &#x60;auxInput3&#x60;-&#x60;auxInput10&#x60; count as a single type against the limit of 3. For example, you could list &#x60;types&#x3D;engineStates,obdOdometerMeters,auxInput3,auxInput4&#x60; because &#x60;auxInput3&#x60; and &#x60;auxInput4&#x60; count as a single stat type. &#x60;auxInput1&#x60; and &#x60;auxInput2&#x60; still count as their own individual types.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;defLevelMilliPercent&#x60;: The Diesel Exhaust Fluid (DEF) level in milli percentage points (e.g. &#x60;99001&#x60;, &#x60;49999&#x60;, etc). - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;gpsOdometerMeters&#x60;: Odometer reading provided by GPS calculations when OBD odometer cannot be pulled automatically. You must provide a manual odometer reading before this value is updated. Manual odometer readings can be provided via the [PATCH /fleet/vehicles/{id}](ref:updatevehicle) endpoint or through the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/115005273667-Editing-Odometer-Reading\&quot; target&#x3D;\&quot;_blank\&quot;&gt;cloud dasbhoard&lt;/a&gt;. Odometer readings that are manually set will update as GPS trip data is gathered. Try combining with &#x60;obdOdometerMeters&#x60;. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. Try combining with &#x60;gpsOdometerMeters&#x60;.  - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.
     * @type {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>}
     * @memberof VehicleStatsApiGetVehicleStatsHistory
     */
    readonly types: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'barometricPressurePa' | 'batteryMilliVolts' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'gpsOdometerMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters' | 'syntheticEngineSeconds'>

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof VehicleStatsApiGetVehicleStatsHistory
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStatsHistory
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStatsHistory
     */
    readonly tagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of vehicle IDs. Example: &#x60;vehicleIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehicleStatsApiGetVehicleStatsHistory
     */
    readonly vehicleIds?: Array<string>

    /**
     * Decorations to add to the primary stats listed in the &#x60;types&#x60; parameter. For example, if you wish to know the vehicle\&#39;s location whenever the engine changes state, you may set &#x60;types&#x3D;engineStates&amp;decorations&#x3D;gps&#x60;.  You may list ***up to 2*** decorations using comma-separated format. If multiple stats are listed in the &#x60;types&#x60; parameter, the decorations will be added to each one. For example: &#x60;types&#x3D;engineStates,obdOdometerMeters,faultCodes&amp;decorations&#x3D;gps,fuelPercents&#x60; will list GPS and fuel decorations for each engine state change, each odometer reading, and each fault code. See the &lt;a href&#x3D;\&quot;/docs/telematics#query-parameters\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Telematics&lt;/a&gt; guide for more details.  Note that decorations may significantly increase the response payload size.  - &#x60;ambientAirTemperatureMilliC&#x60;: The ambient air temperature reading in millidegree Celsius. - &#x60;auxInput1&#x60;-&#x60;auxInput10&#x60;: Stat events from the &lt;a href&#x3D;\&quot;https://kb.samsara.com/hc/en-us/articles/360043040512-Auxiliary-Inputs\&quot; target&#x3D;\&quot;_blank\&quot;&gt;auxiliary inputs&lt;/a&gt; for the vehicle. - &#x60;batteryMilliVolts&#x60;: The vehicle battery voltage reading. - &#x60;barometricPressurePa&#x60;: The barometric pressure reading in pascals. - &#x60;ecuSpeedMph&#x60;: The speed of the engine in miles per hour according to the ECU. - &#x60;engineCoolantTemperatureMilliC&#x60;: The engine coolant temperature reading in millidegree Celsius. - &#x60;engineImmobilizer&#x60;: The state of the engine immobilizer (&#x60;ignition_disabled&#x60;, &#x60;ignition_enabled&#x60;). - &#x60;engineOilPressureKPa&#x60;: The engine oil pressure reading in kilopascals. - &#x60;engineLoadPercent&#x60;: The engine load in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;engineRpm&#x60;: The revolutions per minute of the engine. - &#x60;engineStates&#x60;: The state of the engine (&#x60;Off&#x60;, &#x60;On&#x60;, &#x60;Idle&#x60;). - &#x60;faultCodes&#x60;: The diagnostic fault codes for the vehicle. - &#x60;fuelPercents&#x60;: The engine fuel level in percentage points (e.g. &#x60;99&#x60;, &#x60;50&#x60;, etc). - &#x60;gps&#x60;: GPS data including lat/long, heading, speed, address book entry (if exists), and a reverse geocoded address. - &#x60;gpsDistanceMeters&#x60;: The distance the vehicle has traveled since the gateway was installed based on GPS calculations. - &#x60;intakeManifoldTemperatureMilliC&#x60;: The intake manifold temperature reading in millidegree Celsius. - &#x60;nfcCardScans&#x60;: ID card scans. - &#x60;obdEngineSeconds&#x60;: The cumulative number of seconds the engine has run according to onboard diagnostics. - &#x60;obdOdometerMeters&#x60;: The odometer reading according to onboard diagnostics. If Samsara does not have diagnostic coverage for a particular vehicle, the value for this stat type will be omitted. - &#x60;syntheticEngineSeconds&#x60;: Data for the synthetic engine seconds for the vehicle.  
     * @type {Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>}
     * @memberof VehicleStatsApiGetVehicleStatsHistory
     */
    readonly decorations?: Array<'ambientAirTemperatureMilliC' | 'auxInput1' | 'auxInput2' | 'auxInput3' | 'auxInput4' | 'auxInput5' | 'auxInput6' | 'auxInput7' | 'auxInput8' | 'auxInput9' | 'auxInput10' | 'batteryMilliVolts' | 'barometricPressurePa' | 'defLevelMilliPercent' | 'ecuSpeedMph' | 'engineCoolantTemperatureMilliC' | 'engineImmobilizer' | 'engineLoadPercent' | 'engineOilPressureKPa' | 'engineRpm' | 'engineStates' | 'faultCodes' | 'fuelPercents' | 'gps' | 'gpsDistanceMeters' | 'intakeManifoldTemperatureMilliC' | 'nfcCardScans' | 'obdEngineSeconds' | 'obdOdometerMeters'>
}

/**
 * VehicleStatsApi - object-oriented interface
 * @export
 * @class VehicleStatsApi
 * @extends {BaseAPI}
 */
export class VehicleStatsApi extends BaseAPI {
    /**
     * Returns the last known stats of all vehicles at the given `time`. If no `time` is specified, the current time is used.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
     * @summary Stats snapshot
     * @param {VehicleStatsApiGetVehicleStatsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleStatsApi
     */
    public getVehicleStats(requestParameters: VehicleStatsApiGetVehicleStatsRequest, options?: any) {
        return VehicleStatsApiFp(this.configuration).getVehicleStats(requestParameters.types, requestParameters.after, requestParameters.time, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.vehicleIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Follow a feed of vehicle stats.   Your first call to this endpoint will provide you with the most recent stats for each vehicle and an `endCursor`.  You can the provide the `endCursor` value to the `after` query parameter to get all updates since the last call you made.  If `hasNextPage` is `false`, no new data is immediately available. You should wait a minimum of 5 seconds making a subsequent request.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
     * @summary Stats feed
     * @param {VehicleStatsApiGetVehicleStatsFeedRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleStatsApi
     */
    public getVehicleStatsFeed(requestParameters: VehicleStatsApiGetVehicleStatsFeedRequest, options?: any) {
        return VehicleStatsApiFp(this.configuration).getVehicleStatsFeed(requestParameters.types, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.vehicleIds, requestParameters.decorations, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns vehicle stats during the given time range for all vehicles. This can be optionally filtered by tags or specific vehicle IDs.  Related guide: <a href=\"/docs/telematics\" target=\"_blank\">Telematics</a>.
     * @summary Historical stats
     * @param {VehicleStatsApiGetVehicleStatsHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehicleStatsApi
     */
    public getVehicleStatsHistory(requestParameters: VehicleStatsApiGetVehicleStatsHistoryRequest, options?: any) {
        return VehicleStatsApiFp(this.configuration).getVehicleStatsHistory(requestParameters.startTime, requestParameters.endTime, requestParameters.types, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, requestParameters.vehicleIds, requestParameters.decorations, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VehiclesApi - axios parameter creator
 * @export
 */
export const VehiclesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get information about a specific vehicle.
         * @summary Retrieve a vehicle
         * @param {string} id ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;maintenanceId:250020&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.vin:1HGBH41JXMN109186&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicle: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getVehicle', 'id', id)
            const localVarPath = `/fleet/vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all vehicles.
         * @summary List all vehicles
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVehicles: async (limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fleet/vehicles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (parentTagIds) {
                localVarQueryParameter['parentTagIds'] = parentTagIds.join(COLLECTION_FORMATS.csv);
            }

            if (tagIds) {
                localVarQueryParameter['tagIds'] = tagIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the given Vehicle object.  **Note:** Vehicle objects are automatically created when Samsara Vehicle Gateways are installed. You cannot create a Vehicle object via API.  You are able to *update* many of the fields of a Vehicle.  **Note**: There are no required fields in the request body, and you only need to provide the fields you wish to update.
         * @summary Update a vehicle
         * @param {string} id ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;maintenanceId:250020&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.vin:1HGBH41JXMN109186&#x60;.
         * @param {UpdateVehicleRequest} vehicle Fields that can be patched on a vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVehicle: async (id: string, vehicle: UpdateVehicleRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateVehicle', 'id', id)
            // verify required parameter 'vehicle' is not null or undefined
            assertParamExists('updateVehicle', 'vehicle', vehicle)
            const localVarPath = `/fleet/vehicles/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(vehicle, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VehiclesApi - functional programming interface
 * @export
 */
export const VehiclesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VehiclesApiAxiosParamCreator(configuration)
    return {
        /**
         * Get information about a specific vehicle.
         * @summary Retrieve a vehicle
         * @param {string} id ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;maintenanceId:250020&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.vin:1HGBH41JXMN109186&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getVehicle(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getVehicle(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all vehicles.
         * @summary List all vehicles
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listVehicles(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListVehiclesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listVehicles(limit, after, parentTagIds, tagIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the given Vehicle object.  **Note:** Vehicle objects are automatically created when Samsara Vehicle Gateways are installed. You cannot create a Vehicle object via API.  You are able to *update* many of the fields of a Vehicle.  **Note**: There are no required fields in the request body, and you only need to provide the fields you wish to update.
         * @summary Update a vehicle
         * @param {string} id ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;maintenanceId:250020&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.vin:1HGBH41JXMN109186&#x60;.
         * @param {UpdateVehicleRequest} vehicle Fields that can be patched on a vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVehicle(id: string, vehicle: UpdateVehicleRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VehicleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVehicle(id, vehicle, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VehiclesApi - factory interface
 * @export
 */
export const VehiclesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VehiclesApiFp(configuration)
    return {
        /**
         * Get information about a specific vehicle.
         * @summary Retrieve a vehicle
         * @param {string} id ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;maintenanceId:250020&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.vin:1HGBH41JXMN109186&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getVehicle(id: string, options?: any): AxiosPromise<VehicleResponse> {
            return localVarFp.getVehicle(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all vehicles.
         * @summary List all vehicles
         * @param {number} [limit] The limit for how many objects will be in the response. Default and max for this value is 512 objects.
         * @param {string} [after] If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
         * @param {Array<string>} [parentTagIds] A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
         * @param {Array<string>} [tagIds] A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listVehicles(limit?: number, after?: string, parentTagIds?: Array<string>, tagIds?: Array<string>, options?: any): AxiosPromise<ListVehiclesResponse> {
            return localVarFp.listVehicles(limit, after, parentTagIds, tagIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the given Vehicle object.  **Note:** Vehicle objects are automatically created when Samsara Vehicle Gateways are installed. You cannot create a Vehicle object via API.  You are able to *update* many of the fields of a Vehicle.  **Note**: There are no required fields in the request body, and you only need to provide the fields you wish to update.
         * @summary Update a vehicle
         * @param {string} id ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;maintenanceId:250020&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.vin:1HGBH41JXMN109186&#x60;.
         * @param {UpdateVehicleRequest} vehicle Fields that can be patched on a vehicle.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVehicle(id: string, vehicle: UpdateVehicleRequest, options?: any): AxiosPromise<VehicleResponse> {
            return localVarFp.updateVehicle(id, vehicle, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getVehicle operation in VehiclesApi.
 * @export
 * @interface VehiclesApiGetVehicleRequest
 */
export interface VehiclesApiGetVehicleRequest {
    /**
     * ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;maintenanceId:250020&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.vin:1HGBH41JXMN109186&#x60;.
     * @type {string}
     * @memberof VehiclesApiGetVehicle
     */
    readonly id: string
}

/**
 * Request parameters for listVehicles operation in VehiclesApi.
 * @export
 * @interface VehiclesApiListVehiclesRequest
 */
export interface VehiclesApiListVehiclesRequest {
    /**
     * The limit for how many objects will be in the response. Default and max for this value is 512 objects.
     * @type {number}
     * @memberof VehiclesApiListVehicles
     */
    readonly limit?: number

    /**
     * If specified, this should be the endCursor value from the previous page of results. When present, this request will return the next page of results that occur immediately after the previous page of results.
     * @type {string}
     * @memberof VehiclesApiListVehicles
     */
    readonly after?: string

    /**
     * A filter on the data based on this comma-separated list of parent tag IDs, for use by orgs with tag hierarchies. Specifying a parent tag will implicitly include all descendent tags of the parent tag. Example: &#x60;parentTagIds&#x3D;345,678&#x60;
     * @type {Array<string>}
     * @memberof VehiclesApiListVehicles
     */
    readonly parentTagIds?: Array<string>

    /**
     * A filter on the data based on this comma-separated list of tag IDs. Example: &#x60;tagIds&#x3D;1234,5678&#x60;
     * @type {Array<string>}
     * @memberof VehiclesApiListVehicles
     */
    readonly tagIds?: Array<string>
}

/**
 * Request parameters for updateVehicle operation in VehiclesApi.
 * @export
 * @interface VehiclesApiUpdateVehicleRequest
 */
export interface VehiclesApiUpdateVehicleRequest {
    /**
     * ID of the vehicle. This can either be the Samsara-specified ID, or an external ID. External IDs are customer specified key-value pairs created in the POST or PATCH requests of this resource, or automatically populated by fields on the vehicle. To specify an external ID as part of a path parameter, use the following format: &#x60;key:value&#x60;. For example, &#x60;maintenanceId:250020&#x60;. Automatically populated external IDs are prefixed with &#x60;samsara.&#x60;. For example, &#x60;samsara.vin:1HGBH41JXMN109186&#x60;.
     * @type {string}
     * @memberof VehiclesApiUpdateVehicle
     */
    readonly id: string

    /**
     * Fields that can be patched on a vehicle.
     * @type {UpdateVehicleRequest}
     * @memberof VehiclesApiUpdateVehicle
     */
    readonly vehicle: UpdateVehicleRequest
}

/**
 * VehiclesApi - object-oriented interface
 * @export
 * @class VehiclesApi
 * @extends {BaseAPI}
 */
export class VehiclesApi extends BaseAPI {
    /**
     * Get information about a specific vehicle.
     * @summary Retrieve a vehicle
     * @param {VehiclesApiGetVehicleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public getVehicle(requestParameters: VehiclesApiGetVehicleRequest, options?: any) {
        return VehiclesApiFp(this.configuration).getVehicle(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all vehicles.
     * @summary List all vehicles
     * @param {VehiclesApiListVehiclesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public listVehicles(requestParameters: VehiclesApiListVehiclesRequest = {}, options?: any) {
        return VehiclesApiFp(this.configuration).listVehicles(requestParameters.limit, requestParameters.after, requestParameters.parentTagIds, requestParameters.tagIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the given Vehicle object.  **Note:** Vehicle objects are automatically created when Samsara Vehicle Gateways are installed. You cannot create a Vehicle object via API.  You are able to *update* many of the fields of a Vehicle.  **Note**: There are no required fields in the request body, and you only need to provide the fields you wish to update.
     * @summary Update a vehicle
     * @param {VehiclesApiUpdateVehicleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VehiclesApi
     */
    public updateVehicle(requestParameters: VehiclesApiUpdateVehicleRequest, options?: any) {
        return VehiclesApiFp(this.configuration).updateVehicle(requestParameters.id, requestParameters.vehicle, options).then((request) => request(this.axios, this.basePath));
    }
}


